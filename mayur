// src/pages/History.jsx
import React, { useEffect, useState, useMemo } from 'react';
import { useParams } from 'react-router-dom';
import {
  Container,
  Box,
  Typography,
  Paper,
  Table,
  TableHead,
  TableBody,
  TableRow,
  TableCell,
  Button,
  TextField
} from '@mui/material';
import { DatePicker, LocalizationProvider } from '@mui/x-date-pickers';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { format } from 'date-fns';
import * as XLSX from 'xlsx';
import { saveAs } from 'file-saver';

import Header from '../components/Header';
import Footer from '../components/Footer';
import LoadingSpinner from '../components/LoadingSpinner';
import { fetchHistory } from '../api/occupancy.service';

// Map partition codes to friendly names
const apacPartitionNames = {
  'IN.Pune': 'Pune',
  'MY.Kuala Lumpur': 'Kuala Lumpur',
  'PH.Quezon': 'Quezon City',
  'PH.Taguig': 'Taguig',
  'JP.Tokyo': 'Tokyo'
};

export default function History() {
  const { partition } = useParams();
  const decodedPartition = partition ? decodeURIComponent(partition) : null;

  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [pickedDate, setPickedDate] = useState(null);
  const [showDetails, setShowDetails] = useState(false);

  // load history on mount or when partition changes
  useEffect(() => {
    setLoading(true);
    fetchHistory(decodedPartition)
      .then(json => setData(json))
      .finally(() => setLoading(false));
  }, [decodedPartition]);

  // find the summary row for the selected date
  const summaryEntry = useMemo(() => {
    if (!data || !pickedDate) return null;
    const ds = format(pickedDate, 'yyyy-MM-dd');
    return data.summaryByDate.find(r => r.date === ds) || null;
  }, [data, pickedDate]);

  // build the summary table rows
  const summaryRows = useMemo(() => {
    if (!summaryEntry) return [];
    return Object.entries(summaryEntry.partitions)
      .filter(([key]) => !decodedPartition || key === decodedPartition)
      .map(([key, vals]) => ({
        location: apacPartitionNames[key] || key,
        employees: vals.Employee ?? 0,
        contractors: vals.Contractor ?? 0,
        total: vals.total ?? 0
      }));
  }, [summaryEntry, decodedPartition]);

  // build the details table rows
  const detailRows = useMemo(() => {
    if (!data || !pickedDate || !showDetails) return [];
    const ds = format(pickedDate, 'yyyy-MM-dd');
    return data.details
      .filter(r => r.SwipeDate.slice(0, 10) === ds)
      .filter(r => !decodedPartition || r.PartitionName2 === decodedPartition)
      .map((r, i) => ({
        sr: i + 1,
        date: r.SwipeDate.slice(0, 10),
        time: r.LocaleMessageTime.slice(11, 19),
        employeeId: r.EmployeeID,
        name: r.ObjectName1,
        type: r.PersonnelType,
        door: r.Door,
        partition: apacPartitionNames[r.PartitionName2] || r.PartitionName2
      }));
  }, [data, pickedDate, decodedPartition, showDetails]);

  const handleExport = () => {
    const ws = XLSX.utils.json_to_sheet(detailRows);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Details');
    const buf = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });
    saveAs(new Blob([buf]), `apac_history_${format(pickedDate, 'yyyyMMdd')}.xlsx`);
  };

  if (loading) return <LoadingSpinner />;
  if (!data) return null;

  return (
    <>
      <Header />
      <Container maxWidth={false} disableGutters sx={{ pt: 2, pb: 4 }}>
        <Box sx={{ px: 2, mb: 2 }}>
          <LocalizationProvider dateAdapter={AdapterDateFns}>
            <DatePicker
              label="Select date"
              value={pickedDate}
              onChange={d => { setPickedDate(d); setShowDetails(false); }}
              renderInput={params => <TextField fullWidth {...params} />}
            />
          </LocalizationProvider>
        </Box>

        {pickedDate && summaryEntry && (
          <Paper elevation={3} sx={{ mx: 2, mb: 2, p: 2 }}>
            <Typography variant="h6" align="center" gutterBottom>
              {format(pickedDate, 'EEEE, d MMMM yyyy')}
            </Typography>
            <Table size="small">
              <TableHead>
                <TableRow>
                  {['Location', 'Employees', 'Contractors', 'Total'].map(h => (
                    <TableCell
                      key={h}
                      align={h === 'Location' ? 'left' : 'right'}
                      sx={{ fontWeight: 'bold', bgcolor: '#FFC107' }}
                    >
                      {h}
                    </TableCell>
                  ))}
                </TableRow>
              </TableHead>
              <TableBody>
                {summaryRows.map((r, i) => (
                  <TableRow key={i}>
                    <TableCell>{r.location}</TableCell>
                    <TableCell align="right">{r.employees}</TableCell>
                    <TableCell align="right">{r.contractors}</TableCell>
                    <TableCell align="right" sx={{ fontWeight: 'bold' }}>
                      {r.total}
                    </TableCell>
                  </TableRow>
                ))}
                <TableRow>
                  <TableCell sx={{ fontWeight: 'bold' }}>Total</TableCell>
                  <TableCell align="right" sx={{ fontWeight: 'bold' }}>
                    {summaryRows.reduce((sum, r) => sum + r.employees, 0)}
                  </TableCell>
                  <TableCell align="right" sx={{ fontWeight: 'bold' }}>
                    {summaryRows.reduce((sum, r) => sum + r.contractors, 0)}
                  </TableCell>
                  <TableCell align="right" sx={{ fontWeight: 'bold' }}>
                    {summaryRows.reduce((sum, r) => sum + r.total, 0)}
                  </TableCell>
                </TableRow>
              </TableBody>
            </Table>
            <Box display="flex" justifyContent="center" sx={{ mt: 2 }}>
              <Button
                variant="contained"
                sx={{ bgcolor: '#FFC107', color: '#000' }}
                onClick={() => setShowDetails(v => !v)}
              >
                {showDetails ? 'Hide Details' : 'Show Details'}
              </Button>
              {showDetails && (
                <Button
                  variant="outlined"
                  sx={{ ml: 2, borderColor: '#FFC107', color: '#FFC107' }}
                  onClick={handleExport}
                >
                  Export to Excel
                </Button>
              )}
            </Box>
          </Paper>
        )}

        {showDetails && detailRows.length > 0 && (
          <Paper elevation={3} sx={{ mx: 2, p: 2 }}>
            <Typography variant="h6" gutterBottom>
              Detailed Swipe Records
            </Typography>
            <Table size="small">
              <TableHead>
                <TableRow sx={{ bgcolor: '#000' }}>
                  {[
                    'Sr', 'Date', 'Time', 'Employee ID',
                    'Name', 'Personnel Type', 'Door', 'Partition'
                  ].map(h => (
                    <TableCell key={h} align="center" sx={{ color: '#FFC107', fontWeight: 'bold' }}>
                      {h}
                    </TableCell>
                  ))}
                </TableRow>
              </TableHead>
              <TableBody>
                {detailRows.map((r, i) => (
                  <TableRow key={i}>
                    <TableCell align="center">{r.sr}</TableCell>
                    <TableCell align="center">{r.date}</TableCell>
                    <TableCell align="center">{r.time}</TableCell>
                    <TableCell align="center">{r.employeeId}</TableCell>
                    <TableCell align="center">{r.name}</TableCell>
                    <TableCell align="center">{r.type}</TableCell>
                    <TableCell align="center">{r.door}</TableCell>
                    <TableCell align="center">{r.partition}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </Paper>
        )}
      </Container>
      <Footer />
    </>
  );
}