

import React, { useEffect, useState, useMemo } from 'react';
import { useParams } from 'react-router-dom';
import {
  Container, Box, Typography, Paper, Table, TableHead, TableBody,
  TableRow, TableCell, Button, TextField
} from '@mui/material';
import { DatePicker, LocalizationProvider } from '@mui/x-date-pickers';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { format } from 'date-fns';
import * as XLSX from 'xlsx';
import { saveAs } from 'file-saver';

import Header from '../components/Header';
import Footer from '../components/Footer';
import LoadingSpinner from '../components/LoadingSpinner';
import { fetchHistory } from '../api/occupancy.service';

const codeToCountry = {
  AUT: 'Austria', DU: 'UAE', IE: 'Ireland', IT: 'Italy',
  LT: 'Lithuania', MA: 'Morocco', RU: 'Russia', UK: 'UK', ES: 'Spain'
};

export default function History() {
  const { partition } = useParams();
  const decoded = partition ? decodeURIComponent(partition) : null;
  const filterCode = decoded?.split('.')[0] || null;

  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [date, setDate] = useState(null);
  const [showDetails, setShowDetails] = useState(false);

  useEffect(() => {
    fetchHistory(partition).then(json => {
      setData(json);
      setLoading(false);
    });
  }, [partition]);

  const summary = useMemo(() => {
    if (!data || !date) return null;
    const ds = format(date, 'yyyy-MM-dd');
    return data.summaryByDate.find(r => r.date === ds) || null;
  }, [data, date]);

  // const rows = useMemo(() => {
  //   if (!summary) return [];
  //   return Object.entries(summary.partitions)
  //     .filter(([k]) => !filterCode || k.startsWith(filterCode + '.'))
  //     .map(([k, v]) => {
  //       const [code, site] = k.split('.');
  //       return {
  //         country: codeToCountry[code] || code,
  //         site,
  //         employee: v.Employee ?? v.EmployeeCount ?? 0,
  //         contractor: v.Contractor ?? v.ContractorCount ?? 0,
  //         total: v.total ?? 0
  //       };
  //     });
  // }, [summary, filterCode]);

const rows = useMemo(() => {
  if (!summary || !summary.partitions) return [];
  return Object.entries(summary.partitions)
    .filter(([k]) => !filterCode || k.startsWith(filterCode + '.'))
    .map(([k, v]) => {
      const [code, site] = k.split('.');
      return {
        country: codeToCountry[code] || code,
        site,
        employee: v.Employee ?? v.EmployeeCount ?? 0,
        contractor: v.Contractor ?? v.ContractorCount ?? 0,
        total: v.total ?? 0
      };
    });
}, [summary, filterCode]);

  const details = useMemo(() => {
    if (!data || !date || !showDetails) return [];
    const ds = format(date, 'yyyy-MM-dd');
    return data.details.filter(r => r.SwipeDate.startsWith(ds))
      .filter(r => !filterCode || r.PartitionName2.startsWith(filterCode + '.'));
  }, [data, date, filterCode, showDetails]);

  const exportExcel = () => {
    const ws = XLSX.utils.json_to_sheet(details.map((r, i) => ({
      Sr: i + 1, Date: r.SwipeDate.slice(0, 10),
      Time: r.LocaleMessageTime.slice(11, 19),
      EmployeeID: r.EmployeeID, Name: r.ObjectName1,
      Type: r.PersonnelType, Door: r.Door,
      Partition: r.PartitionName2
    })));
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Details');
    saveAs(new Blob([XLSX.write(wb, { bookType: 'xlsx', type: 'array' })]),
      `history_${format(date, 'yyyyMMdd')}.xlsx`);
  };

  if (loading) return <LoadingSpinner />;

  return (
    <>
      <Header />

    

      <Container maxWidth={false} disableGutters sx={{ pt: 2, pb: 4 }}>
        {/* Flex row: DatePicker + Summary Table */}
        <Box display="flex" alignItems="flex-start" sx={{ px: '20px', mb: 1, gap: '10px' }}>

          {/* Left: Date Picker */}
          <Box sx={{ flex: '0 0 200px' }}>
            <LocalizationProvider dateAdapter={AdapterDateFns}>
              <DatePicker
                label="Select date"
                value={date}
                onChange={d => { setDate(d); setShowDetails(false); }}
                renderInput={params => <TextField fullWidth {...params} />}
              />
            </LocalizationProvider>
          </Box>

          {/* Right: Summary table */}
          {date && summary && (
            <Box sx={{ flex: 1, maxWidth: 800, display: 'flex', flexDirection: 'column', gap: 2 }}>
              <Paper elevation={3} sx={{ px: 2, py: 1, border: '3px solid #000', borderRadius: 2 }}>
                <Table size='small' sx={{ border: '2px solid #000' }}>
                  <TableHead>
                    <TableRow>
                      <TableCell colSpan={5} align="center"
                        sx={{ fontWeight: 'bold', fontSize: 16, bgcolor: '#000', color: '#fff', border: '2px solid #000' }}>
                        {format(date, 'EEEE, d MMMM, yyyy')}
                      </TableCell>
                    </TableRow>
                    <TableRow sx={{ bgcolor: '#FFC107' }}>
                      {['Country', 'Site', 'Employees', 'Contractors', 'Total'].map(h => (
                        <TableCell key={h} align={['Country', 'Site'].includes(h) ? 'left' : 'right'}
                          sx={{ color: '#000', fontWeight: 'bold', fontSize: 14, border: '2px solid #000' }}>
                          {h}
                        </TableCell>
                      ))}
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {rows.map((r, i) => (
                      <TableRow key={i}>
                        <TableCell sx={{ border: '2px solid #000' }}>{r.country}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{r.site}</TableCell>
                        <TableCell align="right" sx={{ border: '2px solid #000' }}>{r.employee}</TableCell>
                        <TableCell align="right" sx={{ border: '2px solid #000' }}>{r.contractor}</TableCell>
                        <TableCell align="right" sx={{ backgroundColor: '#FFC107', fontWeight: 'bold', border: '2px solid #000' }}>{r.total}</TableCell>
                      </TableRow>
                    ))}
                    <TableRow sx={{ bgcolor: '#666' }}>
                      <TableCell colSpan={2} align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                        Total
                      </TableCell>
                      <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                        {rows.reduce((s, r) => s + r.employee, 0)}
                      </TableCell>
                      <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                        {rows.reduce((s, r) => s + r.contractor, 0)}
                      </TableCell>
                      <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', bgcolor: '#333', border: '2px solid #000' }}>
                        {rows.reduce((s, r) => s + r.total, 0)}
                      </TableCell>
                    </TableRow>
                  </TableBody>
                </Table>
              </Paper>

              {/* Buttons */}
              <Box display="flex" justifyContent="center" sx={{ mt: 1 }}>
                <Button
                  variant="contained"
                  sx={{ bgcolor: '#FFC107', color: '#000' }}
                  onClick={() => setShowDetails(v => !v)}
                >
                  {showDetails ? 'Hide Details' : 'See Details'}
                </Button>
                {showDetails && (
                  <Button
                    variant="outlined"
                    sx={{ ml: 2, borderColor: '#FFC107', color: '#FFC107' }}
                    onClick={exportExcel}
                  >
                    Export to Excel
                  </Button>
                )}
              </Box>
            </Box>
          )}
        </Box>

        {/* Details Table: Still below, only if toggled */}
        {showDetails && (
          <Box display="flex" justifyContent="center" mb={2} sx={{ width: '100%' }}>
            <Paper elevation={1} sx={{ px: '40px', py: 1, width: '100%', border: '3px solid #000', borderRadius: 2 }}>
              {details.length > 0 ? (
                <Table sx={{ border: '2px solid #000', borderCollapse: 'collapse' }}>
                  <TableHead>
                    <TableRow sx={{ bgcolor: '#000' }}>
                      {['Sr', 'Date', 'Time', 'Employee ID', 'Name', 'Personnel Type', 'Door', 'Partition'].map(h => (
                        <TableCell key={h} align="center"
                          sx={{ color: '#FFC107', fontWeight: 'bold', fontSize: 14, border: '2px solid #000' }}>
                          {h}
                        </TableCell>
                      ))}
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {details.map((r, i) => (
                      <TableRow key={`${r.PersonGUID}-${i}`}>
                        <TableCell sx={{ border: '2px solid #000' }}>{i + 1}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{r.SwipeDate.slice(0, 10)}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{r.LocaleMessageTime.slice(11, 19)}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{r.EmployeeID}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{r.ObjectName1}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{r.PersonnelType}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{r.Door}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{r.PartitionName2}</TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              ) : (
                <Typography variant="body2" sx={{ color: '#666', textAlign: 'center', mt: 2, fontStyle: 'italic' }}>
                  No swipe records found for this date.
                </Typography>
              )}
            </Paper>
          </Box>
        )}
      </Container>
      
      <Footer />
    </>
  );
}





























import React, { useEffect, useState, useMemo } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import {
  Container, Box, Typography, Button, TextField,
  TableContainer, Paper, Table, TableHead, TableRow, TableCell, TableBody
} from '@mui/material';

import Header from '../components/Header';
import Footer from '../components/Footer';
import LoadingSpinner from '../components/LoadingSpinner';
import DataTable from '../components/DataTable';
import { fetchLiveSummary } from '../api/occupancy.service';
import { lookupFloor } from '../utils/floorLookup';

export default function PartitionDetailDetails() {
  const { partition } = useParams();
  const navigate = useNavigate();

  const [details, setDetails] = useState([]);
  const [loading, setLoading] = useState(true);
  const [lastUpdate, setLastUpdate] = useState('');
  const [search, setSearch] = useState('');
  const [expanded, setExpanded] = useState(null);

  // Load & refresh
  useEffect(() => {
    let active = true;
    const load = async () => {
      const json = await fetchLiveSummary();
      if (!active) return;
      const det = json.details
        .filter(r => r.PartitionName2 === partition && r.Direction === 'InDirection')
        .map(r => ({
          ...r,
          floor: lookupFloor(r.PartitionName2, r.Door, r.Direction)
        }));
      setDetails(det);
      setLastUpdate(new Date().toLocaleTimeString());
      setLoading(false);
    };
    load();
    const iv = setInterval(load, 1000);
    return () => { active = false; clearInterval(iv); };
  }, [partition]);

  const floorMap = useMemo(() => {
    return details.reduce((m, r) => {
      m[r.floor] = m[r.floor] || [];
      m[r.floor].push(r);
      return m;
    }, {});
  }, [details]);

 

  const displayed = useMemo(() => {
  const term = search.toLowerCase();
  return Object.entries(floorMap)
    .map(([floor, emps]) => {
      const filteredEmps = emps.filter(e =>
        floor.toLowerCase().includes(term) ||
        e.ObjectName1?.toLowerCase().includes(term) ||
        e.EmployeeID?.toString().toLowerCase().includes(term)
      );
      return [floor, filteredEmps];
    })
    .filter(([, filteredEmps]) => filteredEmps.length > 0);
}, [floorMap, search]);

  if (loading) {
    return <>
      <Header />
      <Box p={4}><LoadingSpinner /></Box>
      <Footer />
    </>;
  }

  return (
    <>
      <Header />
      <Container maxWidth={false} disableGutters sx={{ px: 2, py: 2 }}>

        <Box mb={1}><Button size="small" onClick={() => navigate(-1)}>← Back to Overview</Button></Box>

        <Box display="flex" alignItems="center" flexWrap="wrap" gap={0.5} mb={2}>
          {/* Title */}
          <Typography variant="h6">Floor Details</Typography>

          {/* Last updated text */}
          <Typography variant="body2" color="textSecondary" sx={{ ml: 1 }}>
            Last updated: {lastUpdate}
          </Typography>

          {/* Search field */}
          <TextField
            size="small"
            placeholder="Search floor / emp…"
            value={search}
            onChange={e => setSearch(e.target.value)}
            sx={{ ml: 1 }}
          />
        </Box>

        <Box display="flex" flexWrap="wrap">
  {[...displayed]
    .sort((a, b) => b[1].length - a[1].length) // Priority: most rows first
    .map(([floor, emps]) => {
      const isExpanded = expanded === floor;
      const visibleEmps = isExpanded ? emps : emps.slice(0, 10);

      return (
        <Box
          key={floor}
          sx={{
            width: { xs: '100%', sm: '50%' },
            p: 1,
            boxSizing: 'border-box',
          }}
        >
          <Typography
            variant="subtitle1"
            gutterBottom
            sx={{ fontWeight: 'bold' }}
          >
            {floor} (Total {emps.length})
          </Typography>

          {/* Smart height layout */}
          <Box
            sx={{
              border: '2px solid #FFC107',
              borderRadius: 1,
              p: 1,
              display: 'flex',
              flexDirection: 'column',
              minHeight: 120,
              maxHeight: isExpanded ? 600 : 'auto',
            }}
          >
            <TableContainer
              component={Paper}
              variant="outlined"
              sx={{
                overflowY: 'auto',
                flexGrow: 1,
              }}
            >
              <Table size="small" stickyHeader>
                <TableHead>
                  <TableRow>
                    {['ID', 'Name', 'Time', 'Type', 'Card', 'Door'].map((h, idx, arr) => (
                      <TableCell
                        key={h}
                        sx={{
                          fontWeight: 'bold',
                          py: 0.5,
                          whiteSpace: 'nowrap',
                          borderRight: idx !== arr.length - 1 ? '1px solid #ccc' : 'none',
                          borderBottom: '1px solid #ccc',
                        }}
                      >
                        {h}
                      </TableCell>
                    ))}
                  </TableRow>
                </TableHead>

                <TableBody>
                  {visibleEmps.map((r, i) => (
                    <TableRow key={i}>
                      {[
                        r.EmployeeID,
                        r.ObjectName1,
                        new Date(r.LocaleMessageTime).toLocaleTimeString(),
                        r.PersonnelType,
                        r.CardNumber,
                        r.Door,
                      ].map((val, idx, arr) => (
                        <TableCell
                          key={idx}
                          sx={{
                            py: 0.5,
                            minWidth: [50, 120, 100, 80, 100, 100][idx],
                            whiteSpace: 'nowrap',
                            borderRight: idx !== arr.length - 1 ? '1px solid #eee' : 'none',
                          }}
                        >
                          {val}
                        </TableCell>
                      ))}
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>

            {emps.length > 10 && (
              <Box textAlign="right" mt={1}>
                <Button
                  size="small"
                  onClick={() => setExpanded(isExpanded ? null : floor)}
                >
                  {isExpanded ? 'Hide' : 'See more…'}
                </Button>
              </Box>
            )}
          </Box>
        </Box>
      );
    })}
</Box>

        {expanded && (
          <Box mt={2}>
            <Typography variant="h6" gutterBottom>{expanded} — All Entries</Typography>
            <DataTable
              columns={[
                { field: 'EmployeeID', headerName: 'ID' },
                { field: 'ObjectName1', headerName: 'Name' },
                { field: 'LocaleMessageTime', headerName: 'Time' },
                { field: 'PersonnelType', headerName: 'Type' },
                { field: 'CardNumber', headerName: 'Card' },
                { field: 'Door', headerName: 'Door' }
              ]}
              rows={floorMap[expanded].map(r => ({
                ...r,
                LocaleMessageTime: new Date(r.LocaleMessageTime).toLocaleTimeString()
              }))}
            />
          </Box>
        )}
      </Container>
      <Footer />
    </>
  );
}


































// src/components/Header.jsx (for EMEA)
import React, { useEffect, useState } from 'react';
import {
  AppBar, Toolbar, Box, Typography,
  Select, MenuItem, IconButton
} from '@mui/material';
import { useNavigate, useLocation } from 'react-router-dom';

import HomeIcon from '@mui/icons-material/Home';
import HistoryIcon from '@mui/icons-material/History';
import ListAltIcon from '@mui/icons-material/ListAlt';

import wuLogo from '../assets/wu-logo.png';
import austriaFlag from '../assets/flags/austria.png';
import uaeFlag from '../assets/flags/uae.png';
import irelandFlag from '../assets/flags/ireland.png';
import italyFlag from '../assets/flags/italy.png';
import lithuaniaFlag from '../assets/flags/lithuania.png';
import moroccoFlag from '../assets/flags/morocco.png';
import russiaFlag from '../assets/flags/russia.png';
import ukFlag from '../assets/flags/uk.png';
import spainFlag from '../assets/flags/spain.png';

import { partitionList } from '../api/occupancy.service';
import { useLiveOccupancy } from '../hooks/useLiveOccupancy';

const displayNameMap = {
  'AUT.Vienna': 'Vienna',
  'DU.Abu Dhab': 'Abu Dhabi',
  'IE.Dublin': 'Dublin',
  'IT.Rome': 'Rome',
  'LT.Vilnius': 'Vilnius',
  'MA.Casablanca': 'Casablanca',
  'RU.Moscow': 'Moscow',
  'UK.London': 'London',
  'ES.Madrid': 'Madrid',
};

const flagMap = {
  'AUT.Vienna': austriaFlag,
  'DU.Abu Dhab': uaeFlag,
  'IE.Dublin': irelandFlag,
  'IT.Rome': italyFlag,
  'LT.Vilnius': lithuaniaFlag,
  'MA.Casablanca': moroccoFlag,
  'RU.Moscow': russiaFlag,
  'UK.London': ukFlag,
  'ES.Madrid': spainFlag,
};

export default function Header() {
  const navigate = useNavigate();
  const location = useLocation();
  const { data } = useLiveOccupancy(1000);
  const [lastUpdate, setLastUpdate] = useState('');

  useEffect(() => {
    if (data) setLastUpdate(new Date().toLocaleTimeString());
  }, [data]);

  const parts = location.pathname.split('/').filter(Boolean);
  const isPartitionPath = parts[0] === 'partition' && Boolean(parts[1]);
  const currentPartition = isPartitionPath ? decodeURIComponent(parts[1]) : '';
  const suffixSegments = isPartitionPath
    ? parts.slice(2)
    : parts[0] === 'history'
      ? ['history']
      : [];

  const selectedFlag = flagMap[currentPartition];

  const makePartitionPath = (suffix) => {
    const base = `/partition/${encodeURIComponent(currentPartition)}`;
    return suffix ? `${base}/${suffix}` : base;
  };

  const handlePartitionChange = (newPartition) => {
    if (!newPartition) return navigate('/');
    const base = `/partition/${encodeURIComponent(newPartition)}`;
    const full = suffixSegments.length
      ? `${base}/${suffixSegments.join('/')}`
      : base;
    navigate(full);
  };

  return (
    <AppBar position="static" color="primary" sx={{ mb: 2 }}>
      <Toolbar sx={{ justifyContent: 'space-between' }}>
        {/* Left: Logo + Navigation */}
        <Box display="flex" alignItems="center">
          <Box component="img" src={wuLogo} alt="WU" sx={{ height: 36, mr: 2 }} />
          <Typography variant="h6" sx={{ flexGrow: 1 }}>
            EMEA Occupancy
            {currentPartition && ` • ${displayNameMap[currentPartition] || currentPartition}`}
          </Typography>

          {/* Home */}
          <IconButton color="inherit" onClick={() => navigate(currentPartition ? `/partition/${encodeURIComponent(currentPartition)}` : '/')}>
            <HomeIcon />
          </IconButton>

          {/* History */}
          <IconButton color="inherit" onClick={() => navigate(currentPartition ? makePartitionPath('history') : '/history')}>
            <HistoryIcon />
          </IconButton>

          {/* Details */}
          <IconButton
            color="inherit"
            onClick={() =>
              navigate(currentPartition
                ? makePartitionPath('details')
                : '/partition/LT.Vilnius/details'
              )
            }
          >
            <ListAltIcon />
          </IconButton>
        </Box>

        {/* Right: Dropdown Selector + Flag */}
        <Box display="flex" alignItems="center">
          <Select
            size="small"
            value={currentPartition}
            displayEmpty
            onChange={(e) => handlePartitionChange(e.target.value)}
            sx={{ bgcolor: 'background.paper', mr: 2, minWidth: 150 }}
            renderValue={(selected) =>
              selected ? (
                <Box display="flex" alignItems="center">
                  <Box component="img" src={flagMap[selected]} alt={selected} sx={{ width: 24, height: 16, mr: 1 }} />
                  {displayNameMap[selected] || selected}
                </Box>
              ) : "— Select Site —"
            }
          >
            <MenuItem value="">— Select Site —</MenuItem>
            {partitionList.map((p) => (
              <MenuItem key={p} value={p}>
                {displayNameMap[p] || p}
              </MenuItem>
            ))}
          </Select>
          {selectedFlag && <Box component="img" src={selectedFlag} alt="Flag" sx={{ height: 50 }} />}
        </Box>
      </Toolbar>
    </AppBar>
  );
}































import React, { lazy, Suspense } from 'react';
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import LoadingSpinner from '../components/LoadingSpinner';

const Dashboard               = lazy(() => import('../pages/Dashboard'));
const History                 = lazy(() => import('../pages/History'));
const PartitionDetail         = lazy(() => import('../pages/PartitionDetail'));
const PartitionDetailDetails  = lazy(() => import('../pages/PartitionDetailDetails'));

export default function AppRoutes() {
  return (
    <BrowserRouter>
      <Suspense fallback={<LoadingSpinner />}>
        <Routes>
          {/* Home dashboard */}
          <Route path="/" element={<Dashboard />} />

          {/* Global history */}
          <Route path="/history" element={<History />} />

          {/* Partition-scoped history */}
          <Route path="/partition/:partition/history" element={<History />} />

          {/* Partition overview (live) */}
          <Route path="/partition/:partition" element={<PartitionDetail />} />

          {/* Partition “see details” sub-page */}
          <Route path="/partition/:partition/details" element={<PartitionDetailDetails />}/>



        </Routes>
      </Suspense>
    </BrowserRouter>
  );
}

