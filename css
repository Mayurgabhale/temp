
  return (
    <Box
  sx={{
    position: 'relative',
    width: '100%',
    height: '100%',
    backgroundImage: 'url(https://upload.wikimedia.org/wikipedia/commons/8/80/World_map_ocean_texture.jpg)',
    backgroundSize: 'cover',
    backgroundPosition: 'center',
    border: '1px solid #d0d0d0',
    borderRadius: '12px',
    boxShadow: '0 4px 20px rgba(0, 0, 0, 0.1)',
    overflow: 'hidden',
  }}
>
      {/* Zoom Controls */}
      <Box
        sx={{
          position: 'absolute',
          top: 8,
          right: 8,
          display: 'flex',
          flexDirection: 'column',
          zIndex: 10,
        }}
      >
        <IconButton size="small" onClick={handleZoomIn}>
          <AddIcon fontSize="small" />
        </IconButton>
        <IconButton size="small" onClick={handleZoomOut}>
          <RemoveIcon fontSize="small" />
        </IconButton>
      </Box>

      <ComposableMap
        projectionConfig={{ rotate: [-10, 0, 0], scale: 150 }}
        style={{
          width: '100%',
          height: '100%',
         
          border: '1px solid #d0d0d0', // professional border
          borderRadius: '12px',
          boxShadow: '0 4px 20px rgba(0, 0, 0, 0.1)',
        }}
      >
        <ZoomableGroup center={center} zoom={zoom}>
          {/* Countries */}
          <Geographies geography={geoUrl}>
            {({ geographies }) =>
              geographies.map(geo => {
                const name = geo.properties.NAME;
                const inRegion = REGION_COUNTRIES[selected].some(
                  c => c.name.split(',').pop().trim() === name
                );
                return (
                  <Geography
                    key={geo.rsmKey}
                    geography={geo}
                    fill={
                      inRegion
                        ? getColor(selected, brands)
                        : theme.palette.grey[900]
                    }
                    stroke={theme.palette.grey[700]}
                    strokeWidth={0.5}
                    style={{ default: { outline: 'none' } }}
                  />
                );
              })
            }
          </Geographies>

          {/* Markers */}
          {markers.map((m, i) => {
            const r = 1 * zoom;
            return (
              <Marker key={i} coordinates={m.coords} onClick={() => onClickSite(selected)}>
                {/* Icon - rendered first so it stays behind */}
                <svg
                  width={8 * zoom}
                  height={8 * zoom}
                  viewBox="0 0 16 16"
                  fill={m.color}
                  xmlns="http://www.w3.org/2000/svg"
                  style={{ transform: 'translate(-8px, -16px)' }}
                >
                  <path d="M8 0a5 5 0 0 0-5 5c0 4.25 5 11 5 11s5-6.75 5-11a5 5 0 0 0-5-5zm0 7a2 2 0 1 1 0-4 2 2 0 0 1 0 4z" />
                  {m.tooltip && <title>{m.tooltip}</title>}
                </svg>

                {/* Text - rendered last so it's on top */}
                {m.showLabel && (
                  <text
                    textAnchor="middle"
                    y={-12 * zoom} // pushes text farther above
                    fill={m.color}
                    fontSize={4 * zoom}
                    fontWeight="bold"
                    style={{
                      paintOrder: 'stroke', // ensures contrast with background
                      // stroke: 'white',
                      strokeWidth: 1,
                      strokeLinejoin: 'round',
                    }}
                  >
                    {m.name}
                  </text>
                )}
              </Marker>
            );
          })}
        </ZoomableGroup>
      </ComposableMap>
    </Box>
  );
}



