





........
{
  "success": true,
  "today": {
    "total": 981,
    "Employee": 863,
    "Contractor": 118
  },
  "realtime": {
    "Pune": {
      "total": 580,
      "Employee": 516,
      "Contractor": 64,
      "floors": {
        "Podium Floor": 399,
        "Tower B": 115,
        "2nd Floor": 63
      }
    },
    "Quezon City": {
      "total": 151,
      "Employee": 132,
      "Contractor": 19,
      "floors": {
        "7th Floor": 107,
        "6th Floor": 44
      }
    },
    "Taguig City": {
      "total": 12,
      "Employee": 10,
      "Contractor": 2,
      "floors": {
        "Taguig": 12
      }
    },
    "MY.Kuala Lumpur": {
      "total": 4,
      "Employee": 3,
      "Contractor": 1,
      "floors": {
        "Kuala Lumpur": 4
      }
    },
    "JP.Tokyo": {
      "total": 7,
      "Employee": 6,
      "Contractor": 1,
      "floors": {
        "Tokyo": 7
      }
    }
  },
  "unmapped": [],
  "details": [
    {


     "details": [
    {
      "ObjectName1": "Unavane, Aditya",
      "Door": "APAC_IN_PUN_2NDFLR_RECPTION TO WORKSTATION DOOR_10:05:4B",
      "PersonnelType": "Employee",
      "EmployeeID": "328923",
      "CardNumber": "620146",
      "PartitionName2": "Pune",
      "LocaleMessageTime": "2025-07-17T12:17:56.000Z",
      "Direction": "OutDirection",
      "PersonGUID": "F4980CD9-374E-4408-BD7B-001F7D12F8AD"
    },
    {
      "ObjectName1": "Sarkaniya, Harish",
      "Door": "APAC_IN_PUN_PODIUM_RED_RECEPTION TO WS ENTRY 1-DOOR NEW",
      "PersonnelType": "Contractor",
      "EmployeeID": "W0024571",
      "CardNumber": "615794",
      "PartitionName2": "Pune",
      "LocaleMessageTime": "2025-07-17T12:09:42.000Z",
      "Direction": "InDirection",
      "PersonGUID": "51A95852-C14E-4BB4-8F31-0057A87F67C7"
    },

         {
      "ObjectName1": "Sarkaniya, Harish",
      "Door": "APAC_IN_PUN_PODIUM_RED_RECEPTION TO WS ENTRY 1-DOOR NEW",
      "PersonnelType": "Contractor",
      "EmployeeID": "W0024571",
      "CardNumber": "615794",
      "PartitionName2": "Pune",
      "LocaleMessageTime": "2025-07-17T12:09:42.000Z",
      "Direction": "InDirection",
      "PersonGUID": "51A95852-C14E-4BB4-8F31-0057A87F67C7"
    },
    {


        {
      "ObjectName1": "Consencino, Geraldine",
      "Door": "APAC_PH_Manila_7th Floor_Recption Door 1-701",
      "PersonnelType": "Property Management",
      "EmployeeID": "",
      "CardNumber": "418429",
      "PartitionName2": "Quezon City",
      "LocaleMessageTime": "2025-07-17T06:40:13.000Z",
      "Direction": "OutDirection",
      "PersonGUID": "EC54EA4C-EE1A-43FD-A59D-00F410DBB11D"
    },
    {
      "ObjectName1": "San Juan, Leilanie Pauco",
      "Door": "APAC_PH_Manila_6th Floor Enrty Door 1",
      "Pe


         {
      "ObjectName1": "Pune, VIS_PUN_166",
      "Door": "APAC_IN_PUN_PODIUM_ST4 DOOR 2 (GREEN)",
      "PersonnelType": "Visitor",
      "EmployeeID": "",
      "CardNumber": "418978",
      "PartitionName2": "Pune",
      "LocaleMessageTime": "2025-07-17T12:00:50.000Z",
      "Direction": "InDirection",
      "PersonGUID": "610D1168-9D46-4154-88F6-0DB884FE4961"
    },
    {


        },
    {
      "ObjectName1": "India, TEMP_PUN_001",
      "Door": "APAC_IN_PUN-PODIUM_P-1 TURNSTILE 3 -OUT DOOR",
      "PersonnelType": "Temp Badge",
      "EmployeeID": "",
      "CardNumber": "411101",
      "PartitionName2": "Pune",
      "LocaleMessageTime": "2025-07-17T07:02:45.000Z",
      "Direction": "OutDirection",
      "PersonGUID": "1E3639F4-4F63-459E-95CB-4F08CCB4742E"
    },
    {

// src/components/CompositeChartCard.jsx

import React from 'react';
import { Card, CardContent, Typography, Box } from '@mui/material';
import {
  ComposedChart,
  Bar,
  Line,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  CartesianGrid,
  Legend,
  LabelList,
  Cell
} from 'recharts';

import buildingCapacities from '../data/buildingCapacities';
import floorCapacities from '../data/floorCapacities';



const DARK_TO_LIGHT = [
  '#FFD666', '#FFE599', '#FFF2CC', '#FFE599', '#E0E1DD',
  '#FFD666', '#FFEE8C', '#F8DE7E', ' #FBEC5D', '#F0E68C',
  ' #FFEE8C', '#21325E', '#415A77', '#6A7F9A', '#B0C4DE',
  '#1A1F36', '#2B3353', '#4C6482', '#7B90B2', '#CAD3E9'
];


function normalizeRealtimeFloors(floorsData, partitionName) {
  return Object.entries(floorsData).map(([floorName, headcount]) => {
    const floorCap = floorCapacities?.[partitionName]?.[floorName] ?? 0;

    return {
      name: floorName,
      headcount,
      capacity: floorCap,
      employee: 0,         // Default unless you can split types per floor
      contractors: 0,
      propertyMgmt: 0,
      visitor: 0,
      tempBadge: 0,
      live: 0,
      total: headcount
    };
  });
}



export default function CompositeChartCard({
  title,
  data,
  lineColor = '#fff',
  height = 350,
  animationDuration = 1500,
  animationEasing = 'ease-in-out'
}) {
  if (!Array.isArray(data) || data.length === 0) {
    return (
      <Card sx={{ border: `1px solid #fff`, bgcolor: 'rgba(0,0,0,0.4)' }}>
        <CardContent>
          <Typography variant="subtitle1" align="center" color="text.secondary">
            {title}
          </Typography>
          <Typography variant="body2" align="center" sx={{ mt: 4 }}>
            No realtime employee data
          </Typography>
        </CardContent>
      </Card>
    );
  }
  // Enrich each datum with its usage percentage
  // const enriched = data.map((d, i) => ({
  //   ...d,
  //   percentage: d.capacity ? Math.round(d.headcount / d.capacity * 100) : 0,
  //   _color: DARK_TO_LIGHT[i % DARK_TO_LIGHT.length]
  // }));

const enriched = data.map((d, i) => ({
  ...d,
  percentage: d.capacity ? Math.round(d.headcount / d.capacity * 100) : 0,
  _color: DARK_TO_LIGHT[i % DARK_TO_LIGHT.length],

  // Ensure these fields are defined for the tooltip
  live: d.live ?? 0,
  employee: d.employee ?? 0,
  contractors: d.contractors ?? 0,
  propertyMgmt: d.propertyMgmt ?? 0,
  visitor: d.visitor ?? 0,
  tempBadge: d.tempBadge ?? 0,
  total: d.total ?? 0
}));

  const totalHeadcount = enriched.reduce((sum, d) => sum + (d.headcount || 0), 0);
  const totalCapacity = enriched.reduce((sum, d) => sum + (d.capacity || 0), 0);
  const avgUsage = totalCapacity ? Math.round((totalHeadcount / totalCapacity) * 100) : 0;


  return (
    <Card
      sx={{
        // border: `1px solid ${lineColor}`,
        borderRadius: 2,
        overflow: 'hidden',
        bgcolor: 'rgba(0,0,0,0.4)',
        transition: 'transform 0.3s, box-shadow 0.3s',
        '&:hover': {
          transform: 'scale(1.02)',
          boxShadow: '0 4px 12px rgba(0,0,0,0.7)'
        }
      }}
    >
      <CardContent sx={{ p: 1 }}>
        <Typography
          variant="subtitle1"
          align="center"
          gutterBottom
          sx={{ color: '#FFC107' }}
        >
          {title}
        </Typography>

        <Box sx={{ width: '100%', height }}>
          <ResponsiveContainer>
            <ComposedChart
              data={enriched}
              margin={{ top: 15, right: 20, left: 0, bottom: 20 }}
            >
              <CartesianGrid strokeDasharray="3 3" stroke="rgba(255,255,255,0.1)" />


              <XAxis
                dataKey="name"
                tickLine={false}
                axisLine={false}
                stroke="rgba(255,255,255,0.6)"
                tickFormatter={(label, index) => {
                  const strLabel = String(label);
                  const match = strLabel.match(/\d+/); // Extract number from label like "Floor 3"
                  const floorNum = parseInt(match?.[0], 10);

                  if (isNaN(floorNum)) return strLabel; // fallback to raw label if no number found

                  const suffix = (n) => {
                    if (n % 100 >= 11 && n % 100 <= 13) return `${n}th`;
                    switch (n % 10) {
                      case 1: return `${n}st`;
                      case 2: return `${n}nd`;
                      case 3: return `${n}rd`;
                      default: return `${n}th`;
                    }
                  };

                  return suffix(floorNum);
                }}
              />


              <YAxis
                yAxisId="left"
                tickLine={false}
                axisLine={false}
                stroke="rgba(255,255,255,0.6)"
              />

              <YAxis
                yAxisId="right"
                orientation="right"
                tickLine={false}
                axisLine={false}
                stroke="rgba(255,255,255,0.6)"
                domain={[0, 100]}
                tickFormatter={val => `${val}%`}
              />

              {/* <Tooltip
                contentStyle={{ backgroundColor: '#FFD666', borderColor: lineColor }}
                formatter={(value, name) =>
                  name === 'percentage' ? `${value}%` : value
                }
              /> */}

              {/* <Tooltip
                contentStyle={{ backgroundColor: '#FFD666', borderColor: lineColor, padding: 8 }}
                // custom content so we can show capacity only on hover
                content={({ active, payload, label }) => {
                  if (!active || !payload || !payload.length) return null;
                  const datum = payload[0].payload;
                  return (
                    <div style={{
                      backgroundColor: '#FFD666',
                      border: `1px solid ${lineColor}`,
                      borderRadius: 4,
                      padding: 8,
                    }}>
                      <div style={{ fontWeight: 700, marginBottom: 4 }}>{label}</div>
                      <div>Headcount: {datum.headcount}</div>
                      <div>Usage %: {datum.percentage}%</div>
                      <div>Seat Capacity: {datum.capacity}</div>
                    </div>
                  );
                }}
              /> */}


             <Tooltip
  content={({ active, payload, label }) => {
    if (!active || !payload || !payload.length) return null;
    const datum = payload[0].payload;
    return (
      <div style={{ backgroundColor: '#000', color: '#fff', padding: 8 }}>
        <div><strong>{label}</strong></div>
        <div>Live: {datum.live}</div>
        <div>Employee: {datum.employee}</div>
        <div>Contractors: {datum.contractors}</div>
        <div>Property Mgmt: {datum.propertyMgmt}</div>
        <div>Visitor: {datum.visitor}</div>
        <div>Temp Badge: {datum.tempBadge}</div>
        <div>Total: {datum.total}</div>
      </div>
    );
  }}
/>


              {/* Headcount bars with per-bar colors & percentage labels */}
              <Bar
                yAxisId="left"
                dataKey="headcount"
                name="Headcount"
                barSize={700}
                isAnimationActive={false}
                animationDuration={0}
              // animationEasing={animationEasing}
              >
                {enriched.map((entry, idx) => (
                  <Cell key={`cell-${idx}`} fill={entry._color} />
                ))}


                {/* Show % on top of each bar */}
                <LabelList
                  dataKey="headcount"
                  position="top"
                  formatter={val => `${val}`}
                  style={{ fill: '#fff', fontSize: 15, fontWeight: 700 }}
                />

                {/* Percentage centered inside each bar */}
                <LabelList
                  dataKey="percentage"
                  position="inside"
                  formatter={val => `${val}%`}
                  style={{ fill: '#EE4B2B', fontSize: 14, fontWeight: 700 }}
                />
              </Bar>


              {/* Seat Capacity line */}
              <Line
                yAxisId="right"
                type="monotone"
                dataKey="percentage"
                name="Usage %"
                stroke='#FF0000'
                strokeWidth={2}
                dot={false}
                isAnimationActive
                animationDuration={animationDuration}
                animationEasing={animationEasing}
              />

              {/* Optional: draw capacity as second line */}
              <Line
                yAxisId="left"
                type="monotone"

                //  dataKey="capacity"
                name="Total Seats"
                stroke="#81C784"
                strokeDasharray="5 5"
                dot={false}
                isAnimationActive
                animationDuration={animationDuration}
                animationEasing={animationEasing}
              />
            </ComposedChart>
          </ResponsiveContainer>
        </Box>
        <Box
          sx={{
            display: 'flex',
            justifyContent: 'center',
            gap: 4,
            alignItems: 'center',
            mb: 1,
            fontWeight: 'bold',
            fontSize: 16
          }}
        >
          <Box sx={{ color: '#FFD700' /* Yellow */ }}>
            Total Headcount: {totalHeadcount}
          </Box>
          <Box sx={{ color: '#4CAF50' /* Green */ }}>
            Total Seats: {totalCapacity}
          </Box>
          <Box sx={{ color: '#FF4C4C' /* Red */ }}>
            Usage: {avgUsage}%
          </Box>
        </Box>
      </CardContent>
    </Card>
  );
}



// ///////
