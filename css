import React from 'react';
import {
  ComposableMap,
  Geographies,
  Geography,
  Marker,
} from 'react-simple-maps';
import { useTheme } from '@mui/material/styles';
import LocationOnIcon from '@mui/icons-material/LocationOn';

// GeoJSON (must live in public/world-110m.json)
const geoUrl = '/world-110m.json';

// Exact [lon, lat] for each region
const SITES = {
  apac:  [77.6,   12.97],
  emea:  [25.28,  54.69],
  laca:  [-99.13, 19.43],
  namer: [-104.99, 39.74],
};

// Fix ordering so colors stay consistent
const regionOrder = ['apac', 'emea', 'laca', 'namer'];
function getColor(region, palette) {
  const idx = regionOrder.indexOf(region);
  return palette[idx % palette.length];
}

export default function MapChart({ counts = {}, selected, onClickSite }) {
  const theme = useTheme();
  const brands = theme.palette.brand.colors;

  return (
    <ComposableMap
      projectionConfig={{ scale: 160 }}
      style={{
        width:  '100%',
        height: '100%',
        backgroundColor: theme.palette.background.paper,
        border: `1px solid ${theme.palette.secondary.main}`,
        borderRadius: theme.shape.borderRadius,
      }}
    >
      {/* Draw all countries */}
      <Geographies geography={geoUrl}>
        {({ geographies }) =>
          geographies.map((geo) => (
            <Geography
              key={geo.rsmKey}
              geography={geo}
              fill="#444"
              stroke="#222"
              strokeWidth={0.5}
            />
          ))
        }
      </Geographies>

      {/* One pin + label per region */}
      {Object.entries(SITES).map(([region, coords]) => {
        const count = counts[region] ?? 'â€“';
        const color = getColor(region, brands);
        const isSel = region === selected;

        return (
          <Marker
            key={region}
            coordinates={coords}
            onClick={() => onClickSite(region)}
            style={{ cursor: 'pointer' }}
          >
            {/* Pin */}
            <LocationOnIcon
              htmlColor={color}
              sx={{
                fontSize: isSel ? 18 : 12,    // selected:24px, otherwise:16px
                transform: 'translate(-50%, -100%)',
                stroke: theme.palette.background.paper,
                strokeWidth: 0.5,
              }}
            />

            {/* Label: REGION COUNT */}
            <text
              x={0}
              y={-10}
              textAnchor="middle"
              fill={color}
              fontSize="12"
              fontWeight="bold"
            >
              {region.toUpperCase()} {count}
            </text>
          </Marker>
        );
      })}
    </ComposableMap>
  );
}

