*** code 1 
please slove the problem carefully and quickly
History page not show any table or date 


C:\Users\W0024618\Desktop\apac-occupancy-frontend\src\api\occupancy.service.js
// src/api/occupancy.service.js
const BASE = process.env.REACT_APP_API_BASE || 'http://localhost:3007';

// In-memory cache
const cache = {
  liveSummary: null,
  history: new Map(),  // key: partition code or 'global'
};

/**
 * Fetch live summary, caching for session.
 */

 
export async function fetchLiveSummary() {
  // always fetch fresh data (no in-memory caching)
  const res = await fetch(`${BASE}/api/occupancy/live-summary`);
  if (!res.ok) throw new Error(`Live summary fetch failed: ${res.status}`);
  return res.json();
}
 

/**
 * Fetch history (global or per-partition), caching for session.
 * @param {string} [location] — partition identifier, e.g. 'Pune'
 */
export async function fetchHistory(location) {
  const key = location || 'global';
  if (cache.history.has(key)) {
    return cache.history.get(key);
  }
  const url = location
    ? `${BASE}/api/occupancy/history/${encodeURIComponent(location)}`
    : `${BASE}/api/occupancy/history`;

  const res = await fetch(url);
  if (!res.ok) throw new Error(`History fetch failed: ${res.status}`);
  const json = await res.json();
  cache.history.set(key, json);
  return json;
}

/**
 * Clear all cached data (if you need to force a fresh fetch).
 */
export function clearCache() {
  cache.liveSummary = null;
  cache.history.clear();
}

// --- list of APAC partitions for Dashboard
export const apacPartitionList = [
  'IN.Pune',
  'MY.Kuala Lumpur',
  'PH.Quezon',
  'PH.Taguig',
  'JP.Tokyo'
];;

  C:\Users\W0024618\Desktop\apac-occupancy-frontend\src\components\DataTable.jsx

  import React from 'react';
import {
  Table, TableHead, TableBody, TableRow, TableCell, Paper, TableContainer
} from '@mui/material';

export default function DataTable({ columns, rows }) {
  return (
    <TableContainer 
      component={Paper} 
      sx={{ 
        mt: 2, 
        width: '100%',
        background: 'rgba(0,0,0,0.4)',
        border: '2px solid #FFC107'
      }}
    >
      <Table size="small">
        <TableHead>
          <TableRow>
            {columns.map(c => (
              <TableCell 
                key={c.field} 
                sx={{ 
                  fontWeight: 'bold',
                  color: '#FFC107',
                  border: '1px solid #FFC107'
                }}
              >
                {c.headerName}
              </TableCell>
            ))}
          </TableRow>
        </TableHead>
        <TableBody>
          {rows.map((row, i) => (
            <TableRow key={i}>
              {columns.map(c => (
                <TableCell 
                  key={c.field}
                  sx={{ 
                    color: '#fff',
                    border: '1px solid #FFC107'
                  }}
                >
                  {row[c.field]}
                </TableCell>
              ))}
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </TableContainer>
  );
}

C:\Users\W0024618\Desktop\apac-occupancy-frontend\src\components\Header.jsx

           // src/components/Header.jsx
import React, { useEffect, useState } from 'react';
import {
  AppBar, Toolbar, Box, Typography,
  Select, MenuItem, IconButton
} from '@mui/material';
import { useNavigate, useLocation } from 'react-router-dom';
import HomeIcon from '@mui/icons-material/Home';
import HistoryIcon from '@mui/icons-material/History';
import ListAltIcon from '@mui/icons-material/ListAlt';

// import wuLogo from '../assets/images/wu-logo.png';
import wuLogo from '../assets/wu-logo.png'


import indiaFlag from '../assets/flags/india.png';
import japanFlag from '../assets/flags/japan.png';
import malaysiaFlag from '../assets/flags/malaysia.png';
import philippinesFlag from '../assets/flags/philippines.png';
import taguigFlag from '../assets/flags/Taguig.png';


import { apacPartitionList as partitionList } from '../api/occupancy.service';
import { useLiveOccupancy } from '../hooks/useLiveOccupancy';

const displayNameMap = {
  'IN.Pune':'Pune',
  'PH.Quezon':'Quezon',
  'JP.Tokyo':'Tokyo',
  'MY.Kuala Lumpur':'Kuala Lumpur',
  'PH.Taguig':'Taguig'
};


export default function Header() {
  const navigate = useNavigate();
  const loc = useLocation();
  const { data } = useLiveOccupancy(1000);
  const [lastUpdate, setLastUpdate] = useState('');

  useEffect(() => {
    if (data) setLastUpdate(new Date().toLocaleTimeString());
  }, [data]);

  const parts = loc.pathname.split('/').filter(Boolean);
  const isPart = parts[0] === 'partition' && parts[1];
  const current = isPart ? decodeURIComponent(parts[1]) : '';
  const isHome = loc.pathname === '/';




  const flagMap = {
    'IN.Pune': indiaFlag,
    'PH.Quezon': philippinesFlag,
    'PH.Taguig': taguigFlag, // if using Taguig-specific flag
    'JP.Tokyo': japanFlag,
    'MY.Kuala Lumpur': malaysiaFlag
  };

  return (
    <AppBar position="static" sx={{ mb: 2, bgcolor: "#28282B" }}>
      <Toolbar sx={{ justifyContent: 'space-between' }}>
        <Box display="flex" alignItems="center">
          <Box component="img" src={wuLogo} alt="WU" sx={{ height: 36, mr: 2 }} />

          {/* Title: APAC Occupancy */}
          <Typography variant="h6" sx={{ flexGrow: 1, color:'#FFC107' }}>
           
            Western Union – APAC
            {current && ` • ${current}`}
          </Typography>

          <IconButton color="inherit" onClick={() => navigate('/')}>
            <HomeIcon />
          </IconButton>
          <IconButton color="inherit" onClick={() => navigate('/history')}>
            <HistoryIcon />
          </IconButton>

          {/* Static Pune button shown only on main dashboard */}
          {isHome && (
            <IconButton color="inherit" onClick={() => navigate('/partition/Pune/details')}>
              <ListAltIcon />
            </IconButton>
          )}

          {/* Dynamic partition button for any partition page */}
          {isPart && (
            <IconButton
              color="inherit"
              onClick={() => navigate(`/partition/${encodeURIComponent(current)}/details`)}
            >
              <ListAltIcon />
            </IconButton>
          )}
        </Box>

        <Box display="flex" alignItems="center">

          <Select
            size="small"
            value={current}
            displayEmpty
            onChange={e => {
              const partition = e.target.value;
              navigate(partition ? `/partition/${encodeURIComponent(partition)}` : '/');
            }}
            renderValue={(selected) =>
              selected ? (
                <Box display="flex" alignItems="center">
                  <Box
                    component="img"
                    src={flagMap[selected]}
                    alt={selected}
                    sx={{ width: 24, height: 16, mr: 1 }}
                  />
                  {selected}
                </Box>
              ) : "— Select Site —"
            }


            sx={{ bgcolor: 'background.paper', mr: 2, minWidth: 150 }}
          >
            <MenuItem value="">— Select Site —</MenuItem>

 {partitionList.map(p => (
   <MenuItem key={p} value={p}>
     {displayNameMap[p] || p}
   </MenuItem>
 ))}


          </Select>

        </Box>


      </Toolbar>
    </AppBar>
  );
}







C:\Users\W0024618\Desktop\apac-occupancy-frontend\src\components\PartitionOverviewChart.jsx
                            // src/components/PartitionOverviewChart.jsx
import React from 'react';
import { useNavigate } from 'react-router-dom';
import {
  ComposedChart,
  Bar,
  Line,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  Legend
} from 'recharts';

export default function PartitionOverviewChart({ data }) {
  const navigate = useNavigate();

  const handleBarClick = (entry) => {
    navigate(`/partitions/${encodeURIComponent(entry.name)}`);
  };

  return (
    <ResponsiveContainer width="100%" height={400}>
      <ComposedChart
        data={data}
        margin={{ top: 30, right: 40, left: 20, bottom: 30 }}
        onClick={(e) => {
          if (e && e.activePayload && e.activePayload[0]) {
            handleBarClick(e.activePayload[0].payload);
          }
        }}
      >
        {/* X axis */}
        <XAxis
          dataKey="name"
          tick={{ fontWeight: 600, fill: '#3D340B' }}
          axisLine={{ stroke: '#767266' }}
          tickLine={false}
          interval={0}
          angle={-0}
          textAnchor="end"
          height={60}
        />

        {/* Y axis */}
        <YAxis
          tick={{ fontWeight: 600, fill: '#3D340B' }}
          axisLine={{ stroke: '#767266' }}
          tickLine={false}
        />

        {/* Tooltip */}
        <Tooltip
          contentStyle={{
            borderColor: '#767266',
            borderRadius: 4,
            padding: '0.5rem'
          }}
        />

        {/* Legend */}
        <Legend
          verticalAlign="top"
          align="right"
          wrapperStyle={{ paddingBottom: 10 }}
          iconType="square"
          formatter={(value) => (
            <span style={{ color: '#564110', fontWeight: 600 }}>{value}</span>
          )}
        />

        {/* Bars: Capacity */}
        <Bar
          dataKey="Capacity"
          name="Total Seats"
          barSize={500}                  // ↑ increased width
          fill="#724E14"                // golden mustard
          radius={[4, 4, 0, 0]}         // rounded top corners
        />

        {/* Line: Headcount */}
        <Line
          type="monotone"
          dataKey="Headcount"
          name="Headcount"
          stroke="#3D340B"              // deep olive-brown
          strokeWidth={3}
          dot={{ r: 5, fill: '#767266', strokeWidth: 0 }}  // olive-grey dots
        />

        {/* A small subtitle for details */}
        <text
          x={20}
          y={20}
          fill="#564110"
          style={{ fontSize: '0.9rem', fontWeight: 500 }}
        >
          {/* Click a bar for partition details */}
        </text>
      </ComposedChart>
    </ResponsiveContainer>
  );
}
C:\Users\W0024618\Desktop\apac-occupancy-frontend\src\data\buildingCapacities.js
const buildingCapacities = {
  "Podium Floor": 725,
  "Tower B": 303,
  "2nd Floor": 185,
  "Kuala Lumpur": 100,
  "Quezon City": 100,
  "Taguig": 100,
  "Tokyo": 100
};

export default buildingCapacities;
  C:\Users\W0024618\Desktop\apac-occupancy-frontend\src\data\floorCapacities.js
  const floorCapacities = {
  "Podium Floor (Pune)": 725,
  "Tower B (Pune)": 303,
  "2nd Floor (Pune)": 185,
  
};

export default floorCapacities;


***    C:\Users\W0024618\Desktop\apac-occupancy-frontend\src\pages\History.jsx  **** this page is not show any data

    // // src/pages/History.jsx
// import React, { useEffect, useState, useMemo } from 'react';
// import { useParams } from 'react-router-dom';
// import {
//   Container, Box, Typography, Paper, Table, TableHead, TableBody,
//   TableRow, TableCell, Button, TextField
// } from '@mui/material';
// import { DatePicker, LocalizationProvider } from '@mui/x-date-pickers';
// import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
// import { format } from 'date-fns';
// import * as XLSX from 'xlsx';
// import { saveAs } from 'file-saver';

// import Header from '../components/Header';
// import Footer from '../components/Footer';
// import LoadingSpinner from '../components/LoadingSpinner';
// import { fetchHistory } from '../api/occupancy.service';

// const codeToCountry = {
//   IN: 'India', MY: 'Malaysia', PH: 'Philippines', JP: 'Japan'
// };

// export default function History() {
//   const { partition } = useParams();
//   const decoded = partition ? decodeURIComponent(partition) : null;
//   const filterCode = decoded?.split('.')[0] || null;

//   const [data, setData] = useState(null);
//   const [loading, setLoading] = useState(true);
//   const [date, setDate] = useState(null);
//   const [showDetails, setShowDetails] = useState(false);

//   useEffect(() => {
//     fetchHistory(partition).then(json => {
//       setData(json);
//       setLoading(false);
//     });
//   }, [partition]);

//   const summary = useMemo(() => {
//     if (!data || !date) return null;
//     const ds = format(date, 'yyyy-MM-dd');
//     return data.summaryByDate.find(r => r.date === ds) || null;
//   }, [data, date]);

//   const rows = useMemo(() => {
//     if (!summary) return [];
//     return Object.entries(summary.partitions)
//       .filter(([k]) => !filterCode || k.startsWith(filterCode + '.'))
//       .map(([k, v]) => {
//         const [code, site] = k.split('.');
//         return {
//           country: codeToCountry[code] || code,
//           site,
//           employee: v.Employee ?? v.EmployeeCount ?? 0,
//           contractor: v.Contractor ?? v.ContractorCount ?? 0,
//           total: v.total ?? 0
//         };
//       });
//   }, [summary, filterCode]);

//   const details = useMemo(() => {
//     if (!data || !date || !showDetails) return [];
//     const ds = format(date, 'yyyy-MM-dd');
//     return data.details.filter(r => r.SwipeDate.startsWith(ds))
//       .filter(r => !filterCode || r.PartitionName2.startsWith(filterCode + '.'));
//   }, [data, date, filterCode, showDetails]);

//   const exportExcel = () => {
//     const ws = XLSX.utils.json_to_sheet(details.map((r, i) => ({
//       Sr: i + 1,
//       Date: r.SwipeDate.slice(0, 10),
//       Time: r.LocaleMessageTime.slice(11, 19),
//       EmployeeID: r.EmployeeID,
//       Name: r.ObjectName1,
//       Type: r.PersonnelType,
//       Door: r.Door,
//       Partition: r.PartitionName2
//     })));
//     const wb = XLSX.utils.book_new();
//     XLSX.utils.book_append_sheet(wb, ws, 'Details');
//     saveAs(new Blob([XLSX.write(wb, { bookType: 'xlsx', type: 'array' })]), `history_${format(date, 'yyyyMMdd')}.xlsx`);
//   };

//   if (loading) return <LoadingSpinner />;

//   return (
//     <>
//       <Header />
//       <Container maxWidth={false} disableGutters sx={{ pt: 2, pb: 4 }}>
//         <Box display="flex" alignItems="flex-start" sx={{ px: '20px', mb: 1, gap: '10px' }}>
//           <Box sx={{ flex: '0 0 200px' }}>
//             <LocalizationProvider dateAdapter={AdapterDateFns}>
//               <DatePicker
//                 label="Select date"
//                 value={date}
//                 onChange={d => { setDate(d); setShowDetails(false); }}
//                 renderInput={params => <TextField fullWidth {...params} />}
//               />
//             </LocalizationProvider>
//           </Box>

//           {date && summary && (
//             <Box sx={{ flex: 1, maxWidth: 800, display: 'flex', flexDirection: 'column', gap: 2 }}>
//               <Paper elevation={3} sx={{ px: 2, py: 1, border: '3px solid #000', borderRadius: 2 }}>
//                 <Table size='small' sx={{ border: '2px solid #000' }}>
//                   <TableHead>
//                     <TableRow>
//                       <TableCell colSpan={5} align="center"
//                         sx={{ fontWeight: 'bold', fontSize: 16, bgcolor: '#000', color: '#fff', border: '2px solid #000' }}>
//                         {format(date, 'EEEE, d MMMM, yyyy')}
//                       </TableCell>
//                     </TableRow>
//                     <TableRow sx={{ bgcolor: '#FFC107' }}>
//                       {['Country', 'Site', 'Employees', 'Contractors', 'Total'].map(h => (
//                         <TableCell key={h} align={['Country', 'Site'].includes(h) ? 'left' : 'right'}
//                           sx={{ color: '#000', fontWeight: 'bold', fontSize: 14, border: '2px solid #000' }}>
//                           {h}
//                         </TableCell>
//                       ))}
//                     </TableRow>
//                   </TableHead>
//                   <TableBody>
//                     {rows.map((r, i) => (
//                       <TableRow key={i}>
//                         <TableCell sx={{ border: '2px solid #000' }}>{r.country}</TableCell>
//                         <TableCell sx={{ border: '2px solid #000' }}>{r.site}</TableCell>
//                         <TableCell align="right" sx={{ border: '2px solid #000' }}>{r.employee}</TableCell>
//                         <TableCell align="right" sx={{ border: '2px solid #000' }}>{r.contractor}</TableCell>
//                         <TableCell align="right" sx={{ backgroundColor: '#FFC107', fontWeight: 'bold', border: '2px solid #000' }}>{r.total}</TableCell>
//                       </TableRow>
//                     ))}
//                     <TableRow sx={{ bgcolor: '#666' }}>
//                       <TableCell colSpan={2} align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>Total</TableCell>
//                       <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
//                         {rows.reduce((s, r) => s + r.employee, 0)}
//                       </TableCell>
//                       <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
//                         {rows.reduce((s, r) => s + r.contractor, 0)}
//                       </TableCell>
//                       <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', bgcolor: '#333', border: '2px solid #000' }}>
//                         {rows.reduce((s, r) => s + r.total, 0)}
//                       </TableCell>
//                     </TableRow>
//                   </TableBody>
//                 </Table>
//               </Paper>

//               <Box display="flex" justifyContent="center" sx={{ mt: 1 }}>
//                 <Button
//                   variant="contained"
//                   sx={{ bgcolor: '#FFC107', color: '#000' }}
//                   onClick={() => setShowDetails(v => !v)}
//                 >
//                   {showDetails ? 'Hide Details' : 'See Details'}
//                 </Button>
//                 {showDetails && (
//                   <Button
//                     variant="outlined"
//                     sx={{ ml: 2, borderColor: '#FFC107', color: '#FFC107' }}
//                     onClick={exportExcel}
//                   >
//                     Export to Excel
//                   </Button>
//                 )}
//               </Box>
//             </Box>
//           )}
//         </Box>

//         {showDetails && (
//           <Box display="flex" justifyContent="center" mb={2} sx={{ width: '100%' }}>
//             <Paper elevation={1} sx={{ px: '40px', py: 1, width: '100%', border: '3px solid #000', borderRadius: 2 }}>
//               {details.length > 0 ? (
//                 <Table sx={{ border: '2px solid #000', borderCollapse: 'collapse' }}>
//                   <TableHead>
//                     <TableRow sx={{ bgcolor: '#000' }}>
//                       {['Sr', 'Date', 'Time', 'Employee ID', 'Name', 'Personnel Type', 'Door', 'Partition'].map(h => (
//                         <TableCell key={h} align="center"
//                           sx={{ color: '#FFC107', fontWeight: 'bold', fontSize: 14, border: '2px solid #000' }}>
//                           {h}
//                         </TableCell>
//                       ))}
//                     </TableRow>
//                   </TableHead>
//                   <TableBody>
//                     {details.map((r, i) => (
//                       <TableRow key={`${r.PersonGUID}-${i}`}>
//                         <TableCell sx={{ border: '2px solid #000' }}>{i + 1}</TableCell>
//                         <TableCell sx={{ border: '2px solid #000' }}>{r.SwipeDate.slice(0, 10)}</TableCell>
//                         <TableCell sx={{ border: '2px solid #000' }}>{r.LocaleMessageTime.slice(11, 19)}</TableCell>
//                         <TableCell sx={{ border: '2px solid #000' }}>{r.EmployeeID}</TableCell>
//                         <TableCell sx={{ border: '2px solid #000' }}>{r.ObjectName1}</TableCell>
//                         <TableCell sx={{ border: '2px solid #000' }}>{r.PersonnelType}</TableCell>
//                         <TableCell sx={{ border: '2px solid #000' }}>{r.Door}</TableCell>
//                         <TableCell sx={{ border: '2px solid #000' }}>{r.PartitionName2}</TableCell>
//                       </TableRow>
//                     ))}
//                   </TableBody>
//                 </Table>
//               ) : (
//                 <Typography variant="body2" sx={{ color: '#666', textAlign: 'center', mt: 2, fontStyle: 'italic' }}>
//                   No swipe records found for this date.
//                 </Typography>
//               )}
//             </Paper>
//           </Box>
//         )}
//       </Container>
//       <Footer />
//     </>
//   );
// }



// ****************


import React, { useEffect, useState, useMemo } from 'react';
import { useParams } from 'react-router-dom';
import {
  Container, Box, Button, Typography, Table, TableHead, TableBody,
  TableRow, TableCell, Paper, TextField
} from '@mui/material';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { LocalizationProvider, DatePicker } from '@mui/x-date-pickers';
import { format } from 'date-fns';
import * as XLSX from 'xlsx';
import { saveAs } from 'file-saver';

import Header from '../components/Header';
import Footer from '../components/Footer';
import LoadingSpinner from '../components/LoadingSpinner';
import { fetchHistory } from '../api/occupancy.service';

// APAC partition display names
const apacPartitionNames = {
  'IN.Pune': 'Pune',
  'MY.Kuala Lumpur': 'Kuala Lumpur',
  'PH.Quezon': 'Quezon City',
  'PH.Taguig': 'Taguig',
  'JP.Tokyo': 'Tokyo'
};

export default function History() {
  const { partition } = useParams();
  const decodedPartition = partition ? decodeURIComponent(partition) : null;
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [pickedDate, setPickedDate] = useState(null);
  const [showDetails, setShowDetails] = useState(false);

  // Summary entry for selected date
  const summaryEntry = useMemo(() => {
    if (!data || !pickedDate) return null;
    const dateStr = format(pickedDate, 'yyyy-MM-dd');
    return data.summaryByDate.find(r => r.date === dateStr) || null;
  }, [data, pickedDate]);

  // Build partition rows
  const partitionRows = useMemo(() => {
    if (!summaryEntry) return [];
    
    return Object.entries(summaryEntry.partitions)
      .filter(([key]) => !decodedPartition || key === decodedPartition)
      .map(([key, vals]) => ({
        partition: apacPartitionNames[key] || key,
        employee: vals.Employee ?? 0,
        contractor: vals.Contractor ?? 0,
        tempBadge: vals.TempBadge ?? 0,
        total: vals.total ?? 0,
      }));
  }, [summaryEntry, decodedPartition]);

  // Build detail rows
  const detailRows = useMemo(() => {
    if (!data || !pickedDate) return [];
    const dateStr = format(pickedDate, 'yyyy-MM-dd');
    
    return data.details
      .filter(r => format(new Date(r.LocaleMessageTime), 'yyyy-MM-dd') === dateStr)
      .filter(r => !decodedPartition || r.PartitionName2 === decodedPartition)
      .filter(r => r.Direction === 'InDirection')
      .reduce((unique, row) => {
        const key = `${row.PersonGUID}-${row.PersonnelType}`;
        if (!unique._seen.has(key)) {
          unique._seen.add(key);
          unique.rows.push(row);
        }
        return unique;
      }, { _seen: new Set(), rows: [] }).rows;
  }, [data, pickedDate, decodedPartition]);

  // Fetch data
  useEffect(() => {
    setLoading(true);
    fetchHistory(decodedPartition)
      .then(json => setData(json))
      .finally(() => setLoading(false));
  }, [decodedPartition]);

  // Export to Excel
  const handleExport = () => {
    const ws = XLSX.utils.json_to_sheet(
      detailRows.map((r, i) => ({
        '#': i + 1,
        Date: format(new Date(r.LocaleMessageTime), 'yyyy-MM-dd'),
        Time: format(new Date(r.LocaleMessageTime), 'HH:mm:ss'),
        'Employee ID': r.EmployeeID,
        Name: r.ObjectName1,
        'Personnel Type': r.PersonnelType,
        Door: r.Door,
        Partition: apacPartitionNames[r.PartitionName2] || r.PartitionName2
      }))
    );
    
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Details');
    const buf = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });
    saveAs(new Blob([buf]), `apac_history_${format(pickedDate, 'yyyyMMdd')}.xlsx`);
  };

  if (loading) return <LoadingSpinner />;
  if (!data) return null;

  return (
    <>
      <Header />
      <Container maxWidth={false} disableGutters sx={{ pt: 2, pb: 4 }}>
        {pickedDate && summaryEntry ? (
          <Box display="flex" flexDirection="column" sx={{ px: '20px', mb: 2, gap: '20px' }}>
            <Box sx={{ maxWidth: 400 }}>
              <LocalizationProvider dateAdapter={AdapterDateFns}>
                <DatePicker
                  label="Select date"
                  value={pickedDate}
                  onChange={d => { setPickedDate(d); setShowDetails(false); }}
                  renderInput={params => <TextField fullWidth {...params} />}
                />
              </LocalizationProvider>
            </Box>

            <Paper elevation={3} sx={{ p: 3, border: '3px solid #000', borderRadius: 2 }}>
              <Typography variant="h6" align="center" sx={{ mb: 2, fontWeight: 'bold' }}>
                {format(pickedDate, 'EEEE, d MMMM, yyyy')}
              </Typography>
              
              <Table>
                <TableHead>
                  <TableRow sx={{ bgcolor: '#FFC107' }}>
                    <TableCell sx={{ fontWeight: 'bold' }}>Location</TableCell>
                    <TableCell align="right" sx={{ fontWeight: 'bold' }}>Employees</TableCell>
                    <TableCell align="right" sx={{ fontWeight: 'bold' }}>Contractors</TableCell>
                    <TableCell align="right" sx={{ fontWeight: 'bold' }}>Total</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {partitionRows.map((row, i) => (
                    <TableRow key={i}>
                      <TableCell>{row.partition}</TableCell>
                      <TableCell align="right">{row.employee}</TableCell>
                      <TableCell align="right">{row.contractor}</TableCell>
                      <TableCell align="right" sx={{ fontWeight: 'bold' }}>{row.total}</TableCell>
                    </TableRow>
                  ))}
                  <TableRow sx={{ bgcolor: '#f5f5f5' }}>
                    <TableCell sx={{ fontWeight: 'bold' }}>Total</TableCell>
                    <TableCell align="right" sx={{ fontWeight: 'bold' }}>
                      {partitionRows.reduce((s, r) => s + r.employee, 0)}
                    </TableCell>
                    <TableCell align="right" sx={{ fontWeight: 'bold' }}>
                      {partitionRows.reduce((s, r) => s + r.contractor, 0)}
                    </TableCell>
                    <TableCell align="right" sx={{ fontWeight: 'bold', bgcolor: '#333', color: '#fff' }}>
                      {partitionRows.reduce((s, r) => s + r.total, 0)}
                    </TableCell>
                  </TableRow>
                </TableBody>
              </Table>
            </Paper>

            <Box display="flex" justifyContent="center" gap={2}>
              <Button
                variant="contained"
                sx={{ bgcolor: '#FFC107', color: '#000' }}
                onClick={() => setShowDetails(v => !v)}
              >
                {showDetails ? 'Hide Details' : 'Show Details'}
              </Button>
              {showDetails && (
                <Button
                  variant="outlined"
                  sx={{ borderColor: '#FFC107', color: '#FFC107' }}
                  onClick={handleExport}
                >
                  Export to Excel
                </Button>
              )}
            </Box>
          </Box>
        ) : (
          <Box sx={{ px: '20px', mb: 3 }}>
            <LocalizationProvider dateAdapter={AdapterDateFns}>
              <DatePicker
                label="Select date"
                value={pickedDate}
                onChange={d => setPickedDate(d)}
                renderInput={params => <TextField fullWidth {...params} />}
              />
            </LocalizationProvider>
          </Box>
        )}

        {showDetails && detailRows.length > 0 && (
          <Box sx={{ px: '20px', mt: 4 }}>
            <Paper elevation={3} sx={{ p: 3, border: '2px solid #FFC107', borderRadius: 2 }}>
              <Typography variant="h6" gutterBottom>
                Detailed Swipe Records
              </Typography>
              <Table>
                <TableHead>
                  <TableRow sx={{ bgcolor: '#000' }}>
                    <TableCell sx={{ color: '#FFC107', fontWeight: 'bold' }}>#</TableCell>
                    <TableCell sx={{ color: '#FFC107', fontWeight: 'bold' }}>Date</TableCell>
                    <TableCell sx={{ color: '#FFC107', fontWeight: 'bold' }}>Time</TableCell>
                    <TableCell sx={{ color: '#FFC107', fontWeight: 'bold' }}>Employee ID</TableCell>
                    <TableCell sx={{ color: '#FFC107', fontWeight: 'bold' }}>Name</TableCell>
                    <TableCell sx={{ color: '#FFC107', fontWeight: 'bold' }}>Personnel Type</TableCell>
                    <TableCell sx={{ color: '#FFC107', fontWeight: 'bold' }}>Door</TableCell>
                    <TableCell sx={{ color: '#FFC107', fontWeight: 'bold' }}>Location</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {detailRows.map((r, i) => (
                    <TableRow key={i}>
                      <TableCell>{i + 1}</TableCell>
                      <TableCell>{format(new Date(r.LocaleMessageTime), 'yyyy-MM-dd')}</TableCell>
                      <TableCell>{format(new Date(r.LocaleMessageTime), 'HH:mm:ss')}</TableCell>
                      <TableCell>{r.EmployeeID}</TableCell>
                      <TableCell>{r.ObjectName1}</TableCell>
                      <TableCell>{r.PersonnelType}</TableCell>
                      <TableCell>{r.Door}</TableCell>
                      <TableCell>{apacPartitionNames[r.PartitionName2] || r.PartitionName2}</TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </Paper>
          </Box>
        )}
      </Container>
      <Footer />
    </>
  );
}
                                  C:\Users\W0024618\Desktop\apac-occupancy-frontend\src\pages\PartitionDetail.jsx
  // // src/pages/PartitionDetails.jsx

// import React, { useEffect, useState } from 'react';
// import { useParams } from 'react-router-dom';
// import { Container, Typography } from '@mui/material';
// import Header from '../components/Header';
// import Footer from '../components/Footer';
// import LoadingSpinner from '../components/LoadingSpinner';
// import { fetchHistory } from '../api/occupancy.service';
// import CompositeChartCard from '../components/CompositeChartCard';

// export default function PartitionDetails() {
//   const { id } = useParams();
//   const [data, setData] = useState(null);
//   const [loading, setLoading] = useState(true);

//   useEffect(() => {
//     fetchHistory(id)
//       .then(setData)
//       .finally(() => setLoading(false));
//   }, [id]);

//   return (
//     <Container maxWidth="lg" sx={{ pb: 4 }}>
//       <Header />
//       <Typography variant="h5" sx={{ mb: 2 }}>Details for {id}</Typography>
//       {loading ? <LoadingSpinner /> : (
//         <CompositeChartCard
//           title={`Occupancy Trend — ${id}`}
//           data={data?.history || []}
//         />
//       )}
//       <Footer />
//     </Container>
//   );
// }
// *****************


import React, { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import {
  Container, Box, Typography, Button, CircularProgress, Grid
} from "@mui/material";
import SummaryCard from "../components/SummaryCard";
import ChartCard from "../components/ChartCard";
import Header from "../components/Header";
import Footer from "../components/Footer";
import LoadingSpinner from "../components/LoadingSpinner";
import { fetchLiveSummary, fetchHistory } from "../api/occupancy.service";
import buildingCapacities from "../data/buildingCapacities";

// APAC partition display names
const apacPartitionNames = {
  'IN.Pune': 'Pune',
  'MY.Kuala Lumpur': 'Kuala Lumpur',
  'PH.Quezon': 'Quezon City',
  'PH.Taguig': 'Taguig',
  'JP.Tokyo': 'Tokyo'
};

export default function PartitionDetail() {
  const { partition } = useParams();
  const navigate = useNavigate();
  const decodedPartition = decodeURIComponent(partition);
  const partitionName = apacPartitionNames[decodedPartition] || decodedPartition;

  const [liveSummary, setLiveSummary] = useState(null);
  const [history, setHistory] = useState(null);
  const [historyLoading, setHistoryLoading] = useState(true);
  const [lastUpdate, setLastUpdate] = useState("");

  // Auto-refresh live summary
  useEffect(() => {
    let timer;
    async function loadLive() {
      const json = await fetchLiveSummary();
      setLiveSummary(json);
      setLastUpdate(new Date().toLocaleTimeString());
    }
    loadLive();
    timer = setInterval(loadLive, 5000);
    return () => clearInterval(timer);
  }, [partition]);

  // Load historical summary
  useEffect(() => {
    setHistoryLoading(true);
    fetchHistory(decodedPartition).then((json) => {
      setHistory(json);
      setHistoryLoading(false);
    });
  }, [decodedPartition]);

  if (!liveSummary || !history) return <LoadingSpinner />;

  const lastDay = history.summaryByDate.at(-1);
  const partToday = lastDay?.region || {};
  const live = liveSummary.realtime[decodedPartition] || {
    total: 0,
    Employee: 0,
    Contractor: 0,
    floors: {},
  };

  // Build floor entries with capacity
  const floorEntries = Object.entries(live.floors || {}).map(([floor, cnt]) => {
    const capacity = buildingCapacities[floor] ?? 0;
    const pct = capacity ? Math.round((cnt / capacity) * 100) : 0;
    return {
      name: floor,
      Headcount: cnt,
      Capacity: capacity,
      Usage: pct,
    };
  });

  return (
    <>
      <Header />
      <Box component="main" sx={{ pt: 1, pb: 1 }}>
        <Container maxWidth={false} disableGutters>
          <Box display="flex" alignItems="center" mb={1} sx={{ px: "20px" }}>
            <Button size="small" onClick={() => navigate(-1)}>
              ← Back
            </Button>
          </Box>

          <Typography variant="h5" sx={{ px: "20px", mb: 2, fontWeight: 600, color: '#FFC107' }}>
            {partitionName} Occupancy
          </Typography>

          <Grid container spacing={2} sx={{ px: "20px", mb: 4 }}>
            {[
              {
                title: "Today's Total",
                value: historyLoading ? <CircularProgress size={20} /> : partToday.total,
                icon: <i className="fa-solid fa-users" style={{ fontSize: 25, color: '#FFB300' }} />,
                border: '#FFB300',
              },
              {
                title: "Today's Employees",
                value: historyLoading ? <CircularProgress size={20} /> : partToday.Employee,
                icon: <i className="bi bi-people" style={{ fontSize: 25, color: '#EF5350' }} />,
                border: '#8BC34A',
              },
              {
                title: "Today's Contractors",
                value: historyLoading ? <CircularProgress size={20} /> : partToday.Contractor,
                icon: <i className="fa-solid fa-circle-user" style={{ fontSize: 25, color: '#8BC34A' }} />,
                border: '#E57373',
              },
              {
                title: "Realtime Headcount",
                value: live.total,
                icon: <i className="fa-solid fa-users" style={{ fontSize: 25, color: '#FFB300' }} />,
                border: '#FFD180',
              },
              {
                title: "Realtime Employees",
                value: live.Employee,
                icon: <i className="bi bi-people" style={{ fontSize: 25, color: '#EF5350' }} />,
                border: '#AED581',
              },
              {
                title: "Realtime Contractors",
                value: live.Contractor,
                icon: <i className="fa-solid fa-circle-user" style={{ fontSize: 25, color: '#8BC34A' }} />,
                border: '#EF5350',
              },
            ].map((card, index) => (
              <Grid item xs={12} sm={6} md={4} key={index}>
                <SummaryCard
                  title={card.title}
                  total={card.value}
                  icon={card.icon}
                  sx={{
                    height: 140,
                    border: `2px solid ${card.border}`,
                  }}
                />
              </Grid>
            ))}
          </Grid>

          <Box mb={4} sx={{ px: "20px", p: 2, border: "2px solid #FFC107", borderRadius: 2 }}>
            <Box display="flex" justifyContent="space-between" alignItems="center" mb={1}>
              <Typography variant="h6">Live Floor Occupancy</Typography>
              <Typography variant="body2" color="textSecondary">
                Last updated: {lastUpdate}
              </Typography>
            </Box>
            <ChartCard
              data={floorEntries}
              dataKey="Headcount"
              secondaryDataKey="Capacity"
              chartHeight={320}
              colors={{ primary: "#28B463", secondary: "#FDDA0D" }}
              axisProps={{
                xAxis: { dataKey: "name", interval: 0 },
                yAxis: { domain: [0, 'dataMax + 20'] },
              }}
              tooltipFormatter={(value, name) => 
                name === 'Headcount' ? [`${value} people`, 'Headcount'] : [`${value} seats`, 'Capacity']
              }
            />
          </Box>

          <Box sx={{ px: "20px", display: 'flex', justifyContent: 'center', gap: 2 }}>
            <Button
              variant="contained"
              sx={{ bgcolor: '#FFC107', color: '#000' }}
              onClick={() => navigate(`/partition/${partition}/details`)}
            >
              View Floor Details
            </Button>
            <Button
              variant="outlined"
              sx={{ borderColor: '#FFC107', color: '#FFC107' }}
              onClick={() => navigate(`/partition/${partition}/history`)}
            >
              View History
            </Button>
          </Box>
        </Container>
      </Box>
      <Footer />
    </>
  );
}
gie me anser after i send you second code ok 

