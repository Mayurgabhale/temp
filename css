read the below each file line by line, all files
our isssue is in summary section we got different count and below details show different count 
for example in apac summary table show 500 count in below detail section disply 490 count.
check below file line by line and slow this issue 
//C:\Users\W0024618\Desktop\apac-occupancy-backend\src\services\occupancy.service.js
const { poolPromise, sql } = require('../config/db');
const partitionList = [
  'APAC.Default',
  'CN.Beijing',
  'JP.Tokyo',
  'PH.Manila',
  'MY.Kuala Lumpur',
  'IN.Pune'
];

function quoteList(arr) {
  return arr.map(p => `'${p.replace("'", "''")}'`).join(',');
}
exports.fetchLiveOccupancy = async () => {
  const pool = await poolPromise;
  const parts = quoteList(partitionList);

  const query = `
    WITH CombinedEmployeeData AS (
      SELECT
        t1.ObjectName1,
        t1.ObjectName2             AS Door,               -- include Door
        CASE WHEN t2.Int1 = 0 THEN t2.Text12 ELSE CAST(t2.Int1 AS NVARCHAR) END AS EmployeeID,
        t3.Name                    AS PersonnelType,
        t1.ObjectIdentity1         AS PersonGUID,
        -- extract CardNumber from XML or shred table
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
          sc.value
        )                          AS CardNumber,
        CASE
          WHEN t1.ObjectName2 LIKE 'APAC_PI%' THEN 'Taguig City'
          WHEN t1.ObjectName2 LIKE 'APAC_PH%' THEN 'Quezon City'
          WHEN t1.ObjectName2 LIKE '%PUN%'   THEN 'Pune'
          WHEN t1.ObjectName2 LIKE 'APAC_JPN%' THEN 'JP.Tokyo'
          WHEN t1.ObjectName2 LIKE 'APAC_MY%'  THEN 'MY.Kuala Lumpur'
          ELSE t1.PartitionName2
        END                        AS PartitionName2,
        DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t5d.value                  AS Direction
      FROM ACVSUJournal_00010028.dbo.ACVSUJournalLog t1
      JOIN ACVSCore.Access.Personnel       t2 ON t1.ObjectIdentity1 = t2.GUID
      JOIN ACVSCore.Access.PersonnelType   t3 ON t2.PersonnelTypeID = t3.ObjectID
      LEFT JOIN ACVSUJournal_00010028.dbo.ACVSUJournalLogxmlShred t5d
        ON t1.XmlGUID = t5d.GUID AND t5d.Value IN ('InDirection','OutDirection')
      LEFT JOIN ACVSUJournal_00010028.dbo.ACVSUJournalLogxml t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM ACVSUJournal_00010028.dbo.ACVSUJournalLogxmlShred
        WHERE Name IN ('Card','CHUID')
      ) AS sc
        ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType = 'CardAdmitted'
        AND t1.PartitionName2 IN (${parts})
        AND CONVERT(DATE, DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC))
            = CONVERT(DATE, GETDATE())
    ), Ranked AS (
      SELECT *,
        ROW_NUMBER() OVER (PARTITION BY PersonGUID ORDER BY LocaleMessageTime DESC) AS rn
      FROM CombinedEmployeeData
    )
    SELECT
      ObjectName1,
      Door,                            -- door
      PersonnelType,
      EmployeeID,
      CardNumber,                      -- now returned
      PartitionName2,
      LocaleMessageTime,
      Direction,
      PersonGUID
    FROM Ranked
    WHERE rn = 1;
  `;

  const result = await pool.request().query(query);
  return result.recordset;
};

exports.fetchHistoricalData = async ({ days = 7, location = null }) => {
  const pool = await poolPromise;
  const parts = quoteList(partitionList);

  // Outer‐query filter based on the alias
  const outerFilter = location
    ? `WHERE PartitionNameFriendly = @location`
    : `WHERE PartitionNameFriendly IN (${quoteList([
        'Pune','Quezon City','JP.Tokyo','MY.Kuala Lumpur','Taguig City'
      ])})`;

  const query = `
    WITH Hist AS (
      SELECT
        DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t1.ObjectName1,
        t1.ObjectName2               AS Door,
        CASE WHEN t2.Int1 = 0 THEN t2.Text12 ELSE CAST(t2.Int1 AS NVARCHAR) END AS EmployeeID,
        t3.Name                      AS PersonnelType,
        t1.ObjectIdentity1           AS PersonGUID,


 -- **Single** friendly‐name alias, with fallback
        COALESCE(
          CASE
            WHEN t1.ObjectName2 LIKE 'APAC_PI%'   THEN 'Taguig City'
            WHEN t1.ObjectName2 LIKE 'APAC_PH%'   THEN 'Quezon City'
            WHEN t1.ObjectName2 LIKE '%PUN%'      THEN 'Pune'
            WHEN t1.ObjectName2 LIKE 'APAC_JPN%'  THEN 'JP.Tokyo'
            WHEN t1.ObjectName2 LIKE 'APAC_MY%'   THEN 'MY.Kuala Lumpur'
            ELSE t1.PartitionName2
          END,
          'APAC.Default'
        )                             AS PartitionNameFriendly,

        -- extract CardNumber
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
          sc.value
        )                            AS CardNumber,
        t5d.value                    AS Direction
      FROM ACVSUJournal_00010028.dbo.ACVSUJournalLog t1
      JOIN ACVSCore.Access.Personnel       t2 ON t1.ObjectIdentity1 = t2.GUID
      JOIN ACVSCore.Access.PersonnelType   t3 ON t2.PersonnelTypeID = t3.ObjectID
      LEFT JOIN ACVSUJournal_00010028.dbo.ACVSUJournalLogxmlShred t5d
        ON t1.XmlGUID = t5d.GUID AND t5d.Value IN ('InDirection','OutDirection')
      LEFT JOIN ACVSUJournal_00010028.dbo.ACVSUJournalLogxml t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM ACVSUJournal_00010028.dbo.ACVSUJournalLogxmlShred
        WHERE Name IN ('Card','CHUID')
      ) AS sc
        ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType = 'CardAdmitted'
        -- date filter remains here
        AND CONVERT(DATE, DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC))
            >= DATEADD(DAY, -${days}, CONVERT(DATE, GETDATE()))
    )

    -- now filter by the newly‐defined alias
    SELECT *
    FROM Hist
    ${outerFilter}
    ORDER BY LocaleMessageTime ASC;
  `;

  const req = pool.request();
  if (location) {
    req.input('location', sql.NVarChar, location);
  }
  const result = await req.query(query);
  return result.recordset;
};


exports.fetchHistoricalOccupancy = async (location) =>
  exports.fetchHistoricalData({ days: 7, location: location || null });

http://localhost:3007/api/occupancy/live-summary
{
  "success": true,
  "today": {
    "total": 118,
    "Employee": 51,
    "Contractor": 67
  },
  "realtime": {
    "Pune": {
      "total": 27,
      "Employee": 0,
      "Contractor": 27,
      "floors": {
        "Podium Floor": 19,
        "Tower B": 8
      }
    },
    "Quezon City": {
      "total": 22,
      "Employee": 11,
      "Contractor": 11,
      "floors": {
        "7th Floor": 21,
        "6th Floor": 1
      }
    },
    "JP.Tokyo": {
      "total": 1,
      "Employee": 1,
      "Contractor": 0,
      "floors": {
        "Tokyo": 1
      }
    }
  },
  "unmapped": [],
  "details": [
    {
      "ObjectName1": "Consencino, Geraldine",
      "Door": "APAC_PH_Manila_7th Floor_Recption Door 1-701",
      "PersonnelType": "Property Management",
      "EmployeeID": "",
      "CardNumber": "418429",
      "PartitionName2": "Quezon City",
      "LocaleMessageTime": "2025-08-03T13:05:54.000Z",
      "Direction": "OutDirection",
      "PersonGUID": "EC54EA4C-EE1A-43FD-A59D-00F410DBB11D"
    },
    {
      "ObjectName1": "Minekar, Kisan",
      "Door": "APAC_IN_PUN_PODIUM_RED_RECREATION AREA FIRE EXIT 1-DOOR NEW",
      "PersonnelType": "Property Management",
      "EmployeeID": "",
      "CardNumber": "414240",
      "PartitionName2": "Pune",
      "LocaleMessageTime": "2025-08-03T13:30:13.000Z",
      "Direction": "InDirection",
      "PersonGUID": "A5D41905-C5E0-4A75-A0B6-013D84B71A44"
    },
    {

     
// src/pages/History.jsx — APAC Edition

import React, { useEffect, useState, useMemo } from 'react';
import { useParams } from 'react-router-dom';
import {
  Container,
  Box,
  Button,
  Typography,
  Table,
  TableHead,
  TableBody,
  TableRow,
  TableCell,
  Paper,
  TextField
} from '@mui/material';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { LocalizationProvider, DatePicker } from '@mui/x-date-pickers';
import { format } from 'date-fns';
import * as XLSX from 'xlsx';
import { saveAs } from 'file-saver';

import Header from '../components/Header';
import Footer from '../components/Footer';
import LoadingSpinner from '../components/LoadingSpinner';
import { fetchHistory } from '../api/occupancy.service';

// APAC display mapping (country + city) by front-end code
const apacPartitionDisplay = {
  'IN.Pune':         { country: 'India',       city: 'Pune' },
  'MY.Kuala Lumpur': { country: 'Malaysia',    city: 'Kuala Lumpur' },
  'PH.Quezon':       { country: 'Philippines', city: 'Quezon City' },
  'PH.Taguig':       { country: 'Philippines', city: 'Taguig' },
  'JP.Tokyo':        { country: 'Japan',       city: 'Tokyo' },
};

// Forward map: front-end code → backend key
const apacForwardKey = {
  'IN.Pune':         'Pune',
  'MY.Kuala Lumpur': 'Kuala Lumpur',
  'PH.Quezon':       'Quezon City',
  'PH.Taguig':       'Taguig City',
  'JP.Tokyo':        'JP.Tokyo',
};

// Reverse map: backend key → front-end code
const apacReverseKey = Object.fromEntries(
  Object.entries(apacForwardKey).map(([fe, be]) => [be, fe])
);


// Format a backend partition key into "Country • City"
const formatPartition = key => {
  const feCode = apacReverseKey[key];
  const display = feCode && apacPartitionDisplay[feCode];
  return display
    ? `${display.city}`
    : key;  // fallback to raw if missing
};


export default function History() {
  const { partition } = useParams();
  const decodedPartition = partition ? decodeURIComponent(partition) : null;

  // the exact backend key to filter on, if any
  // const backendFilterKey = decodedPartition
  //   ? apacForwardKey[decodedPartition]
  //   : null;

const backendFilterKey = decodedPartition
  ? apacForwardKey[decodedPartition] || decodedPartition
  : null;

  // Try to find the matching front-end key (e.g., "IN.Pune") for "Pune"

  const [data, setData]               = useState(null);
  const [loading, setLoading]         = useState(true);
  const [pickedDate, setPickedDate]   = useState(null);
  const [showDetails, setShowDetails] = useState(false);

  // useEffect(() => {
  //   setLoading(true);
  //   fetchHistory(decodedPartition)
  //     .then(json => setData(json))
  //     .finally(() => setLoading(false));
  // }, [decodedPartition]);

  useEffect(() => {
  setLoading(true);
  fetchHistory(decodedPartition)
    .then(json => {
      setData(json);
      // DEBUG LOG - Add this line
      console.log('Initial data loaded:', json);
    })
    .finally(() => setLoading(false));
}, [decodedPartition]);

const summaryEntry = useMemo(() => {
  if (!data || !pickedDate) return null;

  const dateStr = format(pickedDate, 'yyyy-MM-dd');

  const match = data.summaryByDate.find(r =>
    r.date === dateStr || r.date.startsWith(dateStr)
  );

  return match || null;
}, [data, pickedDate]);

// const partitionRows = useMemo(() => {
//   if (!summaryEntry) return [];

//   // Handle single-city response (data is in region)
//   if (backendFilterKey && summaryEntry.region) {
//     const feCode = Object.entries(apacForwardKey).find(
//       ([code, beKey]) => beKey === backendFilterKey || `${beKey} City` === backendFilterKey
//     )?.[0];
    
//     const display = feCode ? apacPartitionDisplay[feCode] : null;
    
//     return [{
//       country: display?.country || 'Unknown',
//       city: display?.city || backendFilterKey.replace(' City', ''),
//       employee: summaryEntry.region.Employee ?? 0,
//       contractor: summaryEntry.region.Contractor ?? 0,
//       total: summaryEntry.region.total ?? 0
//     }];
//   }

//   // Handle global view (data is in partitions)
//   return Object.entries(summaryEntry.partitions || {})
//     .filter(([key]) => !backendFilterKey || 
//       key.replace(' City', '') === backendFilterKey.replace(' City', ''))
//     .map(([key, vals]) => {
//       const feCode = Object.entries(apacForwardKey).find(
//         ([code, beKey]) => beKey === key || `${beKey} City` === key
//       )?.[0];
      
//       const display = feCode ? apacPartitionDisplay[feCode] : null;
      
//       return {
//         country: display?.country || 'Unknown',
//         city: display?.city || key.replace(' City', ''),
//         employee: vals.Employee ?? vals.EmployeeCount ?? 0,
//         contractor: vals.Contractor ?? vals.ContractorCount ?? 0,
//         total: vals.total ?? 0,
//       };
//     });
// }, [summaryEntry, backendFilterKey]);
//  this is wroking details rows only not my.kl

//   const detailRows = useMemo(() => {
//   if (!data || !pickedDate || !data.details) return [];
  
//   const dateStr = format(pickedDate, 'yyyy-MM-dd');
  
//   return data.details
//     .filter(r => {
//       // More flexible date comparison
//       const recordDate = format(new Date(r.LocaleMessageTime), 'yyyy-MM-dd');
//       return recordDate === dateStr;
//     })
//     .filter(r => {
//       if (!backendFilterKey) return true;
      
//       // Handle both direct and mapped partition names
//       const recordPartition = r.PartitionName2 || r.PartitionNameFriendly;
//       if (!recordPartition) return false;
      
//       // Normalize keys for comparison
//       const normalizedRecord = recordPartition.replace(' City', '');
//       const normalizedFilter = backendFilterKey.replace(' City', '');
      
//       return normalizedRecord === normalizedFilter;
//     })
//     .filter(r => r.Direction === 'InDirection')
//     .reduce((unique, row) => {
//       const keyGUID = `${row.PersonGUID}-${row.PersonnelType}`;
//       if (!unique._seen.has(keyGUID)) {
//         unique._seen.add(keyGUID);
//         unique.rows.push(row);
//       }
//       return unique;
//     }, { _seen: new Set(), rows: [] })
//     .rows;
// }, [data, pickedDate, backendFilterKey]);

const partitionRows = useMemo(() => {
  if (!summaryEntry) return [];

  // Handle single-city response (data is in region)
  if (backendFilterKey && summaryEntry.region) {
    const feCode = Object.keys(apacPartitionDisplay).find(
      code => apacForwardKey[code] === backendFilterKey || 
             code === backendFilterKey
    );
    
    const display = feCode ? apacPartitionDisplay[feCode] : null;
    
    return [{
      country: display?.country || 'Unknown',
      city: display?.city || backendFilterKey.replace(' City', ''),
      employee: summaryEntry.region.Employee ?? 0,
      contractor: summaryEntry.region.Contractor ?? 0,
      total: summaryEntry.region.total ?? 0
    }];
  }

  // Handle global view (data is in partitions)
  return Object.entries(summaryEntry.partitions || {})
    .filter(([key]) => !backendFilterKey || 
      key.replace(' City', '') === backendFilterKey.replace(' City', ''))
    .map(([key, vals]) => {
      // First try to find exact match in forward keys
      const feCode = Object.entries(apacForwardKey).find(
        ([code, beKey]) => beKey === key || `${beKey} City` === key || code === key
      )?.[0];
      
      // If not found, try to match with country prefix (MY., PH., etc.)
      const display = feCode ? apacPartitionDisplay[feCode] : 
        Object.entries(apacPartitionDisplay).find(
          ([code]) => code.endsWith(key.replace(' City', ''))
        )?.[1];
      
      return {
        country: display?.country || 'Unknown',
        city: display?.city || key.replace(' City', ''),
        employee: vals.Employee ?? vals.EmployeeCount ?? 0,
        contractor: vals.Contractor ?? vals.ContractorCount ?? 0,
        total: vals.total ?? 0,
      };
    });
}, [summaryEntry, backendFilterKey]);

const detailRows = useMemo(() => {
  if (!data || !pickedDate || !data.details) return [];
  
  const dateStr = format(pickedDate, 'yyyy-MM-dd');
  
  return data.details
    .filter(r => {
      const recordDate = format(new Date(r.LocaleMessageTime), 'yyyy-MM-dd');
      return recordDate === dateStr;
    })
    .filter(r => {
      if (!backendFilterKey) return true;
      
      // Handle special case for Kuala Lumpur
      const recordPartition = (r.PartitionName2 || r.PartitionNameFriendly || '').replace('MY.', '');
      if (!recordPartition) return false;
      
      // Normalize keys for comparison (remove country prefix and ' City' suffix)
      const normalizedRecord = recordPartition.replace(' City', '').trim();
      const normalizedFilter = backendFilterKey.replace('MY.', '').replace(' City', '').trim();
      
      return normalizedRecord === normalizedFilter;
    })
    .filter(r => r.Direction === 'InDirection')
    .reduce((unique, row) => {
      const keyGUID = `${row.PersonGUID}-${row.PersonnelType}`;
      if (!unique._seen.has(keyGUID)) {
        unique._seen.add(keyGUID);
        unique.rows.push(row);
      }
      return unique;
    }, { _seen: new Set(), rows: [] })
    .rows;
}, [data, pickedDate, backendFilterKey]);
  const handleExport = () => {
    const ws = XLSX.utils.json_to_sheet(
      detailRows.map((r, i) => ({
        Sr: i + 1,
        Date: format(new Date(r.LocaleMessageTime), 'yyyy-MM-dd'),
        Time: format(new Date(r.LocaleMessageTime), 'HH:mm:ss'),
        EmployeeID: r.EmployeeID,
        Name: r.ObjectName1,
        PersonnelType: r.PersonnelType,
        Door: r.Door,
     Partition: formatPartition(r.PartitionNameFriendly)
      }))
    );
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Details');
    const buf = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });
    saveAs(new Blob([buf]), `apac_history_${format(pickedDate, 'yyyyMMdd')}.xlsx`);
  };

  if (loading) return <LoadingSpinner />;
  if (!data)    return null;

  // Styles for DatePicker's TextField
  const datePickerSx = {
    backgroundColor: '#000',
    '& .MuiOutlinedInput-notchedOutline': {
      borderColor: '#FFC107',
    },
    '&:hover .MuiOutlinedInput-notchedOutline': {
      borderColor: '#FFC107',
    },
    '& .MuiInputBase-input': {
      color: '#FFC107',
    },
    '& .MuiInputLabel-root': {
      color: '#FFC107',
    },
    '& .MuiInputAdornment-root svg': {
      color: '#FFC107',
    },
  };

  return (
    <>
      <Header />

      <Container maxWidth={false} disableGutters sx={{ pt: 2, pb: 4 }}>
        {pickedDate && summaryEntry ? (
          <Box display="flex" alignItems="flex-start" sx={{ px: '20px', mb: 2, gap: '10px' }}>
            {/* DatePicker */}
            <Box sx={{ flex: '0 0 200px' }}>
              <LocalizationProvider dateAdapter={AdapterDateFns}>
                <DatePicker
                  label="Select date"
                  value={pickedDate}
                  onChange={d => { setPickedDate(d); setShowDetails(false); }}
                  renderInput={params => (
                    <TextField
                      fullWidth
                      {...params}
                      sx={datePickerSx}
                    />
                  )}
                />
              </LocalizationProvider>
            </Box>

            {/* Summary Table */}
            <Box sx={{ flex: 1, maxWidth: 900, display: 'flex', flexDirection: 'column', gap: 2 }}>
              <Paper elevation={3} sx={{ px: 4, py: 3, border: '3px solid #000', borderRadius: 2 }}>
                <Table sx={{ border: '2px solid #000' }}>
                  <TableHead>
                    <TableRow>
                      <TableCell colSpan={5} align="center"
                        sx={{
                          fontWeight: 'bold',
                          fontSize: 16,
                          bgcolor: '#000',
                          color: '#FFC107',
                          border: '2px solid #000'
                        }}
                      >
                        {format(pickedDate, 'EEEE, d MMMM, yyyy')}
                      </TableCell>
                    </TableRow>
                    <TableRow sx={{ bgcolor: '#FFC107' }}>
                      {['Country','City','Employees','Contractors','Total'].map(h => (
                        <TableCell
                          key={h}
                          align={['Country','City'].includes(h) ? 'left' : 'right'}
                          sx={{
                            color: '#000',
                            fontWeight: 'bold',
                            fontSize: 14,
                            border: '2px solid #000'
                          }}
                        >
                          {h}
                        </TableCell>
                      ))}
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {partitionRows.map((row, i) => (
                      <TableRow key={i}>
                        <TableCell sx={{ border: '2px solid #000' }}>{row.country}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{row.city}</TableCell>
                        <TableCell align="right" sx={{ border: '2px solid #000' }}>{row.employee}</TableCell>
                        <TableCell align="right" sx={{ border: '2px solid #000' }}>{row.contractor}</TableCell>
                        <TableCell
                          align="right"
                          sx={{
                            backgroundColor: '#FFC107',
                            fontWeight: 'bold',
                            border: '2px solid #000'
                          }}
                        >
                          {row.total}
                        </TableCell>
                      </TableRow>
                    ))}
                    <TableRow sx={{ bgcolor: '#666' }}>
                      <TableCell colSpan={2} align="right"
                        sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                        Total
                      </TableCell>
                      <TableCell align="right"
                        sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                        {partitionRows.reduce((s, r) => s + r.employee, 0)}
                      </TableCell>
                      <TableCell align="right"
                        sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                        {partitionRows.reduce((s, r) => s + r.contractor, 0)}
                      </TableCell>
                      <TableCell align="right"
                        sx={{ color: '#fff', fontWeight: 'bold', bgcolor: '#333', border: '2px solid #000' }}>
                        {partitionRows.reduce((s, r) => s + r.total, 0)}
                      </TableCell>
                    </TableRow>
                  </TableBody>
                </Table>
              </Paper>

              {/* Toggle Details & Export */}
              <Box display="flex" justifyContent="center" sx={{ mt: 1 }}>
                <Button
                  variant="contained"
                  sx={{ bgcolor: '#FFC107', color: '#000' }}
                  onClick={() => setShowDetails(v => !v)}
                >
                  {showDetails ? 'Hide Details' : 'See Details'}
                </Button>
                {showDetails && (
                  <Button
                    variant="outlined"
                    sx={{ ml: 2, borderColor: '#FFC107', color: '#FFC107' }}
                    onClick={handleExport}
                  >
                    Export to Excel
                  </Button>
                )}
              </Box>
            </Box>
          </Box>
        ) : (
          <Box sx={{ px: '20px', mb: 3 }}>
            <LocalizationProvider dateAdapter={AdapterDateFns}>
              <DatePicker
                label="Select date"
                value={pickedDate}
                onChange={d => { setPickedDate(d); setShowDetails(false); }}
                renderInput={params => (
                  <TextField
                    fullWidth
                    {...params}
                    sx={datePickerSx}
                  />
                )}
              />
            </LocalizationProvider>
            {!pickedDate && (
              <Typography variant="body1" color="textSecondary" sx={{ mt: 2 }}>
                Please pick a date to view region summary.
              </Typography>
            )}
          </Box>
        )}

        {/* Details Table */}
        {showDetails && (
          <Box display="flex" justifyContent="center" mb={2} sx={{ width: '100%' }}>
            <Paper
              elevation={1}
              sx={{
                px: '40px',
                py: 1,
                width: '100%',
                border: '3px solid #000',
                borderRadius: 2,
              }}
            >
              {detailRows.length > 0 ? (
                <Table sx={{ border: '2px solid #000', borderCollapse: 'collapse' }}>
                  <TableHead>
                    <TableRow sx={{ bgcolor: '#000' }}>
                      {[
                        'Sr','Date','Time',
                        'Employee ID','Name','Personnel Type',
                        'Door','Partition'
                      ].map(h => (
                        <TableCell
                          key={h}
                          align="center"
                          sx={{
                            color: '#FFC107',
                            fontWeight: 'bold',
                            fontSize: 14,
                            border: '2px solid #000',
                          }}
                        >
                          {h}
                        </TableCell>
                      ))}
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {detailRows.map((r, i) => (
                      <TableRow key={`${r.PersonGUID}-${i}`}>
                        <TableCell sx={{ border: '2px solid #000' }}>{i + 1}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>
                          {format(new Date(r.LocaleMessageTime), 'yyyy-MM-dd')}
                        </TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>
                          {format(new Date(r.LocaleMessageTime), 'HH:mm:ss')}
                        </TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{r.EmployeeID}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{r.ObjectName1}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{r.PersonnelType}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{r.Door}</TableCell>


                              <TableCell sx={{ border: '2px solid #000' }}>
                          {formatPartition(r.PartitionNameFriendly)}
                      </TableCell>

                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              ) : (
                <Typography
                  variant="body2"
                  sx={{
                    color: '#666',
                    textAlign: 'center',
                    mt: 2,
                    fontStyle: 'italic',
                  }}
                >
                  No swipe records found for this date.
                </Typography>
              )}
            </Paper>
          </Box>
        )}
      </Container>

      <Footer />
    </>
  );
}
//C:\Users\W0024618\Desktop\apac-occupancy-frontend\src\pages\PartitionDetailDetails.jsx

import React, { useEffect, useState, useMemo } from "react";
import {
  Container, Box, Typography, Button, TextField,
  Paper, TableContainer, Table, TableHead, TableRow, TableCell, TableBody
} from "@mui/material";
import { useParams, useNavigate } from "react-router-dom";

import Header from "../components/Header";
import Footer from "../components/Footer";
import LoadingSpinner from "../components/LoadingSpinner";
import DataTable from "../components/DataTable";

import { fetchLiveSummary } from "../api/occupancy.service";
import { lookupFloor } from "../utils/floorLookup";

export default function PartitionDetailDetails() {
  const { partition } = useParams();
  const navigate = useNavigate();

  const [details, setDetails] = useState([]);
  const [liveCounts, setLiveCounts] = useState({});
  const [loading, setLoading] = useState(true);
  const [lastUpdate, setLastUpdate] = useState("");
  const [search, setSearchTerm] = useState("");
  const [expandedFloor, setExpandedFloor] = useState(null);

  // load once
  useEffect(() => {
    let active = true;
    fetchLiveSummary().then(json => {
      if (!active) return;
      setLiveCounts(json.realtime[partition]?.floors || {});
      const det = json.details
        .filter(r => r.PartitionName2 === partition && r.Direction === "InDirection")
        .map(r => ({ ...r, floor: lookupFloor(r.PartitionName2, r.Door, r.Direction) }));
      setDetails(det);
      setLastUpdate(new Date().toLocaleTimeString());
      setLoading(false);
    });
    return () => { active = false };
  }, [partition]);
  // poll
  useEffect(() => {
    const iv = setInterval(async () => {
      const json = await fetchLiveSummary();
      setLiveCounts(json.realtime[partition]?.floors || {});
      const det = json.details
        .filter(r => r.PartitionName2 === partition && r.Direction === "InDirection")
        .map(r => ({ ...r, floor: lookupFloor(r.PartitionName2, r.Door, r.Direction) }));
      setDetails(det);
      setLastUpdate(new Date().toLocaleTimeString());
    }, 1000);
    return () => clearInterval(iv);
  }, [partition]);

  // group floors
  const floorMap = useMemo(() => {
    const m = {};
    Object.keys(liveCounts).forEach(f => m[f] = []);
    details.forEach(r => {
      if (!m[r.floor]) m[r.floor] = [];
      m[r.floor].push(r);
    });
    return m;
  }, [details, liveCounts]);
  const displayed = useMemo(() => {
  const term = search.toLowerCase();
  return Object.entries(floorMap)
    .map(([floor, emps]) => {
      const filteredEmps = emps.filter(e =>
        floor.toLowerCase().includes(term) ||
        e.ObjectName1?.toLowerCase().includes(term) ||
        e.EmployeeID?.toString().toLowerCase().includes(term) ||
        e.CardNumber?.toString().toLowerCase().includes(term)
      );
      return [floor, filteredEmps];
    })
    .filter(([, filteredEmps]) => filteredEmps.length > 0);
}, [floorMap, search]);


  const columns = [
    { field: "EmployeeID", headerName: "Emp ID" },
    { field: "ObjectName1", headerName: "Name" },
    { field: "LocaleMessageTime", headerName: "Swipe Time" },
    { field: "PersonnelType", headerName: "Type" },
    { field: "CardNumber", headerName: "Card" },
    { field: "Door", headerName: "Door" },
  ];

  if (loading) {
    return (
      <>
        <Header />
        <Box sx={{ px: 2, py: 8 }}><LoadingSpinner /></Box>
        <Footer />
      </>
    );
  }

  return (
    <>
      <Header />

      <Box sx={{ pt: 1, pb: 1, background: 'rgba(0,0,0,0.6)' }}>
        <Container disableGutters maxWidth={false}>
          <Box display="flex" alignItems="center" mb={2} sx={{ px: 2 }}>
            <Button size="small" onClick={() => navigate(-1)} sx={{ color: '#FFC107' }}>
              ← Back to Overview
            </Button>
          </Box>

          <Box display="flex" alignItems="center" gap={2} mb={2} sx={{ px: 2 }}>
            <Typography variant="h6" sx={{ color: '#FFC107' }}>
              Floor Details
            </Typography>
            <Typography variant="body2" sx={{ color: '#FFC107' }}>
              Last updated: {lastUpdate}
            </Typography>
            <TextField
              size="small"
              placeholder="Search floor / emp…"
              value={search}
              onChange={e => setSearchTerm(e.target.value)}
              sx={{
                '& .MuiInputBase-input': { color: '#FFC107' },
                '& .MuiOutlinedInput-root fieldset': { borderColor: '#FFC107' }
              }}
            />
          </Box>

          <Box display="flex" flexWrap="wrap" width="100%" sx={{ px: 2 }}>
            {displayed.map(([floor, emps]) => (
              <Box key={floor} sx={{ width: '50%', p: 2 }}>
                <Paper sx={{
                  border: '2px solid #FFC107',
                  p: 2,
                  background: 'rgba(0,0,0,0.4)'
                }}>
                  <Typography variant="subtitle1" fontWeight={600} gutterBottom sx={{ color: '#FFC107' }}>
                    {floor} (Total {liveCounts[floor] || 0})
                  </Typography>

                  <TableContainer component={Paper} variant="outlined" sx={{ mb: 1, background: 'rgba(0,0,0,0.4)' }}>
                    <Table size="small">
                      <TableHead>
                        <TableRow sx={{ bgcolor: '#000' }}>
                          {["Emp ID", "Name", "Swipe Time", "Type", "Card", "Door"].map(h => (
                            <TableCell key={h} sx={{ color: '#FFC107', border: '1px solid #FFC107', fontWeight: 'bold' }}>
                              {h}
                            </TableCell>
                          ))}
                        </TableRow>
                      </TableHead>
                      <TableBody>
                        {emps.slice(0, 10).map((r, i) => (
                          <TableRow key={i}>
                            <TableCell sx={{ color: '#fff', border: '1px solid #FFC107' }}>{r.EmployeeID}</TableCell>
                            <TableCell sx={{ color: '#fff', border: '1px solid #FFC107' }}>{r.ObjectName1}</TableCell>
                            <TableCell sx={{ color: '#fff', border: '1px solid #FFC107' }}>
                              {new Date(r.LocaleMessageTime).toLocaleTimeString()}
                            </TableCell>
                            <TableCell sx={{ color: '#fff', border: '1px solid #FFC107' }}>{r.PersonnelType}</TableCell>
                            <TableCell sx={{ color: '#fff', border: '1px solid #FFC107' }}>{r.CardNumber}</TableCell>
                            <TableCell sx={{ color: '#fff', border: '1px solid #FFC107' }}>{r.Door}</TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </TableContainer>

                  <Button size="small"
                    onClick={() => setExpandedFloor(f => f === floor ? null : floor)}
                    sx={{ color: '#FFC107' }}
                  >
                    {expandedFloor === floor ? 'Hide' : 'See more…'}
                  </Button>
                </Paper>
              </Box>
            ))}
          </Box>

          {expandedFloor && (
            <Box sx={{ px: 2, mt: 2 }}>
              <Typography variant="h6" sx={{ color: '#FFC107' }} gutterBottom>
                {expandedFloor} — All Entries
              </Typography>
              <DataTable
                columns={columns}
                rows={floorMap[expandedFloor].map(r => ({
                  ...r,
                  LocaleMessageTime: new Date(r.LocaleMessageTime).toLocaleTimeString()
                }))}
              />
            </Box>
          )}
        </Container>
      </Box>

      <Footer />
    </>
  );
}

C:\Users\W0024618\Desktop\apac-occupancy-frontend\src\pages\PartitionDetail.jsx

                 // src/pages/PartitionDetail.jsx

import React, { useEffect, useState } from "react";
import {
  Container,
  Box,
  Typography,
  Button,
  CircularProgress,
} from "@mui/material";
import { useParams, useNavigate } from "react-router-dom";

import SummaryCard from "../components/SummaryCard";
import ChartCard from "../components/ChartCard";
import Header from "../components/Header";
import Footer from "../components/Footer";
import LoadingSpinner from "../components/LoadingSpinner";

import { fetchLiveSummary, fetchHistory } from "../api/occupancy.service";
import { lookupFloor } from "../utils/floorLookup";

import buildingCapacities from "../data/buildingCapacities";

export default function PartitionDetail() {
  const { partition } = useParams(); // e.g. 'IN.Pune'
  const navigate = useNavigate();

  const [liveSummary, setLiveSummary] = useState(null);
  const [history, setHistory] = useState(null);
  const [historyLoading, setHistoryLoading] = useState(true);
  const [lastUpdate, setLastUpdate] = useState("");

  // 1) Auto‐refresh live summary every second
  useEffect(() => {
    let timer;
    async function loadLive() {
      const json = await fetchLiveSummary();
      setLiveSummary(json);
      setLastUpdate(new Date().toLocaleTimeString());
    }
    loadLive();
    timer = setInterval(loadLive, 1000);
    return () => clearInterval(timer);
  }, [partition]);

  // 2) Fetch per‐partition history once on mount / partition change
  useEffect(() => {
    setHistoryLoading(true);
    fetchHistory(partition).then((json) => {
      setHistory(json);
      setHistoryLoading(false);
    });
  }, [partition]);

  if (!liveSummary || !history) {
    return <LoadingSpinner />;
  }

  // 3) Grab the last day’s summary record
  const lastDay = history.summaryByDate?.at(-1);

  // 4) For the partition detail endpoint, history.lastDay.region holds
  //    exactly { total, Employee, Contractor } for that partition.
  const todayHist = lastDay?.region || {
    total: 0,
    Employee: 0,
    Contractor: 0,
  };

  // 5) Realtime data is keyed by the display name, which now matches
  //    the partition code's suffix (after stripping dot-prefix in service).
  //    E.g. 'IN.Pune' → liveSummary.realtime['Pune']
   const codeMap = {
    'IN.Pune':         'Pune',
    'MY.Kuala Lumpur': 'MY.Kuala Lumpur',
    'PH.Quezon':       'Quezon City',
    'PH.Taguig':       'Taguig City',
    'JP.Tokyo':        'JP.Tokyo'
  };
  const realKey = codeMap[partition] || partition;
  const live = liveSummary.realtime[realKey] || {
    total: 0,
    Employee: 0,
    Contractor: 0,
    floors: {},
  };

  // 6) Build floor entries for the ChartCard from live.floors
  const floorEntries = live.floors
    ? Object.entries(live.floors).map(([floor, cnt]) => {
        const name = floor.trim();
        const capacity = buildingCapacities[name] ?? 0;
        const pct = capacity ? Math.round((cnt / capacity) * 100) : 0;
        return {
          name,
          Headcount: cnt,
          Capacity: capacity,
          breakdown: {
            Headcount: cnt,
            "Total Seat": capacity,
            Usage: pct + "%",
          },
        };
      })
    : [];

  return (
    <>
      <Header />

      <Box component="main" sx={{ pt: 1, pb: 1 }}>
        <Container maxWidth={false} disableGutters>
          {/* Back button */}
          <Box display="flex" alignItems="center" mb={1} sx={{ px: "20px" }}>
            <Button size="small" onClick={() => navigate(-1)}>
              ← Back
            </Button>
          </Box>

          {/* Six‐card partition summary */}
          <Box display="flex" flexWrap="wrap" gap={1} mb={1}>
            {[
              {
                title: "Today's Total Headcount",
                value: historyLoading ? (
                  <CircularProgress size={20} />
                ) : (
                  todayHist.total
                ),
                icon: (
                  <i
                    className="fa-solid fa-users"
                    style={{ fontSize: 25, color: "#FFB300" }}
                  />
                ),
                border: "#FFB300",
              },
              {
                title: "Today's Employees Count",
                value: historyLoading ? (
                  <CircularProgress size={20} />
                ) : (
                  todayHist.Employee
                ),
                icon: (
                  <i
                    className="bi bi-people"
                    style={{ fontSize: 25, color: "#EF5350" }}
                  />
                ),
                border: "#8BC34A",
              },
              {
                title: "Today's Contractors Count",
                value: historyLoading ? (
                  <CircularProgress size={20} />
                ) : (
                  todayHist.Contractor
                ),
                icon: (
                  <i
                    className="fa-solid fa-circle-user"
                    style={{ fontSize: 25, color: "#8BC34A" }}
                  />
                ),
                border: "#E57373",
              },
              {
                title: "Realtime Headcount",
                value: live.total,
                icon: (
                  <i
                    className="fa-solid fa-users"
                    style={{ fontSize: 25, color: "#FFB300" }}
                  />
                ),
                border: "#FFD180",
              },
              {
                title: "Realtime Employees Count",
                value: live.Employee,
                icon: (
                  <i
                    className="bi bi-people"
                    style={{ fontSize: 25, color: "#EF5350" }}
                  />
                ),
                border: "#AED581",
              },
              {
                title: "Realtime Contractors Count",
                value: live.Contractor,
                icon: (
                  <i
                    className="fa-solid fa-circle-user"
                    style={{ fontSize: 25, color: "#8BC34A" }}
                  />
                ),
                border: "#EF5350",
              },
            ].map((card) => (
              <Box key={card.title} sx={{ flex: "1 1 calc(16.66% - 8px)" }}>
                <SummaryCard
                  title={card.title}
                  total={card.value}
                  stats={[]}
                  icon={card.icon}
                  sx={{
                    height: 140,
                    border: `2px solid ${card.border}`,
                  }}
                />
              </Box>
            ))}
          </Box>

          {/* Floor‐capacity chart */}
          <Box mb={4} sx={{ px: "20px", p: 2, border: "2px solid #FFC107" }}>
            <Box
              display="flex"
              justifyContent="space-between"
              alignItems="center"
              mb={1}
            >
              <Typography variant="h6">
                Live Floor Headcount against Occupancy
              </Typography>
              <Typography variant="body2" color="textSecondary">
                Last updated: {lastUpdate}
              </Typography>
            </Box>

            <ChartCard
              data={floorEntries}
              dataKey="Headcount"
              chartHeight={320}
              colors={{ head: "#28B463", cap: "#FDDA0D" }}
              axisProps={{
                xAxis: { angle: -0, textAnchor: "end", tick: { fill: "#fff" } },
                yAxis: { tick: { fill: "#fff" } },
              }}
            />
          </Box>
        </Container>
      </Box>

      <Footer />
    </>
  );
}

//C:\Users\W0024618\Desktop\apac-occupancy-frontend\src\pages\Dashboard.jsx
import React, { useMemo } from 'react';
import {
  Container, Box, Typography, Skeleton,
  Paper
} from '@mui/material';

import Header from '../components/Header';
import Footer from '../components/Footer';

import SummaryCard from '../components/SummaryCard';
import CompositeChartCard from '../components/CompositeChartCard';
import PieChartCard from '../components/PieChartCard';

import { useLiveOccupancy } from '../hooks/useLiveOccupancy';
import { partitionList } from '../services/occupancy.service';
import buildingCapacities from '../data/buildingCapacities';
import floorCapacities from '../data/floorCapacities';

import indiaFlag from '../assets/flags/india.png';
import japanFlag from '../assets/flags/japan.png';
import malaysiaFlag from '../assets/flags/malaysia.png';
import philippinesFlag from '../assets/flags/philippines.png';
import taguigFlag from '../assets/flags/Taguig.png';

const palette15 = [
  '#FFC107', '#E57373', '#4CAF50', '#FFEB3B', '#FFD666',
  '#8BC34A', '#3F51B5', '#9C27B0', '#00BCD4', '#8BC34A',
  '#FF9800', '#673AB7', '#009688', '#CDDC39', '#795548'
];

const flagMap = {
  'Pune': indiaFlag,
  'Quezon City': philippinesFlag,
  'JP.Tokyo': japanFlag,
  'MY.Kuala Lumpur': malaysiaFlag,
  'Taguig City': philippinesFlag
};

export default function Dashboard() {
  // 1) Live data hook
  const { data, loading, error } = useLiveOccupancy(1000);

  // 2) Partitions
  const regions = data?.realtime || {};
  const partitions = useMemo(() => {
    return partitionList
      .map(name => {
        const key = Object.keys(regions).find(k => k.includes(name));
        const p = key && regions[key] ? regions[key] : {};
        return {
          name,
          total: p.total || 0,
          Employee: p.Employee || 0,
          Contractor: p.Contractor || 0,
          floors: p.floors || {},
          flag: flagMap[name] || null
        };
      })
      .sort((a, b) => b.total - a.total);
  }, [regions]);

  // 3) Totals
  const todayTot = data?.today?.total || 0;
  const todayEmp = data?.today?.Employee || 0;
  const todayCont = data?.today?.Contractor || 0;
  const realtimeTot = partitions.reduce((sum, p) => sum + p.total, 0);
  const realtimeEmp = partitions.reduce((sum, p) => sum + p.Employee, 0);
  const realtimeCont = partitions.reduce((sum, p) => sum + p.Contractor, 0);

  // 4) Regions of interest
  const pune = partitions.find(p => p.name === 'Pune');
  const quezonCity = partitions.find(p => p.name === 'Quezon City');
  const combinedRegions = partitions.filter(p =>
    ['JP.Tokyo', 'MY.Kuala Lumpur', 'Taguig City'].includes(p.name)
  );

  // 5) Pie chart data
  const quezonData = useMemo(() => [
    { name: 'Employees', value: quezonCity?.Employee || 0 },
    { name: 'Contractors', value: quezonCity?.Contractor || 0 }
  ], [quezonCity?.Employee, quezonCity?.Contractor]);

  const asiaPacData = useMemo(() =>
    combinedRegions.map(r => ({
      name: r.name.replace(/^.*\./, ''),
      value: r.total,
      emp: r.Employee,
      cont: r.Contractor
    })),
    [combinedRegions]
  );


  // 6) Prepare floors + chart configs _before_ any returns
 // 6a) Get only real floors (drop any that came back Unmapped/"Out of office")
 const floors = Object.entries(pune?.floors || {})
   .filter(([floorName, _count]) => floorName !== 'Unmapped');


 const puneChartData = useMemo(() => {
   // Map only the filtered floors; no Unknown bucket needed
   return floors.map(([f, headcount]) => {
     // first try Pune-specific capacity, else global
     const puneKey = `${f} (Pune)`;
     const capacity =
       floorCapacities[puneKey] != null
         ? floorCapacities[puneKey]
         : buildingCapacities[f] || 0;

     return {
       name: f,
       headcount,
       capacity
     };
   });
 }, [floors]);



  const chartConfigs = useMemo(() => {
    return [
      {
        key: 'pune',
        title: 'Pune',
        body: pune?.total === 0
          ? (
            <Typography color="white" align="center" py={6}>
              No Pune data
            </Typography>
          )
          : (
            <CompositeChartCard

data={puneChartData}

              lineColor={palette15[0]}
              height={250}
              sx={{ border: 'none' }}
            />
          )
      },
    
      {
        key: 'quezon',
        title: 'Quezon City',
        body: quezonCity?.total === 0
          ? (
            <Typography color="white" align="center" py={6}>
              No Quezon City data
            </Typography>
          )
          : (
                 
           <CompositeChartCard
        title=""
        data={[
          {
            name: "Quezon City (6thFloor)",
            headcount: data?.realtime?.["Quezon City"]?.floors?.["6th Floor"] ?? 0,
            capacity: buildingCapacities?.["Quezon City (6thFloor)"] ?? 0,
          },
          {
            name: "Quezon City (7thFloor)",
            headcount: data?.realtime?.["Quezon City"]?.floors?.["7th Floor"] ?? 0,
            capacity: buildingCapacities?.["Quezon City (7thFloor)"] ?? 0,
          },
        ]}
  
               lineColor={palette15[1]}
              height={250}
              sx={{ border: 'none' }}
            />
          )
      },
      {
        key: 'combined',
        title: 'Asia-Pacific',
        body: combinedRegions.length === 0
          ? (
            <Typography color="white" align="center" py={6}>
              No regional data
            </Typography>
          )
          : (
            <PieChartCard
              data={asiaPacData}
              colors={['#FFBF00', '#FFFAA0', '#B4C424']}
              height={320}
              showZeroSlice
              sx={{ border: 'none' }}
            />
          )
      }
    ];
  }, [
    floors,
    pune?.total,
    quezonCity?.floors?.["6th Floor"],
    quezonCity?.floors?.["7th Floor"],
    combinedRegions.length,
    asiaPacData
  ]);

  // 7) Error state
  if (error) {
    return (
      <Box width="100vw" py={4}>
        <Typography color="error" align="center">
          Error loading live data
        </Typography>
      </Box>
    );
  }

  // 8) Render
  return (
    <>
      <Header title="APAC Live Occupancy" />
      <Container
        maxWidth={false}
        disableGutters
        sx={{
          py: 0,
          px: 2,
          background: 'linear-gradient(135deg, #0f0f0f 0%, #1c1c1c 100%)',
          color: '#f5f5f5',
        }}
      >
        {/* Top Summary Cards */}
        <Box display="flex" flexWrap="wrap" gap={1} mb={1}>
          {[
            { title: "Today's Total Headcount", value: todayTot, icon: <i className="fa-solid fa-users" style={{ fontSize: 25, color: '#FFB300' }} />, border: '#FFB300' },
            { title: "Today's Employees Count", value: todayEmp, icon: <i className="bi bi-people" style={{ fontSize: 25, color: '#EF5350' }} />, border: '#8BC34A' },
            { title: "Today's Contractors Count", value: todayCont, icon: <i className="fa-solid fa-circle-user" style={{ fontSize: 25, color: '#8BC34A' }} />, border: '#E57373' },
            { title: "Realtime Headcount", value: realtimeTot, icon: <i className="fa-solid fa-users" style={{ fontSize: 25, color: '#FFB300' }} />, border: '#FFD180' },
            { title: "Realtime Employees Count", value: realtimeEmp, icon: <i className="bi bi-people" style={{ fontSize: 25, color: '#EF5350' }} />, border: '#AED581' },
            { title: "Realtime Contractors Count", value: realtimeCont, icon: <i className="fa-solid fa-circle-user" style={{ fontSize: 25, color: '#8BC34A' }} />, border: '#EF5350' },
          ].map(c => (
            <Box key={c.title} sx={{ flex: '1 1 calc(16.66% - 8px)' }}>
              <SummaryCard
                title={c.title}
                total={c.value}
                stats={[]}
                icon={c.icon}
                sx={{ height: 140, border: `2px solid ${c.border}` }}
              />
            </Box>
          ))}
        </Box>

        {/* Region Cards */}
        <Box display="flex" flexWrap="wrap" gap={1} mb={3}>
          {loading
            ? <Skeleton variant="rectangular" width="90%" height={200} />
            : partitions.map((p, i) => (
              <Box key={p.name} sx={{ flex: '1 1 calc(16.66% - 8px)' }}>
                <SummaryCard
                  title={<Typography variant="subtitle1" sx={{ fontWeight: 'bold', color: '#FFC107', fontSize: '1.3rem' }}>{p.name.replace(/^.*\./, '')}</Typography>}
                  total={p.total}
                  stats={[{ label: 'Employees', value: p.Employee }, { label: 'Contractors', value: p.Contractor }]}
                  sx={{ width: '100%', border: `2px solid ${palette15[i % palette15.length]}` }}
                  icon={<Box component="img" src={p.flag} sx={{ width: 48, height: 32 }} />}
                />
              </Box>
            ))
          }
        </Box>

        {/* Main Charts */}
        <Box display="flex" gap={2} flexWrap="wrap" mb={4}>
          {chartConfigs.map(({ key, title, body }) => (
            <Box key={key} sx={{ flex: '1 1 32%', minWidth: 280, height: 405, animation: 'fadeInUp 0.5s' }}>
              <Paper sx={{ p: 2, height: '100%', background: 'rgba(0,0,0,0.4)', border: '1px solid #FFC107', display: 'flex', flexDirection: 'column' }}>
                <Typography variant="h6" align="center" sx={{ color: '#FFC107', mb: 2 }}>{title}</Typography>
                <Box sx={{ flex: 1, overflow: 'hidden' }}>{body}</Box>
              </Paper>
            </Box>
          ))}
        </Box>
      </Container>
      <Footer />
    </>
  );
}
