// src/pages/ReportsPage.jsx
// Add this helper function at the top of the component
const formatDate = (date) => {
  if (!date) return '';
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  return `${year}-${month}-${day}`;
};

// Update the handleGenerate function
const handleGenerate = async () => {
  setLoading(true);
  try {
    const baseParams = {
      region,
      location: location || undefined
    };

    if (tab === 0) { // Daily Access
      const params = {
        ...baseParams,
        from: formatDate(from) + 'T08:00:00',
        to: formatDate(to) + 'T08:00:00',
        employees: selectedEmps.join(',')
      };
      const resp = await axios.get('/api/reports/daily-access', { params });
      await generateDailyAccessExcel(resp.data.data);
    } 
    else if (tab === 1) { // Raw
      const params = {
        ...baseParams,
        startDate: formatDate(from),
        endDate: formatDate(to)
      };
      const resp = await axios.get('/api/reports/raw', { params });
      // Filter by date range
      const startIso = params.startDate;
      const endIso = params.endDate;
      const rows = resp.data.data.filter(r => {
        const date = (r.DateOnly || r.LocaleMessageTime).slice(0, 10);
        return date >= startIso && date <= endIso;
      });
      const ws = XLSX.utils.json_to_sheet(rows);
      const wb = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(wb, ws, 'Raw');
      XLSX.writeFile(wb, `RawReport_${region}_${startIso}_to_${endIso}.xlsx`);
    } 
    else if (tab === 2) { // Rejection
      const params = {
        ...baseParams,
        date: formatDate(from)
      };
      const resp = await axios.get('/api/reports/rejection', { params });
      const iso = params.date;
      const rows = resp.data.data.filter(r => 
        (r.DateOnly || r.LocaleMessageTime).slice(0, 10) === iso
      );
      await generateRejectionExcel(rows);
    } 
    else if (tab === 3) { // Time Duration
      const params = {
        ...baseParams,
        startDate: formatDate(from),
        partition: location.split('.').pop()
      };
      const resp = await axios.get('/api/reports/time-duration', { params });
      await generateTimeDurationExcel(resp.data.data);
    }
  } catch (err) {
    console.error(err);
    alert('Failed to generate report');
  } finally {
    setLoading(false);
  }
};