import React, { useMemo } from 'react';
import { Card, CardContent, Typography, Box } from '@mui/material';
import { PieChart, Pie, Cell, Tooltip, Legend, ResponsiveContainer } from 'recharts';

export default function PieChartCard({
  title,
  data,
  colors = ['#FFC107', '#E0E0E0'],
  height = 350,
  showZeroSlice = false,
  animationDuration = 1500,
  noDataMessage = 'No realtime data',
  totalSeats = 0,
}) {
  const total = data.reduce((sum, d) => sum + d.value, 0);

  const renderData = useMemo(() => {
    const rawData = (total === 0 && showZeroSlice)
      ? [{ name: 'Available', value: data[1]?.value || 0 }]
      : data;

    const sum = rawData.reduce((acc, d) => acc + d.value, 0);

    return rawData.map(d => ({
      ...d,
      percent: sum > 0 ? d.value / sum : 0
    }));
  }, [JSON.stringify(data), total, showZeroSlice]);

  if (total === 0 && !showZeroSlice) {
    return (
      <Card sx={cardStyle(colors[0])}>
        <CardContent>
          <Typography variant="subtitle1" align="center" color="text.primary">
            {title}
          </Typography>
          <Typography variant="body2" align="center" sx={{ mt: 4, color: 'text.secondary' }}>
            {noDataMessage}
          </Typography>
        </CardContent>
      </Card>
    );
  }

  const isAsiaPacific = title.toLowerCase().includes('asia-pacific');

  return (
    <Card sx={cardStyle(colors[0])}>
      <CardContent sx={{ p: 1 }}>
        <Typography variant="subtitle1" align="center" color="text.primary">
          {title}
        </Typography>

        <Box sx={{ position: 'relative', width: '100%', height }}>
          <ResponsiveContainer>
            <PieChart>
              <Pie
                data={renderData}
                dataKey="value"
                nameKey="name"
                innerRadius={60}
                outerRadius={120}
                paddingAngle={4}
                isAnimationActive
                animationDuration={animationDuration}
                label={({ percent }) => `${(percent * 100).toFixed(0)}%`}
                labelLine={false}
              >
                {renderData.map((_, i) => (
                  <Cell key={i} fill={colors[i % colors.length]} />
                ))}
              </Pie>

              {isAsiaPacific ? (
                <>
                  <Tooltip content={<CustomTooltip />} />
                  <Legend
                    verticalAlign="bottom"
                    wrapperStyle={{ color: 'rgba(18, 17, 17, 0.8)' }}
                    formatter={(value, entry) => `${value}: ${entry.payload.value}`}
                  />
                </>
              ) : (
                <>
                  <Tooltip
                    contentStyle={{ backgroundColor: '#FFEE8C', borderColor: colors[0] }}
                  />
                  <Legend
                    verticalAlign="bottom"
                    wrapperStyle={{ color: 'rgba(255,255,255,0.8)' }}
                  />
                </>
              )}
            </PieChart>
          </ResponsiveContainer>

          {/* Centered total */}
          <Box
            component="div"
            sx={{
              position: 'absolute',
              top: '50%',
              left: '50%',
              transform: 'translate(-50%, -50%)',
              pointerEvents: 'none'
            }}
          >
            <Typography variant="h4" align="center" sx={{ color: colors[0], fontWeight: 'bold' }}>
              {total}
            </Typography>
          </Box>
        </Box>
      </CardContent>
    </Card>
  );
}

// âœ… Custom tooltip only used for "Asia-Pacific"
const CustomTooltip = ({ active, payload }) => {
  if (active && payload && payload.length > 0) {
    const data = payload[0].payload;

    return (
      <Box
        sx={{
          bgcolor: '#FFEE8C',
          p: 2,
          border: '1px solid #FFC107',
          borderRadius: 1,
          color: '#000',
          minWidth: 120
        }}
      >
        <Typography variant="subtitle2" sx={{ color: '#000' }}>
          <strong>{data.name}</strong>
        </Typography>
        <Typography variant="body2" sx={{ color: '#000' }}>Total: {data.value}</Typography>

        {data.emp !== undefined && (
          <Typography variant="body2" sx={{ color: '#000' }}>Employees: {data.emp}</Typography>
        )}
        {data.cont !== undefined && (
          <Typography variant="body2" sx={{ color: '#000' }}>Contractors: {data.cont}</Typography>
        )}
      </Box>
    );
  }

  return null;
};

const cardStyle = borderColor => ({
  border: `1px solid ${borderColor}`,
  borderRadius: 2,
  bgcolor: 'rgba(0,0,0,0.4)',
  overflow: 'hidden',
  transition: 'transform 0.3s, box-shadow 0.3s',
  '&:hover': {
    transform: 'scale(1.02)',
    boxShadow: '0 4px 12px rgba(0,0,0,0.7)'
  }
});