// Add this at the top of your script.js file
const offlineTimestamps = {}; // Track when devices go offline

// Then modify the updateDetails function to track offline timestamps
function updateDetails(data) {
    const detailsContainer = document.getElementById("device-details");
    // ... existing code ...

    fetch("http://localhost:80/api/region/devices/status")
        .then((response) => response.json())
        .then((realTimeStatus) => {
            console.log("Live Status Data:", realTimeStatus);
            
            // Update offline timestamps
            const currentTime = new Date().getTime();
            for (const [ip, status] of Object.entries(realTimeStatus)) {
                if (status.toLowerCase() === "offline") {
                    if (!offlineTimestamps[ip]) {
                        offlineTimestamps[ip] = currentTime; // Record first offline time
                    }
                } else {
                    delete offlineTimestamps[ip]; // Remove if device comes back online
                }
            }

            // ... rest of the existing code ...
        })
        .catch((error) => {
            console.error("Error fetching real-time device status:", error);
            detailsContainer.innerHTML = "<p>Failed to load device details.</p>";
        });
}









function filterDevices() {
    const selectedType = deviceFilter.value;
    const selectedStatus = document.querySelector(".status-filter.active")?.dataset.status || "all";
    const selectedCity = cityFilter.value;
    const searchTerm = document.getElementById("device-search").value.toLowerCase();
    
    const currentTime = new Date().getTime();
    const twoMinutesInMs = 2 * 60 * 1000; // 2 minutes in milliseconds

    detailsContainer.innerHTML = "";

    const filteredDevices = allDevices.filter((device) => {
        const ip = device.getAttribute("data-ip");
        const isOffline = device.dataset.status === "offline";
        const offlineDuration = isOffline ? currentTime - (offlineTimestamps[ip] || currentTime) : 0;
        
        // For offline devices, only show if offline for 2+ minutes
        const showOfflineDevice = !isOffline || offlineDuration >= twoMinutesInMs;
        
        return (
            (selectedType === "all" || device.dataset.type === selectedType) &&
            (selectedStatus === "all" || 
                (device.dataset.status === selectedStatus && showOfflineDevice)) &&
            (selectedCity === "all" || device.dataset.city === selectedCity) &&
            (!searchTerm || device.innerText.toLowerCase().includes(searchTerm))
        );
    });

    filteredDevices.forEach((deviceCard) => {
        detailsContainer.appendChild(deviceCard);
    });

    // ... rest of the existing filterDevices function ...
}









function pingAllDevices(regionName) {
    let details = latestDetails;
    if (!details || !details.details) return;

    fetch("http://localhost/api/devices/history")
        .then(response => response.json())
        .then(historyData => {
            const currentTime = new Date().getTime();
            let statusChanged = false;
            
            for (const [key, devices] of Object.entries(details.details)) {
                if (!Array.isArray(devices) || devices.length === 0) continue;
                
                devices.forEach((device) => {
                    const ip = device.ip_address || "N/A";
                    const card = document.querySelector(`[data-ip="${ip}"]`);
                    if (!card) return;

                    // Determine new status
                    const historyArray = historyData[ip];
                    let newStatus = (device.status || "offline").toLowerCase();
                    if (Array.isArray(historyArray) && historyArray.length > 0) {
                        const latestEntry = historyArray[historyArray.length - 1];
                        newStatus = (latestEntry.status || "offline").toLowerCase();
                    }

                    // Update offline timestamp if status changed to offline
                    if (newStatus === "offline" && card.dataset.status !== "offline") {
                        offlineTimestamps[ip] = currentTime;
                    } else if (newStatus === "online") {
                        delete offlineTimestamps[ip];
                    }

                    // ... rest of the existing pingAllDevices code ...
                });
            }
            
            // ... rest of the existing pingAllDevices code ...
        })
        .catch(error => {
            console.error("Error fetching device history:", error);
        });
}







