
const puneBreakdown = useMemo(() => {
  const breakdown = { Employee: 0, Contractor: 0, Visitor: 0, "Property Management": 0, "Temp Badge": 0 };
  for (const person of data?.details || []) {
    if (person.PartitionName2 === "Pune" && person.PersonnelType) {
      if (breakdown[person.PersonnelType] !== undefined) {
        breakdown[person.PersonnelType]++;
      }
    }
  }
  const total = Object.values(breakdown).reduce((sum, val) => sum + val, 0);
  return { Pune: { ...breakdown, Total: total } };
}, [data?.details]);





...

<Tooltip
  contentStyle={{ backgroundColor: '#FFD666', borderColor: lineColor, padding: 8 }}
  content={({ active, payload, label }) => {
    if (!active || !payload || !payload.length) return null;
    const datum = payload[0].payload;

    // Match region key based on bar name (like "Podium Floor", "2nd Floor", etc.)
    const matchedRegion = Object.keys(breakdownMap).find(region =>
      label.toLowerCase().includes(region.toLowerCase())
    );

    const breakdown = breakdownMap[matchedRegion];

    return (
      <div style={{
        backgroundColor: '#FFD666',
        border: `1px solid ${lineColor}`,
        borderRadius: 4,
        padding: 8,
      }}>
        <div style={{ fontWeight: 700, marginBottom: 4 }}>{label}</div>
        <div>Headcount: {datum.headcount}</div>
        <div>Usage %: {datum.percentage}%</div>
        <div>Seat Capacity: {datum.capacity}</div>

        {breakdown && (
          <>
            <hr style={{ margin: '6px 0', borderColor: '#ccc' }} />
            <div><strong>Breakdown:</strong></div>
            {Object.entries(breakdown).map(([k, v]) => (
              <div key={k}>{k}: {v}</div>
            ))}
          </>
        )}
      </div>
    );
  }}
/>