


import React, { useEffect, useState } from "react";
import {
  Container,
  Box,
  Typography,
  Button,
  CircularProgress,
} from "@mui/material";
import { useParams, useNavigate } from "react-router-dom";

import SummaryCard from "../components/SummaryCard";
import ChartCard from "../components/ChartCard";
import Header from "../components/Header";
import Footer from "../components/Footer";
import LoadingSpinner from "../components/LoadingSpinner";

import { fetchLiveSummary, fetchHistory } from "../api/occupancy.service";
import { lookupFloor } from "../utils/floorLookup"; // This is correct

import buildingCapacities from "../data/buildingCapacities";

import GroupIcon from "@mui/icons-material/Group";
import TrackChangesIcon from "@mui/icons-material/TrackChanges";
import PeopleIcon from "@mui/icons-material/People";
import BusinessCenterIcon from "@mui/icons-material/BusinessCenter";

export default function PartitionDetail() {
  const { partition } = useParams();
  const navigate = useNavigate();

  const [liveSummary, setLiveSummary] = useState(null);
  const [history, setHistory] = useState(null);
  const [historyLoading, setHistoryLoading] = useState(true);
  const [lastUpdate, setLastUpdate] = useState("");

  // Auto‐refresh live summary
  useEffect(() => {
    let timer;
    async function loadLive() {
      const json = await fetchLiveSummary();
      setLiveSummary(json);
      setLastUpdate(new Date().toLocaleTimeString());
    }
    loadLive();
    timer = setInterval(loadLive, 1000);
    return () => clearInterval(timer);
  }, [partition]);

  // Load historical summary once
  useEffect(() => {
    setHistoryLoading(true);
    fetchHistory(partition).then((json) => {
      setHistory(json);
      setHistoryLoading(false);
    });
  }, [partition]);

  if (!liveSummary || !history) return <LoadingSpinner />;

  // Totals for cards
  const lastDay = history.summaryByDate.at(-1);
  const partToday = lastDay.region;
  const live = liveSummary.realtime[partition] || {
    total: 0,
    Employee: 0,
    Contractor: 0,
    TempBadge: 0,
    floors: {},
  };

  // Build floorEntries with capacity
  const floorEntries = Object.entries(live.floors).map(([floor, cnt]) => {
    const name     = floor.trim();
    const capacity = buildingCapacities[name] ?? 0;
    const pct      = capacity ? Math.round((cnt / capacity) * 100) : 0;

    return {
      name,
      Headcount: cnt,
      Capacity:  capacity,
      breakdown: {
        Headcount: cnt,
        'Total Seat': capacity,
        Usage: `${pct}%`,
      },
    };
  });

  return (
    <>
      <Header />

      <Box component="main" sx={{ pt: 1, pb: 1 }}>
        <Container maxWidth={false} disableGutters>
          {/* Back button */}
          <Box display="flex" alignItems="center" mb={1} sx={{ px: "20px" }}>
            <Button size="small" onClick={() => navigate(-1)}>
              ← Back
            </Button>
          </Box>

          {/* Six‐card partition summary */}
          <Box display="flex" flexWrap="wrap" gap={1} mb={2}>
  {[
    {
      title: "Today's Total Headcount",
      value: historyLoading ? <CircularProgress size={20} /> : partToday.total,
      icon: <i className="fa-solid fa-users" style={{ color: '#E57373', fontSize: 25 }} />,
      border: '#FFD666'
    },
    {
      title: "Today's Employees Count",
      value: historyLoading ? <CircularProgress size={20} /> : partToday.Employee,
      icon: <i className="bi bi-people" style={{ color: '#81C784', fontSize: 25 }} />,
      border: '#81C784'
    },
    {
      title: "Today's Contractors Count",
      value: historyLoading ? <CircularProgress size={20} /> : partToday.Contractor,
      icon: <i className="fa-solid fa-circle-user" style={{ color: '#64B5F6', fontSize: 25 }} />,
      border: '#FFE599'
    },
    {
      title: "Realtime Headcount",
      value: live.total,
      icon: <i className="fa-solid fa-users" style={{ color: '#BA68C8', fontSize: 25 }} />,
      border: '#FFF2CC'
    },
    {
      title: "Realtime Employees Count",
      value: live.Employee,
      icon: <i className="bi bi-people" style={{ color: '#FFB74D', fontSize: 25 }} />,
      border: '#FFD666'
    },
    {
      title: "Realtime Contractors Count",
      value: live.Contractor,
      icon: <i className="fa-solid fa-circle-user" style={{ color: '#4DB6AC', fontSize: 25 }} />,
      border: '#FFE599'
    }
  ].map(card => (
    <Box key={card.title} sx={{ flex: '1 1 calc(16.66% - 8px)' }}>
      <SummaryCard
        title={card.title}
        total={card.value}
        stats={[]}
        icon={card.icon}
        sx={{
          height: 140,
          border: `2px solid ${card.border}`
        }}
      />
    </Box>
  ))}
</Box>

          {/* Floor‐capacity chart */}
          <Box mb={4} sx={{ 
            px: "20px", 
            p: 2, 
            border: "2px solid #FFC107",
            background: 'rgba(0,0,0,0.4)'
          }}>
            <Box display="flex" justifyContent="space-between" alignItems="center" mb={1}>
              <Typography variant="h6" sx={{ color: '#FFC107' }}>
                Live Floor Headcount against Occupancy
              </Typography>
              <Typography variant="body2" sx={{ color: '#FFC107' }}>
                Last updated: {lastUpdate}
              </Typography>
            </Box>

            <ChartCard
              data={floorEntries}
              dataKey="Headcount"
              chartHeight={320}
              colors={{ head: "#28B463", cap: "#FDDA0D" }}
              axisProps={{
                xAxis: { tick: { fill: "#fff" } },
                yAxis: { tick: { fill: "#fff" } },
              }}
            />
          </Box>
        </Container>
      </Box>

      <Footer />
    </>
  );
}
















............
// src/components/MapChart.jsx
import React, { useState, useEffect } from 'react';
import {
  ComposableMap,
  Geographies,
  Geography,
  Marker,
  ZoomableGroup,
} from 'react-simple-maps';
import { useTheme } from '@mui/material/styles';
import Box from '@mui/material/Box';
import IconButton from '@mui/material/IconButton';
import AddIcon from '@mui/icons-material/Add';
import RemoveIcon from '@mui/icons-material/Remove';

const geoUrl = '/world-110m.json';

const apacList = [
  { name: 'Pune, India', coords: [73.8567, 18.5204], url: 'http://10.199.22.57:3000/partition/Pune' },
  { name: 'Quezon City, Philippines', coords: [121.0509, 14.6760], url: 'http://10.199.22.57:3000/partition/Quezon%20City' },
  { name: 'Tokyo, Japan', coords: [139.6917, 35.6895], url: 'http://10.199.22.57:3000/partition/JP.Tokyo' },
  { name: 'Taguig City, Philippines', coords: [121.0437, 14.5547], url: 'http://10.199.22.57:3000/partition/Taguig%20City' },
  { name: 'Kuala Lumpur, Malaysia', coords: [101.6869, 3.1390], url: 'http://10.199.22.57:3000/partition/MY.Kuala%20Lumpur' },
];

const lacaList = [
  { name: 'San José, Costa Rica', coords: [-84.0907, 9.9281], url: 'http://10.199.22.57:3003/partition/CR.Costa%20Rica%20Partition' },
  { name: 'Mexico City, Mexico', coords: [-99.1332, 19.4326], url: 'http://10.199.22.57:3003/partition/MX.Mexico%20City' },
  { name: 'Buenos Aires, Argentina', coords: [-58.3816, -34.6037], url: 'http://10.199.22.57:3003/partition/AR.Cordoba' },
  { name: 'Panama City, Panama', coords: [-79.5167, 8.9833], url: 'http://10.199.22.57:3003/partition/PA.Panama%20City' },
  { name: 'Lima, Peru', coords: [-77.0428, -12.0464], url: 'http://10.199.22.57:3003/partition/PE.Lima' },
  { name: 'Brasília, Brazil', coords: [-47.8825, -15.7942], url: 'http://10.199.22.57:3003/partition/BR.Sao%20Paulo' },
];

const emeaList = [
  { name: 'Dubai, UAE', coords: [55.2708, 25.2048], url: 'http://10.199.22.57:3001/partition/DU.Abu%20Dhab' },
  { name: 'London, UK', coords: [-0.1278, 51.5074], url: 'http://10.199.22.57:3001/partition/UK.London' },
  { name: 'Dublin, Ireland', coords: [-6.2603, 53.3498], url: 'http://10.199.22.57:3001/partition/IE.Dublin' },
  { name: 'Moscow, Russia', coords: [37.6173, 55.7558], url: 'http://10.199.22.57:3001/partition/RU.Moscow' },
  { name: 'Casablanca, Morocco', coords: [-7.5898, 33.5731], url: 'http://10.199.22.57:3001/partition/MA.Casablanca' },
  { name: 'Vilnius, Lithuania', coords: [25.2797, 54.6872], url: 'http://10.199.22.57:3001/partition/LT.Vilnius' },
];

const namerList = [
  { name: 'Denver, USA', coords: [-104.9903, 39.7392], url: 'http://10.199.22.57:3002/partition/US.CO.OBS' },
  { name: 'New York, USA', coords: [-74.0060, 40.7128], url: 'http://10.199.22.57:3002/partition/US.NYC' },
  { name: 'Miami, USA', coords: [-80.1918, 25.7617], url: 'http://10.199.22.57:3002/partition/US.FL.Miami' },
  { name: 'Austin, USA', coords: [-97.7431, 30.2672], url: 'http://10.199.22.57:3002/partition/USA%2FCanada%20Default' },
];

const REGION_COUNTRIES = {
  global: [...apacList, ...emeaList, ...lacaList, ...namerList],
  apac: apacList,
  emea: emeaList,
  laca: lacaList,
  namer: namerList,
};

const regionOrder = ['global', 'apac', 'emea', 'laca', 'namer'];
function getColor(region, palette) {
  return palette[regionOrder.indexOf(region) % palette.length];
}

// For each “secondary” city, shift south by 1° & only show on hover
const SECONDARY_OFFSETS = {
  'Taguig City, Philippines': [0, -1],
  'Panama City, Panama': [0, -1],
  'Dublin, Ireland': [0, -1],
  'Moscow, Russia': [0, -1],
};

export default function MapChart({ selected = 'global', onClickSite, initialZoom = 5, }) {
  const theme = useTheme();
  const brands = theme.palette.brand.colors;

  // Zoom & center
  // const [zoom, setZoom] = useState();

  // Zoom & center
  // Use a ref to know if we’re mounting for the first time
  const firstMount = React.useRef(true);
  const [zoom, setZoom] = useState(initialZoom);


  const [center, setCenter] = useState([0, 20]);
  useEffect(() => {


    // recenter every time region changes
    if (selected === 'global') {
      setCenter([0, 13]);
      // only reset zoom on first mount if you want; otherwise keep whatever zoom is
      if (firstMount.current) {
        setZoom(initialZoom);
        firstMount.current = false;
      }
    } else {

      const list = REGION_COUNTRIES[selected] || [];
      if (list.length) {
        setCenter(list[0].coords);
        setZoom(selected === 'apac' || selected === 'emea' ? 2 : 3);
      }
    }
  }, [selected]);

  const handleZoomIn = () => setZoom(z => Math.min(z * 1.9, 10));
  const handleZoomOut = () => setZoom(z => Math.max(z / 1.5, 1));

  // Build markers with label / tooltip behavior
  const markers = REGION_COUNTRIES[selected].map((m, idx) => {
    const [city] = m.name.split(',');
    const isSecondary = SECONDARY_OFFSETS[m.name] !== undefined;
    const offset = SECONDARY_OFFSETS[m.name] || [0, 0];
    const coords = isSecondary
      ? [m.coords[0] + offset[0], m.coords[1] + offset[1]]
      : m.coords;

    return {
      name: city.trim(),
      coords,
      color: brands[idx % brands.length],
      showLabel: !isSecondary,
      tooltip: isSecondary ? city.trim() : null,
      url: m.url, // ✅ Include URL from the data
    };
  });

  return (
    <Box sx={{ position: 'relative', width: '100%', height: '100%' }}>
      {/* Zoom Controls */}
      <Box
        sx={{
          position: 'absolute',
          top: 8,
          right: 8,
          display: 'flex',
          flexDirection: 'column',
          zIndex: 10,
        }}
      >
        <IconButton size="small" onClick={handleZoomIn}>
          <AddIcon fontSize="small" />
        </IconButton>
        <IconButton size="small" onClick={handleZoomOut}>
          <RemoveIcon fontSize="small" />
        </IconButton>
      </Box>

      <ComposableMap
        projectionConfig={{ rotate: [-10, 0, 0], scale: 150 }}
        style={{
          width: '100%',
          height: '100%',

          // border: '1px solid #d0d0d0', // professional border
          borderRadius: '12px',
          boxShadow: '0 4px 20px rgba(0, 0, 0, 0.1)',
        }}
      >
        <ZoomableGroup center={center} zoom={zoom}>
          {/* Countries */}
          <Geographies geography={geoUrl}>
            {({ geographies }) =>
              geographies.map(geo => {
                const name = geo.properties.NAME;
                const inRegion = REGION_COUNTRIES[selected].some(
                  c => c.name.split(',').pop().trim() === name
                );
                return (
                  <Geography
                    key={geo.rsmKey}
                    geography={geo}
                    fill={
                      inRegion
                        ? getColor(selected, brands)
                        : theme.palette.grey[900]
                    }
                    stroke={theme.palette.grey[700]}
                    strokeWidth={0.5}
                    style={{ default: { outline: 'none' } }}
                  />
                );
              })
            }
          </Geographies>

          {/* Markers */}
          {/* {markers.map((m, i) => {
            const r = 1 * zoom;
            return (
              <Marker key={i} coordinates={m.coords} onClick={() => onClickSite(selected)}>
                <svg
                  width={4 * zoom}
                  height={4 * zoom}
                  viewBox="0 0 16 16"
                  fill={m.color}
                  xmlns="http://www.w3.org/2000/svg"
                  style={{ transform: 'translate(-8px, -16px)' }}
                >
                  <path d="M8 0a5 5 0 0 0-5 5c0 4.25 5 11 5 11s5-6.75 5-11a5 5 0 0 0-5-5zm0 7a2 2 0 1 1 0-4 2 2 0 0 1 0 4z" />
                  {m.tooltip && <title>{m.tooltip}</title>}
                </svg>

                {m.showLabel && (
                  <text
                    textAnchor="middle"
                    y={-12 * zoom} // pushes text farther above
                    fill={m.color}
                    fontSize={3 * zoom}
                    fontWeight="bold"
                    style={{
                      paintOrder: 'stroke', // ensures contrast with background
                      // stroke: 'white',
                      strokeWidth: 1,
                      strokeLinejoin: 'round',
                    }}
                  >
                    {m.name}
                  </text>
                )}
              </Marker>
            );
          })} */}



          {markers.map((m, i) => {
            const r = 1 * zoom;
            return (
              <Marker
                key={i}
                coordinates={m.coords}
                onClick={() => {
                  if (m.url) {
                    window.location.href=m.url; // ✅ Use URL from data
                  }
                }}
                style={{ cursor: 'pointer' }}
              >
                <svg
                  width={5 * zoom}
                  height={5 * zoom}
                  viewBox="0 0 16 16"
                  fill={m.color}
                  xmlns="http://www.w3.org/2000/svg"
                  style={{ transform: 'translate(-8px, -16px)', cursor: 'pointer' }}
                >
                  <path d="M8 0a5 5 0 0 0-5 5c0 4.25 5 11 5 11s5-6.75 5-11a5 5 0 0 0-5-5zm0 7a2 2 0 1 1 0-4 2 2 0 0 1 0 4z" />
                  {m.tooltip && <title>{m.tooltip}</title>}
                </svg>

                {m.showLabel && (
                  <text
                    textAnchor="middle"
                    y={-12 * zoom}
                    fill={m.color}
                    fontSize={5 * zoom}
                    fontWeight="bold"
                    style={{
                      paintOrder: 'stroke',
                      strokeWidth: 1,
                      strokeLinejoin: 'round',
                      cursor: 'pointer', // Ensure text also shows pointer
                    }}
                  >
                    {m.name}
                  </text>
                )}
              </Marker>
            );
          })}


        </ZoomableGroup>
      </ComposableMap>
    </Box>
  );
}



