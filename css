<Box textAlign="center">
  {tab === 4 ? (
    // HeadCount tab: show "Navigate To" button
    <Button
      variant="contained"
      size="large"
      onClick={handleGenerate}
      disabled={!region || loading}
      startIcon={loading ? <CircularProgress size={20} /> : null}
      sx={{
        backgroundColor: '#FFCC00',
        color: 'black',
        fontWeight: 'bold',
        px: 4,
        '&:hover': {
          backgroundColor: '#f4d03f',
        },
      }}
    >
      {loading ? 'Loading…' : 'Navigate To'}
    </Button>
  ) : (
    // Other tabs: show "Export to Excel" button
    <Button
      variant="contained"
      size="large"
      onClick={handleGenerate}
      disabled={disabled}
      startIcon={loading ? <CircularProgress size={20} /> : null}
      sx={{
        backgroundColor: '#FFCC00',
        color: 'black',
        fontWeight: 'bold',
        px: 4,
        '&:hover': {
          backgroundColor: '#f4d03f',
        },
      }}
    >
      {loading ? 'Generating…' : 'Export to Excel'}
    </Button>
  )}
</Box>






{/* From Date */}
{tab !== 4 && (
  <Box sx={{ position: 'relative' }}>
    <TextField
      label={tab === 0 ? 'From Date' : 'Start Date'}
      value={from ? from.toLocaleDateString() : ''}
      readOnly
      onClick={() => setShowFromCal(true)}
      sx={{
        '& .MuiOutlinedInput-root': {
          '& fieldset': { borderColor: '#FFF' },
          '&:hover fieldset': { borderColor: '#FFF' }
        }
      }}
    />
    {showFromCal && (
      <StaticDatePicker
        displayStaticWrapperAs="desktop"
        value={from}
        onChange={(newValue) => setFrom(newValue)}
        onAccept={() => setShowFromCal(false)}
        onClose={() => setShowFromCal(false)}
        renderInput={(params) => <TextField {...params} />}
      />
    )}
  </Box>
)}

{/* To Date */}
{tab !== 4 && (
  <Box sx={{ position: 'relative' }}>
    <TextField
      label={tab === 0 ? 'To Date' : 'End Date'}
      value={to ? to.toLocaleDateString() : ''}
      readOnly
      onClick={() => setShowToCal(true)}
      sx={{
        '& .MuiOutlinedInput-root': {
          '& fieldset': { borderColor: '#FFF' },
          '&:hover fieldset': { borderColor: '#FFF' }
        }
      }}
    />
    {showToCal && (
      <StaticDatePicker
        displayStaticWrapperAs="desktop"
        value={to}
        onChange={(newValue) => setTo(newValue)}
        onAccept={() => setShowToCal(false)}
        onClose={() => setShowToCal(false)}
        renderInput={(params) => <TextField {...params} />}
      />
    )}
  </Box>
)}









const disabled = loading
  || !region
  || (tab === 0 && (!from || !to || selectedEmps.length === 0))
  || ((tab === 1 || tab === 3) && (!from || !to))
  || (tab === 2 && !from);
// tab === 4 (HeadCount) is intentionally excluded from date checks