
function displayDeviceHistory(ip, name, category, hist) {
  const header = document.getElementById('device-history-header');
  const container = document.getElementById('device-history');
  header.innerHTML = `<h3>${name} (${ip})</h3><hr>`;

  if (!hist.length) {
    container.innerHTML = '<p>No downtime â‰¥5 min in history.</p>';
    return;
  }

  let html = `<table border="1" style="width:100%;text-align:center;border-collapse:collapse;">
    <thead><tr>
      <th>Sr.No</th><th>Date</th><th>Day</th><th>Time</th><th>Status</th><th>Duration</th>
    </tr></thead><tbody>`;

  let idx = 1;
  let lastOff = null;

  hist.forEach(e => {
    const t = new Date(e.timestamp);
    const date = t.toLocaleDateString();
    const day = t.toLocaleString('en-US', { weekday: 'long' });
    const time = t.toLocaleTimeString();
    let dur = '-';

    if (e.status === 'Offline') {
      // Only set lastOff if it's null (start of a new Offline period)
      if (!lastOff) {
        lastOff = e.timestamp;
        html += `<tr>
          <td>${idx++}</td><td>${date}</td><td>${day}</td><td>${time}</td>
          <td style="color:red">${e.status}</td><td>${dur}</td>
        </tr>`;
      }
      // If already Offline, ignore duplicate entries until Online appears
    } else if (e.status === 'Online') {
      if (lastOff) {
        const diff = (new Date(e.timestamp) - new Date(lastOff)) / 1000;
        dur = formatDuration(diff);
        const offTime = new Date(lastOff);
        const offDate = offTime.toLocaleDateString();
        const offDay = offTime.toLocaleString('en-US', { weekday: 'long' });
        const offClock = offTime.toLocaleTimeString();

        // Output Offline row with calculated duration
        html += `<tr>
          <td>${idx++}</td><td>${offDate}</td><td>${offDay}</td><td>${offClock}</td>
          <td style="color:red">Offline</td><td>${dur}</td>
        </tr>`;

        // Output Online row
        html += `<tr>
          <td>${idx++}</td><td>${date}</td><td>${day}</td><td>${time}</td>
          <td style="color:green">${e.status}</td><td>${formatDuration(0)}</td>
        </tr>`;

        lastOff = null; // Reset after pairing
      } else {
        // Online entry without a preceding Offline
        html += `<tr>
          <td>${idx++}</td><td>${date}</td><td>${day}</td><td>${time}</td>
          <td style="color:green">${e.status}</td><td>${dur}</td>
        </tr>`;
      }
    }
  });

  // If history ends with unmatched Offline (ongoing)
  if (lastOff) {
    const t = new Date(lastOff);
    const date = t.toLocaleDateString();
    const day = t.toLocaleString('en-US', { weekday: 'long' });
    const time = t.toLocaleTimeString();
    const now = Date.now();
    const dur = formatDuration((now - new Date(lastOff)) / 1000);

    html += `<tr>
      <td>${idx++}</td><td>${date}</td><td>${day}</td><td>${time}</td>
      <td style="color:red">Offline</td><td>${dur}</td>
    </tr>`;
  }

  html += `</tbody></table>`;
  container.innerHTML = `<div class="scrollable-history-table">${html}</div>`;
}
