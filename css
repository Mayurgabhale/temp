// AFTER:
const pieData = summaryItems
  .filter(item => cities.includes(item.label))
  .map(item => ({
    name: item.label,
    value: item.total,
    Employee: item.emp,       // ← add this
    Contractor: item.cont     // ← and this
  }));









import { Tooltip, Legend } from 'recharts';

// …

<Pie
  data={renderData}
  dataKey="value"
  nameKey="name"
  innerRadius={innerRadius}
  outerRadius={outerRadius}
  paddingAngle={4}
  isAnimationActive
  animationDuration={animationDuration}
  label={({ percent }) => `${(percent * 100).toFixed(0)}%`}
  labelLine={false}
>
  {renderData.map((_, i) => (
    <Cell key={i} fill={colors[i % colors.length]} />
  ))}
</Pie>

// ← custom content renderer:
<Tooltip content={<CustomTooltip />} />

// ← show “Name: Total” in the legend:
<Legend
  verticalAlign="bottom"
  formatter={(value, entry) => `${value}: ${entry.payload.value}`}
/>






const CustomTooltip = ({ active, payload }) => {
  if (!active || !payload || !payload.length) return null;
  const d = payload[0].payload;
  return (
    <Box sx={{ bgcolor: '#FFEE8C', p: 2, border: '1px solid #FFC107', borderRadius: 1 }}>
      <Typography variant="subtitle2"><strong>{d.name}</strong></Typography>
      <Typography>Total: {d.value}</Typography>
      {typeof d.Employee === 'number' && <Typography>Employees: {d.Employee}</Typography>}
      {typeof d.Contractor === 'number' && <Typography>Contractors: {d.Contractor}</Typography>}
    </Box>
  );
};