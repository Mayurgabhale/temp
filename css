// src/components/PieChartCard.jsx

import React from 'react';
import { Card, CardContent, Typography, Box } from '@mui/material';
import { PieChart, Pie, Cell, Tooltip, Legend, ResponsiveContainer } from 'recharts';



export default function PieChartCard({
  title,
  data,
  colors = ['#FFC107', '#E0E0E0'],
  height = 300,
  showZeroSlice = false,
  animationDuration = 1500,
  noDataMessage = 'No realtime data',
  totalSeats = 0,
}) {


  const total = data.reduce((sum, d) => sum + d.value, 0);

  if (total === 0 && !showZeroSlice) {
    return (
      <Card sx={cardStyle(colors[0])}>
        <CardContent>
          <Typography variant="subtitle1" align="center" color="text.primary">
            {title}
          </Typography>
          <Typography variant="body2" align="center" sx={{ mt:4, color:'text.secondary' }}>
            {noDataMessage}
          </Typography>
        </CardContent>
      </Card>
    );
  }

  // If zero, and showZeroSlice==true, show single “Available” slice
  const renderData = (total === 0 && showZeroSlice)
    ? [{ name: 'Available', value: data[1]?.value || 0 }]
    : data;

  return (
    <Card sx={cardStyle(colors[0])}>
      <CardContent sx={{ p:1 }}>
        <Typography variant="subtitle1" align="center" color="text.primary">
          {title}
        </Typography>
        {/* <Box sx={{ width:'100%', height }}>
          <ResponsiveContainer>
            <PieChart> */}
        {/* wrap in relative container so we can overlay the total */}
        <Box sx={{ position: 'relative', width: '100%', height }}>
          <ResponsiveContainer>
            <PieChart>

              <Pie
                data={renderData}
                dataKey="value"
                nameKey="name"
                innerRadius={80}
                outerRadius={140}
                paddingAngle={4}
                isAnimationActive
                animationDuration={animationDuration}
              // show percent labels inside each slice
              label={({ percent }) => `${(percent * 100).toFixed(0)}%`}
              labelLine={false}

              >
                {renderData.map((_, i) => (
                  <Cell key={i} fill={colors[i % colors.length]} />
                ))}
              </Pie>
             <Tooltip content={<CustomTooltip />} />
              <Legend
                 verticalAlign="bottom"
                 wrapperStyle={{ color: 'rgba(18, 17, 17, 0.8)' }}
                 formatter={(value, entry) => `${value}: ${entry.payload.value}`}
               />
           
           
            {/* </PieChart>
            
          </ResponsiveContainer>
        </Box> */}

            </PieChart>
          </ResponsiveContainer>

          {/* centered total */}
          <Box
            component="div"
            sx={{
              position: 'absolute',
              top: '50%',
              left: '50%',
              transform: 'translate(-50%, -50%)',
              pointerEvents: 'none'
            }}
          >
            <Typography variant="h4" align="center" sx={{ color: colors[0], fontWeight: 'bold' }}>
              {total}
            </Typography>
            <Typography variant="caption" align="center" sx={{ color: 'rgba(255,255,255,0.7)' }}>
              </Typography>
              

            <Typography variant="caption" align="center" sx={{ color: 'rgba(255,255,255,0.7)' }}>
              {/* of {totalSeats} seats */}
            </Typography>



          </Box>
        </Box>

      </CardContent>
    </Card>
  );
}

const CustomTooltip = ({ active, payload }) => {
  if (active && payload && payload.length > 0) {
    const data = payload[0].payload;

    return (
      <Box
        sx={{
          bgcolor: '#FFEE8C',
          p: 2,
          border: '1px solid #FFC107',
          borderRadius: 1,
          color: '#000',
          minWidth: 120
        }}
      >
        <Typography variant="subtitle2" sx={{ color: '#000' }}>
          <strong>{data.name}</strong>
        </Typography>
        <Typography variant="body2" sx={{ color: '#000' }}>Total: {data.value}</Typography>

        {data.emp !== undefined && (
          <Typography variant="body2" sx={{ color: '#000' }}>Employees: {data.emp}</Typography>
        )}
        {data.cont !== undefined && (
          <Typography variant="body2" sx={{ color: '#000' }}>Contractors: {data.cont}</Typography>
        )}
      </Box>
    );
  }

  return null;
};

const cardStyle = borderColor => ({
  border: `1px solid ${borderColor}`,
  borderRadius: 2,
  bgcolor: 'rgba(0,0,0,0.4)',
  overflow: 'hidden',
  transition: 'transform 0.3s, box-shadow 0.3s',
  '&:hover': {
    transform: 'scale(1.02)',
    boxShadow: '0 4px 12px rgba(0,0,0,0.7)'
  }
});
...............

// src/pages/Dashboard.jsx

import React, { useEffect, useState } from 'react';
import { Container, Box, Typography, Skeleton, Fade } from '@mui/material';
import GroupIcon from '@mui/icons-material/Group';
import TrackChangesIcon from '@mui/icons-material/TrackChanges';
import PeopleIcon from '@mui/icons-material/People';
import BusinessCenterIcon from '@mui/icons-material/BusinessCenter';
import { useNavigate } from 'react-router-dom';

// Flags
import CostaRicaFlag from '../assets/flags/costa-rica.png';
import ArgentinaFlag from '../assets/flags/argentina.png';
import MexicoFlag from '../assets/flags/mexico.png';
import PeruFlag from '../assets/flags/peru.png';
import BrazilFlag from '../assets/flags/brazil.png';
import PanamaFlag from '../assets/flags/panama.png';

import Header from '../components/Header';
import SummaryCard from '../components/SummaryCard';
import { useLiveOccupancy } from '../hooks/useLiveOccupancy';
import { partitionList } from '../services/occupancy.service';
// import seatCapacities from '../data/seatCapacities';
import seatCapacities from '../data/seatCapacities';
import buildingCapacities from '../data/buildingCapacities';
import CompositeChartCard from '../components/CompositeChartCard';
import LineChartCard from '../components/LineChartCard';
import PieChartCard from '../components/PieChartCard';
import Footer from '../components/Footer';

const displayNameMap = {
  'CR.Costa Rica Partition': 'Costa Rica',
  'AR.Cordoba': 'Argentina',
  'MX.Mexico City': 'Mexico',
  'PE.Lima': 'Peru',
  'BR.Sao Paulo': 'Brazil',
  'PA.Panama City': 'Panama'
};


const colorsMap = {
  'CR.Costa Rica Partition': ['#FFD666', '#fcf3cf', '#2ecc71', '#ec7063', '#ec7063'],
  'AR.Cordoba': ['#FFE599', '#fcf3cf', '#2ecc71', '#ec7063'],
  'MX.Mexico City': ['#FFD666', '#fcf3cf', '#2ecc71', '#ec7063'],
  'PE.Lima': ['#FFF2CC', '#fcf3cf', '#2ecc71', '#ec7063'],
  'BR.Sao Paulo': ['#FFD666', '#fcf3cf', '#2ecc71', '#ec7063'],
  'PA.Panama City': ['#FFE599', '#fcf3cf', '#2ecc71', '#ec7063'],
};




const widgetMap = {
  'CR.Costa Rica Partition': 'composite',
  'AR.Cordoba': 'line',
  'BR.Sao Paulo': 'pie',
  'MX.Mexico City': 'pie',
  'PE.Lima': 'pie',
  'PA.Panama City': 'pie',
};


const palette15 = [
  '#FFC107', '#E91E63', '#4CAF50', '#FFEB3B', '#FFD666',
  '#D84315', '#3F51B5', '#9C27B0', '#00BCD4', '#8BC34A',
  '#FF9800', '#673AB7', '#009688', '#CDDC39', '#795548'
];

export default function Dashboard() {
  const { data, loading, error } = useLiveOccupancy(1000);
  const [lastUpdate, setLastUpdate] = useState('');
  const navigate = useNavigate();

  useEffect(() => {
    if (data) {
      setLastUpdate(new Date().toLocaleTimeString());
    }
  }, [data]);

  if (error) {
    return (
      <Box width="100vw%" py={4}>
        <Typography color="error" align="center">
          Error loading live data
        </Typography>
      </Box>
    );
  }

  const regions = data?.realtime || {};

const flagMap = {
  'CR.Costa Rica Partition': CostaRicaFlag,
  'AR.Cordoba': ArgentinaFlag,
  'MX.Mexico City': MexicoFlag,
  'PE.Lima': PeruFlag,
  'BR.Sao Paulo': BrazilFlag,
  'PA.Panama City': PanamaFlag,
};

const partitions = partitionList.map(name => {
  const key = Object.keys(regions).find(k => k.includes(name));
  const p = key ? regions[key] : {};
  return {
    name,
    total: p.total || 0,
    Employee: p.Employee || 0,
    Contractor: p.Contractor || 0,
    floors: p.floors || {},
    flag: flagMap[name], // ✅ Assign the correct flag here
  };
}).sort((a, b) => b.total - a.total);

  

  const todayTot = data?.today?.total ?? 0;
  const todayEmp = data?.today?.Employee ?? 0;
  const todayCont = data?.today?.Contractor ?? 0;
  const realtimeTot = partitions.reduce((sum, p) => sum + p.total, 0);
  const realtimeEmp = partitions.reduce((sum, p) => sum + p.Employee, 0);
  const realtimeCont = partitions.reduce((sum, p) => sum + p.Contractor, 0);

  const crPartition = partitions.find(p => p.name === 'CR.Costa Rica Partition');
  const arPartition = partitions.find(p => p.name === 'AR.Cordoba');
  const smallOnes = partitions.filter(p =>
    ['MX.Mexico City', 'BR.Sao Paulo', 'PE.Lima', 'PA.Panama City'].includes(p.name)
  );



  return (
    <>
      <Header />

      <Container
        maxWidth={false}
        disableGutters
        // sx={{ py: 3, px: 2, background: 'rgba(0, 0, 0, 0.93)' }}
        sx={{
          py: 0,
          px: 2,
          background: 'linear-gradient(135deg, #0f0f0f 0%, #1c1c1c 100%)',
          color: '#f5f5f5',
          // minHeight: '100vh'
        }}
      >

        {/* Last updated */}
        <Typography
          variant="caption"
          sx={{ color: 'white', mb: 1, opacity: data ? 1 : 0, transition: 'opacity 0.6s' }}
        >
          {/* Last updated: {lastUpdate} */}
        </Typography>


        {/* Top six summary cards */}
        <Box display="flex" flexWrap="wrap" gap={1} mb={1}>
          {[
            {
              title: "Today's Total Headcount",

              color: '#FFE599',
              value: todayTot,
              icon: <i className="fa-solid fa-users" style={{ fontSize: 25, color: '#FFB300' }} />,
              border: '#FFB300',

            },
            {
              title: "Today's Employees Count",
              value: todayEmp,
              icon: <i className="bi bi-people" style={{ fontSize: 25, color: '#EF5350' }} />,
              border: '#8BC34A'
            },
            {
              title: "Today's Contractors Count",
              value: todayCont,
              icon: <i className="fa-solid fa-circle-user" style={{ fontSize: 25, color: '#8BC34A' }} />,
              border: '#E57373'
            },
            {
              title: "Realtime Headcount",
              value: realtimeTot,
              icon: <i className="fa-solid fa-users" style={{ fontSize: 25, color: '#FFB300' }} />,
              border: '#FFD180'
            },
            {
              title: "Realtime Employees Count",
              value: realtimeEmp,
              icon: <i className="bi bi-people" style={{ fontSize: 25, color: '#EF5350' }} />,
              border: '#AED581'
            },
            {
              title: "Realtime Contractors Count",
              value: realtimeCont,
              icon: <i className="fa-solid fa-circle-user" style={{ fontSize: 25, color: '#8BC34A' }} />,
              border: '#EF5350'
            }
          ].map(c => (
            <Box key={c.title} sx={{ flex: '1 1 calc(16.66% - 8px)' }}>
              <SummaryCard
                title={c.title}
                total={c.value}
                stats={[]}
                icon={c.icon}
                sx={{ height: 140, border: `2px solid ${c.border}` }}
              />
            </Box>
          ))}
        </Box>


        {/* Partition cards */}


        {/* Region Cards */}
        <Box display="flex" flexWrap="wrap" gap={1} mb={3}>
          {loading
            ? <Skeleton variant="rectangular" width="90%" height={200} />
            :
            partitions.map((p, index) => (
              <Box
                key={p.name}
                sx={{ flex: '1 1 calc(16.66% - 8px)' }}
              >
                <SummaryCard
                  title={
                    <Typography
                      variant="subtitle1"
                      sx={{
                        fontWeight: 'bold',
                        color: '#FFC107',  // Change this to your desired color
                        fontSize: '1.3rem'
                      }}
                    >
                      {p.name.replace(/^.*\./, '')}
                    </Typography>
                  }
                  total={p.total}
                  stats={[
                    { label: 'Employees', value: p.Employee, color: '#40E0D0' },
                    { label: 'Contractors', value: p.Contractor, color: 'green' }
                  ]}
                  sx={{
                    width: '100%',
                    border: `2px solid ${palette15[index % palette15.length]}`
                  }}
                  icon={
                    <Box
                      component="img"
                      src={p.flag}
                      sx={{ width: 48, height: 32 }}
                    />
                  }
                />
              </Box>
            ))
          }

        </Box>

        {/* Partition detail widgets: 3 in one row */}
        {loading ? (
          <Skeleton variant="rectangular" width="100%" height={500} />
        ) : (
          <Box mt={4} display="flex" gap={2} justifyContent="space-between" flexWrap="wrap">

            {/* 1) Costa Rica composite */}
            <Box
              sx={{
                flex: '1 1 32%',
                minWidth: 280,
                border: '1px solid #FFE599',
                borderRadius: 2,
                boxShadow: '0 2px 6px rgba(0,0,0,0.5)',
                '&:hover': { transform: 'scale(1.02)' },
                overflow: 'hidden',
                transition: 'transform 0.3s'
              }}
            >
              {crPartition.total === 0
                ? <Typography align="center" sx={{ py: 4, color: 'white' }}>
                  No realtime employee data
                </Typography>
                : <CompositeChartCard
                  title="Costa Rica"
                  data={Object.entries(crPartition.floors).map(([f, c]) => ({
                    name: f.trim(), headcount: c,
                    // capacity: seatCapacities[`Costa Rica-${f.trim()}`]||0
                    capacity: buildingCapacities[f.trim()] || 0
                  }))}
                  barColor={palette15[0]}
                  lineColor={palette15[1]}
                  height={350}
                  animationDuration={1500}
                  animationEasing="ease-in-out"
                />
              }
            </Box>

            {/* 2) Argentina line */}
            <Box
              sx={{
                flex: '1 1 32%',
                minWidth: 280,
                border: '1px solid #FFE599',
                borderRadius: 2,
                boxShadow: '0 2px 6px rgba(0,0,0,0.5)',
                '&:hover': { transform: 'scale(1.02)' },
                overflow: 'hidden',
                transition: 'transform 0.3s'
              }}
            >
              {arPartition.total === 0
                ? <Typography align="center" sx={{ py: 4, color: 'white' }}>
                  No realtime employee data
                </Typography>
                : <LineChartCard
                  title="Argentina"
                  data={Object.entries(arPartition.floors).map(([f, c]) => ({
                    name: f.trim(), headcount: c,
                    capacity: seatCapacities[`Argentina-${f.trim()}`] || 0
                  }))}
                  totalCapacity={450}
                  lineColor1={palette15[2]}
                  lineColor2={palette15[3]}
                  height={350}
                  animationDuration={1500}
                  animationEasing="ease-in-out"
                />
              }
            </Box>

            {/* 3) Combined Pie */}
            <Box
              sx={{
                flex: '1 1 32%',
                minWidth: 280,
                border: '1px solid #FFE599',
                borderRadius: 2,
                boxShadow: '0 2px 6px rgba(0,0,0,0.5)',
                '&:hover': { transform: 'scale(1.02)' },
                overflow: 'hidden',
                transition: 'transform 0.3s'
              }}
            >
              
              <PieChartCard
                title="Latin America"
                data={smallOnes.map(p => ({
                  name: displayNameMap[p.name],
                  value: p.total
                }))}
                colors={[
                  palette15[4], palette15[5],
                  palette15[6], palette15[7]
                ]}
                height={350}
                showZeroSlice={true}
                animationDuration={1500}
                totalSeats={
                  smallOnes.reduce(
                    (sum, p) => sum + seatCapacities[displayNameMap[p.name]],
                    0
                  )
                }
              />
            </Box>

          </Box>
        )}
      </Container>

   <Footer />

     



    </>
  );
}



const widgetBoxStyle = borderColor => ({
  flex: '1 1 32%',
  minWidth: 280,
  border: `1px solid ${borderColor}`,
  borderRadius: 2,
  boxShadow: '0 2px 6px rgba(0,0,0,0.5)',
  overflow: 'hidden',
  transition: 'transform 0.3s',
  '&:hover': { transform: 'scale(1.02)' }
});

function NoData({ text }) {
  return (
    <Typography align="center" sx={{ py: 4, color: 'white' }}>
      No realtime employee data in {text}
    </Typography>
  );
}
