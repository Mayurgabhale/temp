// src/components/ChartCard.apac.jsx
import React, { useState } from 'react';
import { Card, CardContent, Typography, Box } from '@mui/material';
import {
  AreaChart, Area, XAxis, YAxis, Tooltip, ResponsiveContainer,
  CartesianGrid, Legend, Brush
} from 'recharts';
import dayjs from 'dayjs';

export default function ChartCardAPAC({
  data = [],
  dataKey = 'value',
  colors = { head: '#4CAF50', cap: '#A5D6A7' }, // âœ… APAC-green tones
  chartHeight = 300,
  title = ''
}) {
  const [hidden, setHidden] = useState({});

  if (!Array.isArray(data) || data.length === 0) {
    return (
      <Card>
        <CardContent>
          <Typography>No APAC data to display.</Typography>
        </CardContent>
      </Card>
    );
  }

  const handleLegend = o => {
    const key = o.dataKey;
    setHidden(h => ({ ...h, [key]: !h[key] }));
  };

  return (
    <Card>
      <CardContent>
        {title && <Typography variant="h6" gutterBottom>{title}</Typography>}
        <Box sx={{ width: '100%', height: chartHeight }}>
          <ResponsiveContainer>
            <AreaChart data={data} margin={{ top: 20, right: 30, left: 0, bottom: 20 }}>
              <defs>
                <linearGradient id="colorHead" x1="0" y1="0" x2="0" y2="1">
                  <stop offset="5%" stopColor={colors.head} stopOpacity={0.8} />
                  <stop offset="95%" stopColor={colors.head} stopOpacity={0} />
                </linearGradient>
              </defs>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis
                dataKey="name"
                tickFormatter={t =>
                  typeof t === 'number' ? dayjs(t).format('HH:mm:ss') : t
                }
              />
              <YAxis />
              <Tooltip />
              <Legend onClick={handleLegend} />
              <Area
                type="monotone"
                dataKey={dataKey}
                stroke={colors.head}
                fill="url(#colorHead)"
                hide={hidden[dataKey]}
              />
              <Brush dataKey="name" height={20} stroke={colors.head} />
            </AreaChart>
          </ResponsiveContainer>
        </Box>
      </CardContent>
    </Card>
  );
}




.......

// src/components/CompositeChartCard.apac.jsx

import React from 'react';
import { Card, CardContent, Typography, Box } from '@mui/material';
import {
  ComposedChart,
  Bar,
  Line,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  CartesianGrid,
  Legend,
  LabelList,
  Cell
} from 'recharts';

const GREEN_SCALE = [
  '#66BB6A', '#81C784', '#A5D6A7', '#C8E6C9', '#E8F5E9',
  '#66BB6A', '#81C784', '#A5D6A7', '#C8E6C9', '#E8F5E9',
  '#43A047', '#388E3C', '#2E7D32', '#1B5E20', '#4CAF50'
];

export default function CompositeChartCardAPAC({
  title,
  data,
  lineColor = '#4CAF50',
  height = 300,
  animationDuration = 1500,
  animationEasing = 'ease-in-out'
}) {
  if (!Array.isArray(data) || data.length === 0) {
    return (
      <Card sx={{ border: `1px solid ${lineColor}`, bgcolor: 'rgba(0,0,0,0.4)' }}>
        <CardContent>
          <Typography variant="subtitle1" align="center" color="text.secondary">
            {title}
          </Typography>
          <Typography variant="body2" align="center" sx={{ mt: 4 }}>
            No APAC real-time data
          </Typography>
        </CardContent>
      </Card>
    );
  }

  const enriched = data.map((d, i) => ({
    ...d,
    percentage: d.capacity ? Math.round(d.headcount / d.capacity * 100) : 0,
    _color: GREEN_SCALE[i % GREEN_SCALE.length]
  }));

  const totalHeadcount = enriched.reduce((sum, d) => sum + (d.headcount || 0), 0);
  const totalCapacity = enriched.reduce((sum, d) => sum + (d.capacity || 0), 0);
  const avgUsage = totalCapacity ? Math.round((totalHeadcount / totalCapacity) * 100) : 0;

  return (
    <Card sx={{
      borderRadius: 2,
      overflow: 'hidden',
      bgcolor: 'rgba(0,0,0,0.4)',
      transition: 'transform 0.3s, box-shadow 0.3s',
      '&:hover': {
        transform: 'scale(1.02)',
        boxShadow: '0 4px 12px rgba(0,0,0,0.7)'
      }
    }}>
      <CardContent sx={{ p: 1 }}>
        <Typography variant="subtitle1" align="center" gutterBottom sx={{ color: '#4CAF50' }}>
          {title}
        </Typography>

        <Box sx={{ width: '100%', height }}>
          <ResponsiveContainer>
            <ComposedChart data={enriched} margin={{ top: 10, right: 20, left: 0, bottom: 20 }}>
              <CartesianGrid strokeDasharray="3 3" stroke="rgba(255,255,255,0.1)" />

              <XAxis
                dataKey="name"
                tickLine={false}
                axisLine={false}
                stroke="rgba(255,255,255,0.6)"
                tickFormatter={(label) => {
                  const strLabel = String(label);
                  const match = strLabel.match(/\d+/);
                  const floorNum = parseInt(match?.[0], 10);
                  if (isNaN(floorNum)) return strLabel;

                  const suffix = (n) => {
                    if (n % 100 >= 11 && n % 100 <= 13) return `${n}th`;
                    switch (n % 10) {
                      case 1: return `${n}st`;
                      case 2: return `${n}nd`;
                      case 3: return `${n}rd`;
                      default: return `${n}th`;
                    }
                  };
                  return suffix(floorNum);
                }}
              />

              <YAxis yAxisId="left" tickLine={false} axisLine={false} stroke="rgba(255,255,255,0.6)" />
              <YAxis yAxisId="right" orientation="right" tickLine={false} axisLine={false} stroke="rgba(255,255,255,0.6)" domain={[0, 100]} tickFormatter={val => `${val}%`} />

              <Tooltip
                contentStyle={{ backgroundColor: '#A5D6A7', borderColor: lineColor, padding: 8 }}
                content={({ active, payload, label }) => {
                  if (!active || !payload || !payload.length) return null;
                  const datum = payload[0].payload;
                  return (
                    <div style={{
                      backgroundColor: '#A5D6A7',
                      border: `1px solid ${lineColor}`,
                      borderRadius: 4,
                      padding: 8,
                    }}>
                      <div style={{ fontWeight: 700, marginBottom: 4 }}>{label}</div>
                      <div>Headcount: {datum.headcount}</div>
                      <div>Usage %: {datum.percentage}%</div>
                      <div>Seat Capacity: {datum.capacity}</div>
                    </div>
                  );
                }}
              />

              <Bar yAxisId="left" dataKey="headcount" name="Headcount" barSize={700} isAnimationActive animationDuration={animationDuration} animationEasing={animationEasing}>
                {enriched.map((entry, idx) => (
                  <Cell key={`cell-${idx}`} fill={entry._color} />
                ))}
                <LabelList dataKey="headcount" position="top" style={{ fill: '#fff', fontSize: 15, fontWeight: 700 }} />
                <LabelList dataKey="percentage" position="inside" style={{ fill: '#1B5E20', fontSize: 14, fontWeight: 700 }} />
              </Bar>

              <Line yAxisId="right" type="monotone" dataKey="percentage" name="Usage %" stroke={lineColor} strokeWidth={2} dot={false} isAnimationActive animationDuration={animationDuration} animationEasing={animationEasing} />

              <Line yAxisId="left" type="monotone" name="Total Seats" stroke="#81C784" strokeDasharray="5 5" dot={false} isAnimationActive animationDuration={animationDuration} animationEasing={animationEasing} />
            </ComposedChart>
          </ResponsiveContainer>
        </Box>

        <Box sx={{ display: 'flex', justifyContent: 'center', gap: 4, alignItems: 'center', mb: 1, fontWeight: 'bold', fontSize: 16 }}>
          <Box sx={{ color: '#388E3C' }}>Total Headcount: {totalHeadcount}</Box>
          <Box sx={{ color: '#1B5E20' }}>Total Seats: {totalCapacity}</Box>
          <Box sx={{ color: '#FF7043' }}>Usage: {avgUsage}%</Box>
        </Box>
      </CardContent>
    </Card>
  );
}



....

// src/components/DataTable.apac.jsx

import React from 'react';
import {
  Table, TableHead, TableBody, TableRow, TableCell,
  TableContainer, Paper
} from '@mui/material';

export default function DataTableAPAC({ columns, rows }) {
  return (
    <TableContainer component={Paper} sx={{ mb: 2 }}>
      <Table size="small">
        <TableHead>
          <TableRow>
            {columns.map(c => (
              <TableCell
                key={c.field}
                sx={{
                  fontWeight: 'bold',
                  borderBottom: '2px solid #2E7D32', // APAC style: Green border
                  color: '#1B5E20'
                }}
              >
                {c.headerName}
              </TableCell>
            ))}
          </TableRow>
        </TableHead>
        <TableBody>
          {rows.map((r, i) => (
            <TableRow key={i}>
              {columns.map(c => (
                <TableCell key={c.field} sx={{ py: 0.5, borderBottom: '1px solid #A5D6A7' }}>
                  {r[c.field]}
                </TableCell>
              ))}
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </TableContainer>
  );
}


