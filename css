const partitions = useMemo(() => {
  return partitionList
    .map(name => {
      const key = Object.keys(regions).find(k => k.includes(name));
      const p = key && regions[key] ? regions[key] : {};
      return {
        name,
        total: p.total || 0,
        Employee: p.Employee || 0,
        Contractor: p.Contractor || 0,
        floors: p.floors || {},
        flag: flagMap[name] || null
      };
    })
    .sort((a, b) => b.total - a.total);
}, [regions]);








Compiled with problems:
Ã—
ERROR in ./src/pages/Dashboard.jsx
Module build failed (from ./node_modules/babel-loader/lib/index.js):
SyntaxError: C:\Users\W0024618\Desktop\apac-occupancy-frontend\src\pages\Dashboard.jsx: Unexpected token, expected "," (69:38)

  67 |       };
  68 |     })
> 69 |     .sort((a, b) => b.total - a.total);
     |                                       ^
  70 |     
  71 |   const todayTot = data?.today?.total || 0;
  72 |   const todayEmp = data?.today?.Employee || 0;
    at constructor (C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:367:19)
    at FlowParserMixin.raise (C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:6627:19)
    at FlowParserMixin.unexpected (C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:6647:16)
    at FlowParserMixin.expect (C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:6927:12)
    at FlowParserMixin.parseParenAndDistinguishExpression (C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:11660:14)
    at FlowParserMixin.parseParenAndDistinguishExpression (C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:3621:18)
    at FlowParserMixin.parseExprAtom (C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:11326:23)
    at FlowParserMixin.parseExprAtom (C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:4794:20)
    at FlowParserMixin.parseExprSubscripts (C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:11076:23)
    at FlowParserMixin.parseUpdate (C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:11061:21)
    at FlowParserMixin.parseMaybeUnary (C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:11041:23)
    at FlowParserMixin.parseMaybeUnaryOrPrivate (C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:10894:61)
    at FlowParserMixin.parseExprOps (C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:10899:23)
    at FlowParserMixin.parseMaybeConditional (C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:10876:23)
    at FlowParserMixin.parseMaybeAssign (C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:10826:21)
    at FlowParserMixin.parseMaybeAssign (C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:3579:18)
    at FlowParserMixin.parseFunctionBody (C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:12094:24)
    at C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:2920:63
    at FlowParserMixin.forwardNoArrowParamsConversionAt (C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:3096:16)
    at FlowParserMixin.parseFunctionBody (C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:2920:12)
    at FlowParserMixin.parseArrowExpression (C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:12076:10)
    at FlowParserMixin.parseParenAndDistinguishExpression (C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:11686:12)
    at FlowParserMixin.parseParenAndDistinguishExpression (C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:3621:18)
    at FlowParserMixin.parseExprAtom (C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:11326:23)
    at FlowParserMixin.parseExprAtom (C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:4794:20)
    at FlowParserMixin.parseExprSubscripts (C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:11076:23)
    at FlowParserMixin.parseUpdate (C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:11061:21)
    at FlowParserMixin.parseMaybeUnary (C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:11041:23)
    at FlowParserMixin.parseMaybeUnaryOrPrivate (C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:10894:61)
    at FlowParserMixin.parseExprOps (C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:10899:23)
    at FlowParserMixin.parseMaybeConditional (C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:10876:23)
    at FlowParserMixin.parseMaybeAssign (C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:10826:21)
    at FlowParserMixin.parseMaybeAssign (C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:3579:18)
    at C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:10795:39
    at FlowParserMixin.allowInAnd (C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:12427:12)
    at FlowParserMixin.parseMaybeAssignAllowIn (C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:10795:17)
    at FlowParserMixin.parseMaybeAssignAllowInOrVoidPattern (C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:12494:17)
    at FlowParserMixin.parseExprListItem (C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:12176:18)
    at FlowParserMixin.parseCallExpressionArguments (C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:11247:22)
    at FlowParserMixin.parseCoverCallAndAsyncArrowHead (C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:11181:29)
    at FlowParserMixin.parseSubscript (C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:11115:19)
    at FlowParserMixin.parseSubscript (C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:3680:18)
    at FlowParserMixin.parseSubscripts (C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:11089:19)
    at FlowParserMixin.parseSubscripts (C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:3646:18)
    at FlowParserMixin.parseExprSubscripts (C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:11080:17)
    at FlowParserMixin.parseUpdate (C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:11061:21)
    at FlowParserMixin.parseMaybeUnary (C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:11041:23)
    at FlowParserMixin.parseMaybeUnaryOrPrivate (C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:10894:61)
    at FlowParserMixin.parseExprOps (C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:10899:23)
    at FlowParserMixin.parseMaybeConditional (C:\Users\W0024618\Desktop\apac-occupancy-frontend\node_modules\@babel\parser\lib\index.js:10876:23)
ERROR
[eslint] 
src\pages\Dashboard.jsx
  Line 69:38:  Parsing error: Unexpected token, expected "," (69:38)


export default function Dashboard() {
  const { data, loading, error } = useLiveOccupancy(1000);




  const regions = data?.realtime || {};

  const partitions = useMemo(() => (
  partitionList
    .map(name => {
      const key = Object.keys(regions).find(k => k.includes(name));
      const p = key && regions[key] ? regions[key] : {};
      return {
        name,
        total: p.total || 0,
        Employee: p.Employee || 0,
        Contractor: p.Contractor || 0,
        floors: p.floors || {},
        flag: flagMap[name] || null
      };
    })
    .sort((a, b) => b.total - a.total);
    
  const todayTot = data?.today?.total || 0;
  const todayEmp = data?.today?.Employee || 0;
  const todayCont = data?.today?.Contractor || 0;
  const realtimeTot = partitions.reduce((sum, p) => sum + p.total, 0);
  const realtimeEmp = partitions.reduce((sum, p) => sum + p.Employee, 0);
  const realtimeCont = partitions.reduce((sum, p) => sum + p.Contractor, 0);
  const pune = partitions.find(p => p.name === 'Pune');
  const quezonCity = partitions.find(p => p.name === 'Quezon City');
  const combinedRegions = partitions.filter(p =>
    ['JP.Tokyo', 'MY.Kuala Lumpur', 'Taguig City'].includes(p.name)
  );
  const quezonData = useMemo(() => [
    { name: 'Employees', value: quezonCity?.Employee || 0 },
    { name: 'Contractors', value: quezonCity?.Contractor || 0 }
  ], [quezonCity?.Employee, quezonCity?.Contractor]);
  const asiaPacData = useMemo(() =>
    combinedRegions.map(r => ({
      name: r.name.replace(/^.*\./, ''),
      value: r.total
    })),
    [combinedRegions]
  );


  if (error) {
    return (
      <Box width="100vw" py={4}>
        <Typography color="error" align="center">
          Error loading live data
        </Typography>
      </Box>
    );
  }

  const floors = Object.entries(pune?.floors || {});

  const chartConfigs = [
    {
      key: 'pune',
      title: 'Pune',
      body: pune?.total === 0
        ? (
          <Typography color="white" align="center" py={6}>
            No Pune data
          </Typography>
        )
        : (
          <CompositeChartCard
            data={floors.map(([f, h]) => ({
              name: f,
              headcount: h,
              capacity: buildingCapacities[f] || 0
            }))}
            lineColor={palette15[0]}
            height={250}
            sx={{ border: 'none' }}
          />
        )
    },
    {
      key: 'quezon',
      title: 'Quezon City',
      body: quezonCity?.total === 0
        ? (
          <Typography color="white" align="center" py={6}>
            No Quezon City data
          </Typography>
        )
        : (
          <PieChartCard
            data={quezonData}
            colors={['#4CAF50', '#F44336']}
            height={290}
            showZeroSlice
            sx={{ border: 'none' }}
          />

        )
    },
    {
      key: 'combined',
      title: 'Asia-Pacific',
      body: combinedRegions.length === 0
        ? (
          <Typography color="white" align="center" py={6}>
            No regional data
          </Typography>
        )
        : (
          <PieChartCard
            data={asiaPacData}
            colors={['#FFBF00', '#FFFAA0', '#B4C424']}
            height={320}
            showZeroSlice
            sx={{ border: 'none' }}
          />
        )
    }
  ];

  return (
    <>
      <Header title="APAC Live Occupancy" />
      <Container
        maxWidth={false}
        disableGutters
        // sx={{ py: 3, px: 2, background: 'rgba(0, 0, 0, 0.93)' }}
        sx={{
          py: 0,
          px: 2,
          background: 'linear-gradient(135deg, #0f0f0f 0%, #1c1c1c 100%)',
          color: '#f5f5f5',
          // minHeight: '100vh'
        }}
      >
        {/* ..................... */}
        {/* Top Summary Cards */}
        <Box display="flex" flexWrap="wrap" gap={1} mb={1}>
          {[
            {
              title: "Today's Total Headcount",

              color: '#FFE599',
              value: todayTot,
              icon: <i className="fa-solid fa-users" style={{ fontSize: 25, color: '#FFB300' }} />,
              border: '#FFB300',

            },
            {
              title: "Today's Employees Count",
              value: todayEmp,
              icon: <i className="bi bi-people" style={{ fontSize: 25, color: '#EF5350' }} />,
              border: '#8BC34A'
            },
            {
              title: "Today's Contractors Count",
              value: todayCont,
              icon: <i className="fa-solid fa-circle-user" style={{ fontSize: 25, color: '#8BC34A' }} />,
              border: '#E57373'
            },
            {
              title: "Realtime Headcount",
              value: realtimeTot,
              icon: <i className="fa-solid fa-users" style={{ fontSize: 25, color: '#FFB300' }} />,
              border: '#FFD180'
            },
            {
              title: "Realtime Employees Count",
              value: realtimeEmp,
              icon: <i className="bi bi-people" style={{ fontSize: 25, color: '#EF5350' }} />,
              border: '#AED581'
            },
            {
              title: "Realtime Contractors Count",
              value: realtimeCont,
              icon: <i className="fa-solid fa-circle-user" style={{ fontSize: 25, color: '#8BC34A' }} />,
              border: '#EF5350'
            }
          ].map(c => (
            <Box key={c.title} sx={{ flex: '1 1 calc(16.66% - 8px)' }}>
              <SummaryCard
                title={c.title}
                total={c.value}
                stats={[]}
                icon={c.icon}
                sx={{ height: 140, border: `2px solid ${c.border}` }}
              />
            </Box>
          ))}
        </Box>

        {/* Region Cards */}
        <Box display="flex" flexWrap="wrap" gap={1} mb={3}>
          {loading
            ? <Skeleton variant="rectangular" width="90%" height={200} />
            :
            partitions.map((p, index) => (
              <Box
                key={p.name}
                sx={{ flex: '1 1 calc(16.66% - 8px)' }}
              >
                <SummaryCard
                  title={
                    <Typography
                      variant="subtitle1"
                      sx={{
                        fontWeight: 'bold',
                        color: '#FFC107',  // Change this to your desired color
                        fontSize: '1.3rem'
                      }}
                    >
                      {p.name.replace(/^.*\./, '')}
                    </Typography>
                  }
                  total={p.total}
                  stats={[
                    { label: 'Employees', value: p.Employee, color: '#40E0D0' },
                    { label: 'Contractors', value: p.Contractor, color: 'green' }
                  ]}
                  sx={{
                    width: '100%',
                    border: `2px solid ${palette15[index % palette15.length]}`
                  }}
                  icon={
                    <Box
                      component="img"
                      src={p.flag}
                      sx={{ width: 48, height: 32 }}
                    />
                  }
                />
              </Box>
            ))
          }

        </Box>

        {/* .............. */}




        {/* Main Charts Section */}
        <Box display="flex" gap={2} flexWrap="wrap" mb={4}>
          {chartConfigs.map(({ key, title, body }) => (
            <Box
              key={key}
              sx={{
                flex: '1 1 32%',
                minWidth: 280,
                height: 405,
                animation: 'fadeInUp 0.5s'
              }}
            >
              <Paper
                sx={{
                  p: 2,
                  height: '100%',
                  background: 'rgba(0,0,0,0.4)',
                  border: '1px solid #FFC107',
                  display: 'flex',
                  flexDirection: 'column'
                }}
              >
                <Typography variant="h6" align="center" sx={{ color: '#FFC107', mb: 2 }}>
                  {title}
                </Typography>
                <Box sx={{ flex: 1, overflow: 'hidden' }}>
                  {body}
                </Box>
              </Paper>
            </Box>
          ))}
        </Box>
      </Container>
      <Footer />

    </>
  );
}











