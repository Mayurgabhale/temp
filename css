import React, { useEffect, useState, useMemo } from "react";
import {
  Container, Box, Typography, Button, TextField, Grid,
  TableContainer, Paper, Table, TableHead, TableRow, TableCell, TableBody
} from "@mui/material";
import { useParams, useNavigate } from "react-router-dom";
import Header from "../components/Header";
import Footer from "../components/Footer";
import LoadingSpinner from "../components/LoadingSpinner";
import { fetchLiveSummary } from "../api/occupancy.service";
import { lookupFloor } from "../utils/floorLookup";

// APAC partition display names
const apacPartitionNames = {
  'IN.Pune': 'Pune',
  'MY.Kuala Lumpur': 'Kuala Lumpur',
  'PH.Quezon': 'Quezon City',
  'PH.Taguig': 'Taguig',
  'JP.Tokyo': 'Tokyo'
};

export default function PartitionDetailDetails() {
  const { partition } = useParams();
  const navigate = useNavigate();
  const decodedPartition = decodeURIComponent(partition);
  const partitionName = apacPartitionNames[decodedPartition] || decodedPartition;

  const [details, setDetails] = useState([]);
  const [liveCounts, setLiveCounts] = useState({});
  const [loading, setLoading] = useState(false);
  const [lastUpdate, setLastUpdate] = useState("");
  const [searchTerm, setSearchTerm] = useState("");
  const [expandedFloor, setExpandedFloor] = useState(null);

  // Initial load
  useEffect(() => {
    let isMounted = true;
    setLoading(true);
    
    fetchLiveSummary().then(json => {
      if (!isMounted) return;
      const counts = json.realtime[decodedPartition]?.floors || {};
      setLiveCounts(counts);
      
      const det = json.details
        .filter(r => r.PartitionName2 === decodedPartition && r.Direction === "InDirection")
        .map(r => ({
          ...r,
          floor: lookupFloor(r.PartitionName2, r.Door, r.Direction),
        }));
        
      setDetails(det);
      setLastUpdate(new Date().toLocaleTimeString());
      setLoading(false);
    });
    
    return () => { isMounted = false; };
  }, [decodedPartition]);

  // Refresh data
  useEffect(() => {
    const interval = setInterval(async () => {
      const json = await fetchLiveSummary();
      setLiveCounts(json.realtime[decodedPartition]?.floors || {});
      
      const det = json.details
        .filter(r => r.PartitionName2 === decodedPartition && r.Direction === "InDirection")
        .map(r => ({
          ...r,
          floor: lookupFloor(r.PartitionName2, r.Door, r.Direction),
        }));
        
      setDetails(det);
      setLastUpdate(new Date().toLocaleTimeString());
    }, 5000);
    
    return () => clearInterval(interval);
  }, [decodedPartition]);

  // Group by floor
  const floorMap = useMemo(() => {
    const m = {};
    Object.keys(liveCounts).forEach(floorName => {
      m[floorName] = [];
    });
    
    details.forEach(r => {
      if (!m[r.floor]) m[r.floor] = [];
      m[r.floor].push(r);
    });
    
    return m;
  }, [details, liveCounts]);

  // Filter and sort floors
  const displayed = useMemo(() => {
    const term = searchTerm.trim().toLowerCase();
    return Object.entries(floorMap)
      .filter(([floor, emps]) => {
        if (!term) return true;
        if (floor.toLowerCase().includes(term)) return true;
        return emps.some(r =>
          r.ObjectName1.toLowerCase().includes(term) ||
          r.EmployeeID.toLowerCase().includes(term)
        );
      })
      .sort(([aFloor], [bFloor]) => (liveCounts[bFloor] || 0) - (liveCounts[aFloor] || 0));
  }, [floorMap, searchTerm, liveCounts]);

  return (
    <>
      <Header />
      <Box component="main" sx={{ pt: 1, pb: 1 }}>
        <Container maxWidth={false} disableGutters>
          <Box display="flex" alignItems="center" mb={2} sx={{ px: "20px" }}>
            <Button size="small" onClick={() => navigate(-1)}>
              ‚Üê Back to Overview
            </Button>
          </Box>

          <Box display="flex" alignItems="center" gap={2} mb={2} sx={{ px: "20px" }}>
            <Typography variant="h6">Floor Details: {partitionName}</Typography>
            <Typography variant="body2" color="textSecondary">
              Last updated: {lastUpdate}
            </Typography>
            <TextField
              size="small"
              placeholder="Search floor or name..."
              value={searchTerm}
              onChange={e => setSearchTerm(e.target.value)}
              sx={{ width: 300 }}
            />
          </Box>

          {loading ? (
            <Box sx={{ px: "20px", py: 8 }}>
              <LoadingSpinner />
            </Box>
          ) : (
            <>
              <Grid container spacing={2} sx={{ px: "20px" }}>
                {displayed.map(([floor, emps]) => (
                  <Grid item xs={12} sm={6} md={4} key={floor}>
                    <Paper sx={{ p: 2, border: "1px solid #FFC107", borderRadius: 2, height: '100%' }}>
                      <Typography variant="subtitle1" fontWeight={600} gutterBottom>
                        {floor} (Total: {liveCounts[floor] ?? 0})
                      </Typography>
                      
                      <TableContainer component={Paper} variant="outlined" sx={{ mb: 1, maxHeight: 300 }}>
                        <Table size="small" stickyHeader>
                          <TableHead>
                            <TableRow>
                              <TableCell sx={{ fontWeight: "bold" }}>Emp ID</TableCell>
                              <TableCell sx={{ fontWeight: "bold" }}>Name</TableCell>
                              <TableCell sx={{ fontWeight: "bold" }}>Time</TableCell>
                            </TableRow>
                          </TableHead>
                          <TableBody>
                            {emps.slice(0, 10).map((r, i) => {
                              const isMatch = searchTerm && (
                                r.ObjectName1.toLowerCase().includes(searchTerm.toLowerCase()) ||
                                r.EmployeeID.toLowerCase().includes(searchTerm.toLowerCase())
                              );
                              
                              return (
                                <TableRow
                                  key={`${r.PersonGUID}-${i}`}
                                  sx={isMatch ? { backgroundColor: "rgba(255, 235, 59, 0.3)" } : {}}
                                >
                                  <TableCell>{r.EmployeeID}</TableCell>
                                  <TableCell>{r.ObjectName1}</TableCell>
                                  <TableCell>
                                    {new Date(r.LocaleMessageTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                                  </TableCell>
                                </TableRow>
                              );
                            })}
                          </TableBody>
                        </Table>
                      </TableContainer>
                      
                      <Button
                        size="small"
                        onClick={() => setExpandedFloor(expandedFloor === floor ? null : floor)}
                        sx={{ mt: 1 }}
                      >
                        {expandedFloor === floor ? "Hide Full List" : "Show Full List"}
                      </Button>
                    </Paper>
                  </Grid>
                ))}
              </Grid>

              {expandedFloor && (
                <Box sx={{ px: "20px", mt: 4 }}>
                  <Typography variant="h6" gutterBottom>
                    {expandedFloor} - All Entries
                  </Typography>
                  <Paper sx={{ p: 2, border: "1px solid #FFC107", borderRadius: 2 }}>
                    <TableContainer sx={{ maxHeight: 500 }}>
                      <Table size="small" stickyHeader>
                        <TableHead>
                          <TableRow>
                            <TableCell sx={{ fontWeight: "bold" }}>#</TableCell>
                            <TableCell sx={{ fontWeight: "bold" }}>Emp ID</TableCell>
                            <TableCell sx={{ fontWeight: "bold" }}>Name</TableCell>
                            <TableCell sx={{ fontWeight: "bold" }}>Time</TableCell>
                            <TableCell sx={{ fontWeight: "bold" }}>Type</TableCell>
                            <TableCell sx={{ fontWeight: "bold" }}>Card</TableCell>
                            <TableCell sx={{ fontWeight: "bold" }}>Door</TableCell>
                          </TableRow>
                        </TableHead>
                        <TableBody>
                          {floorMap[expandedFloor].map((r, i) => (
                            <TableRow key={i}>
                              <TableCell>{i + 1}</TableCell>
                              <TableCell>{r.EmployeeID}</TableCell>
                              <TableCell>{r.ObjectName1}</TableCell>
                              <TableCell>
                                {new Date(r.LocaleMessageTime).toLocaleTimeString()}
                              </TableCell>
                              <TableCell>{r.PersonnelType}</TableCell>
                              <TableCell>{r.CardNumber}</TableCell>
                              <TableCell>{r.Door}</TableCell>
                            </TableRow>
                          ))}
                        </TableBody>
                      </Table>
                    </TableContainer>
                  </Paper>
                </Box>
              )}
            </>
          )}
        </Container>
      </Box>
      <Footer />
    </>
  );
}