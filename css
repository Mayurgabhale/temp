const handleGenerate = async () => {
  setLoading(true);
  try {
    const baseParams = {
      region,
      location: location || undefined
    };

    // Helper function to format dates in local time without timezone conversion
    const formatLocalDate = (date, endOfDay = false) => {
      const d = new Date(date);
      if (endOfDay) {
        d.setHours(23, 59, 59, 999);
      } else {
        d.setHours(0, 0, 0, 0);
      }
      // Format as YYYY-MM-DDTHH:mm:ss without timezone
      const pad = n => n.toString().padStart(2, '0');
      return `${d.getFullYear()}-${pad(d.getMonth()+1)}-${pad(d.getDate())}` +
        `T${pad(d.getHours())}:${pad(d.getMinutes())}:${pad(d.getSeconds())}`;
    };

    if (tab === 0) {
      // Daily Access
      const params = {
        ...baseParams,
        from: formatLocalDate(from),
        to: formatLocalDate(to, true),
        employees: selectedEmps.join(',')
      };
      const resp = await axios.get('/api/reports/daily-access', { params });
      await generateDailyAccessExcel(resp.data.data);
    }
    else if (tab === 1) {
      // Raw
      const params = {
        ...baseParams,
        startDate: formatLocalDate(from),
        endDate: formatLocalDate(to, true)
      };
      const resp = await axios.get('/api/reports/raw', { params });
      // Create local date objects for comparison
      const startDate = new Date(params.startDate);
      const endDate = new Date(params.endDate);
      const rows = resp.data.data.filter(r => {
        const dateStr = r.DateOnly || r.LocaleMessageTime;
        const date = new Date(dateStr);
        return date >= startDate && date <= endDate;
      });
      const ws = XLSX.utils.json_to_sheet(rows);
      const wb = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(wb, ws, 'Raw');
      XLSX.writeFile(wb, `RawReport_${region}_${startDate.toISOString().slice(0, 10)}_to_${endDate.toISOString().slice(0, 10)}.xlsx`);
    }
    else if (tab === 2) {
      // Rejection
      const params = {
        ...baseParams,
        startDate: formatLocalDate(from),
        endDate: formatLocalDate(to, true)
      };
      const resp = await axios.get('/api/reports/rejection', { params });
      const startDate = new Date(params.startDate);
      const endDate = new Date(params.endDate);
      const rows = resp.data.data.filter(r => {
        const dateStr = r.DateOnly || r.LocaleMessageTime;
        const date = new Date(dateStr);
        return date >= startDate && date <= endDate;
      });
      await generateRejectionExcel(rows);
    }
    else if (tab === 3) {
      // Time Duration
      const params = {
        ...baseParams,
        startDate: formatLocalDate(from),
        endDate: formatLocalDate(to, true),
        partition: location.split('.').pop()
      };
      const resp = await axios.get('/api/reports/time-duration', { params });
      await generateTimeDurationExcel(resp.data.data);
    }
  } catch (err) {
    console.error(err);
    alert('Failed to generate report');
  } finally {
    setLoading(false);
  }
};