const floorEntries = Object.entries(live.floors)
  .filter(([floor]) => floor && floor.trim() !== '')
  .map(([floor, cnt]) => {
    const name = floor.trim();
    const capacity = buildingCapacities[name] ?? seatCapacities[partition] ?? 0;
    const pct = capacity ? Math.round((cnt / capacity) * 100) : 0;

    return {
      name,
      Headcount: cnt,
      Capacity: capacity,
      breakdown: {
        Headcount: cnt,
        'Total Seat': capacity,
        Usage: `${pct}%`,
      },
    };
  });






// src/components/ChartCard.jsx
import React, { useState, useRef } from 'react';
import { Card, CardContent, Typography, Box } from '@mui/material';
import {
  AreaChart,
  Area,
  Line,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  CartesianGrid,
  Legend,
  LabelList,
  ReferenceLine,
} from 'recharts';
import dayjs from 'dayjs';

const cardStyle = borderColor => ({
  border: `1px solid ${borderColor}`,
  borderRadius: 2,
  bgcolor: 'rgba(0,0,0,0.4)',
  overflow: 'hidden',
  transition: 'transform 0.3s, box-shadow 0.3s',
  '&:hover': {
    transform: 'scale(1.02)',
    boxShadow: '0 4px 12px rgba(0,0,0,0.7)',
  },
  width: '100%',
});

export default function ChartCard({
  title,
  data = [],
  dataKey = 'value',
  chartHeight = 350,
  colors = { head: '#FFC107', cap: '#000000' },
  animateDuration = 800,
  showCrosshair = true,
  timeFormat = 'HH:mm:ss',
  axisProps = {},
  tooltipFormatter = null,
  disableLegendToggle = false,
}) {
  const [hidden, setHidden] = useState({});
  const [activeIndex, setActiveIndex] = useState(null);
  const [replayKey, setReplayKey] = useState(0);
  const containerRef = useRef();

  if (!Array.isArray(data) || !data.length) {
    return (
      <Card sx={cardStyle(colors.head)}>
        <CardContent sx={{ p: 1, textAlign: 'center' }}>
          <Typography variant="h6">{title}</Typography>
          <Typography variant="body2">No data to display.</Typography>
        </CardContent>
      </Card>
    );
  }

  const hasCapacity = data[0].Capacity != null;

  const handleLegendClick = o => {
    if (disableLegendToggle) return;
    setHidden(prev => ({ ...prev, [o.dataKey]: !prev[o.dataKey] }));
  };

  const handleChartClick = () => setReplayKey(k => k + 1);

  return (
    <Card sx={cardStyle(colors.head)}>
      <CardContent sx={{ p: 1 }}>
        <Typography variant="h6" gutterBottom sx={{ color: colors.head, textAlign: 'center' }}>
          {title}
        </Typography>
        <Box
          ref={containerRef}
          sx={{ width: '100%', height: chartHeight, cursor: 'pointer' }}
          onClick={handleChartClick}
        >
          <ResponsiveContainer key={replayKey}>
            <AreaChart
              data={data}
              margin={{ top: 20, right: 30, left: 0, bottom: 20 }}
              onMouseMove={e => {
                if (e && e.activeTooltipIndex != null) {
                  setActiveIndex(e.activeTooltipIndex);
                }
              }}
            >
              <defs>
                <linearGradient id="colorHead" x1="0" y1="0" x2="0" y2="1">
                  <stop offset="50%" stopColor={colors.head} stopOpacity={0.4} />
                  <stop offset="95%" stopColor={colors.head} stopOpacity={0} />
                </linearGradient>
              </defs>
              <CartesianGrid strokeDasharray="3 3" stroke="rgba(0,0,0,0.1)" />
              {showCrosshair && activeIndex != null && data[activeIndex] && (
                <ReferenceLine
                  x={data[activeIndex].name}
                  stroke={colors.head}
                  strokeOpacity={0.5}
                />
              )}
              <XAxis
                dataKey="name"
                tick={{ fill: '#000', fontWeight: 600 }}
                tickFormatter={t =>
                  typeof t === 'number' ? dayjs(t).format(timeFormat) : t
                }
                label={{
                  position: 'insideBottomRight',
                  offset: -10,
                  fill: '#000',
                  fontWeight: 600,
                }}
                {...axisProps.xAxis}
              />
              <YAxis
                tick={{ fill: '#fff', fontWeight: 600 }}
                label={{
                  value: 'Count',
                  angle: -90,
                  position: 'insideLeft',
                  fill: '#000',
                  fontWeight: 600,
                }}
                {...axisProps.yAxis}
              />
              <Tooltip
                contentStyle={{
                  backgroundColor: '#fff',
                  border: `1px solid ${colors.head}`,
                  padding: '0.5rem',
                }}
                cursor={showCrosshair}
                content={({ active, payload }) => {
                  if (!active || !payload || !payload.length) return null;
                  const { breakdown = {}, name } = payload[0].payload;
                  return (
                    <Box sx={{ backgroundColor: '#fff', border: `1px solid ${colors.head}`, p: 1, borderRadius: 1 }}>
                      <Typography variant="subtitle2" sx={{ color: colors.head, mb: 0.5 }}>
                        {name}
                      </Typography>
                      {Object.entries(breakdown).map(([key, val]) => (
                        <Typography key={key} variant="body2" sx={{ color: '#000' }}>
                          {key}: {val}
                        </Typography>
                      ))}
                    </Box>
                  );
                }}
              />
              <Legend
                wrapperStyle={{ color: '#000' }}
                onClick={handleLegendClick}
                iconType="square"
              />

              {hasCapacity && !hidden.Capacity && (
                <Area
                  type="monotone"
                  dataKey="Capacity"
                  name="Total Seat"
                  stroke={colors.cap}
                  fill={`${colors.cap}33`}
                  dot={false}
                  isAnimationActive={false}
                  // animationDuration={animateDuration}
                >
                  <LabelList
                    dataKey="Capacity"
                    position="top"
                    isAnimationActive={false}
                    style={{ fill: colors.cap, fontSize: 12, fontWeight: 600 }}
                  />
                </Area>
              )}
              {!hidden.Headcount && (
                <Area
                  type="monotone"
                  dataKey={'Headcount'}
                  name="Usage"
                  stroke={colors.head}
                  fill="url(#colorHead)"
                  dot={false}
                  isAnimationActive={false}
                  // animationDuration={animateDuration}
                >
                  <LabelList
                    dataKey={hasCapacity ? 'Headcount' : dataKey}
                    position="top"
                    style={{ fill: '#2ecc71', fontSize: 15, fontWeight: 600 }}
                  />
                </Area>
              )}
              {!hidden.Headcount && (
                <Line
                  type="monotone"
                  dataKey={'Headcount'}
                  stroke={colors.head}
                  strokeWidth={2}
                  dot={false}
                  // isAnimationActive={false}
                  // animationDuration={animateDuration}
                  activeDot={{ r: 6, stroke: '#000', strokeWidth: 2 }}
                />
              )}
            </AreaChart>
          </ResponsiveContainer>
        </Box>
      </CardContent>
    </Card>
  );
}


import React, { useEffect, useState } from "react";
import { useMemo } from 'react';
import {
  Container,
  Box,
  Typography,
  Button,
  CircularProgress,
} from "@mui/material";
import { useParams, useNavigate } from "react-router-dom";

import SummaryCard from "../components/SummaryCard";
import ChartCard from "../components/ChartCard";
import Header from "../components/Header";
import Footer from "../components/Footer";
import LoadingSpinner from "../components/LoadingSpinner";

import { fetchLiveSummary, fetchHistory } from "../api/occupancy.service";
import { lookupFloor } from "../utils/floorLookup"; // This is correct

import buildingCapacities from "../data/buildingCapacities";

import seatCapacities from "../data/seatCapacities";

import GroupIcon from "@mui/icons-material/Group";
import TrackChangesIcon from "@mui/icons-material/TrackChanges";
import PeopleIcon from "@mui/icons-material/People";
import BusinessCenterIcon from "@mui/icons-material/BusinessCenter";

export default function PartitionDetail() {
  const { partition } = useParams();
  const navigate = useNavigate();

  const [liveSummary, setLiveSummary] = useState(null);
  const [history, setHistory] = useState(null);
  const [historyLoading, setHistoryLoading] = useState(true);
  const [lastUpdate, setLastUpdate] = useState("");

  // Auto‐refresh live summary
  useEffect(() => {
    let timer;
    async function loadLive() {
      const json = await fetchLiveSummary();
      setLiveSummary(json);
      setLastUpdate(new Date().toLocaleTimeString());
    }
    loadLive();
    timer = setInterval(loadLive, 1000);
    return () => clearInterval(timer);
  }, [partition]);


  



  // Load historical summary once
  useEffect(() => {
    setHistoryLoading(true);
    fetchHistory(partition).then((json) => {
      setHistory(json);
      setHistoryLoading(false);
    });
  }, [partition]);

  if (!liveSummary || !history) return <LoadingSpinner />;

  // Totals for cards
  const lastDay = history.summaryByDate.at(-1);
  const partToday = lastDay.region;
  const live = liveSummary.realtime[partition] || {
    total: 0,
    Employee: 0,
    Contractor: 0,
    TempBadge: 0,
    floors: {},
  };

  // Build floorEntries with capacity
  const floorEntries = Object.entries(live.floors).map(([floor, cnt]) => {
    const name     = floor.trim();
    // const capacity = buildingCapacities[name] ?? 0;
      const capacity = buildingCapacities[name] ?? seatCapacities[partition] ?? 0;

    const pct      = capacity ? Math.round((cnt / capacity) * 100) : 0;

    return {
      name,
      Headcount: cnt,
      Capacity:  capacity,
      breakdown: {
        Headcount: cnt,
        'Total Seat': capacity,
        Usage: `${pct}%`,
      },
    };
  });

  return (
    <>
      <Header />

      <Box component="main" sx={{ pt: 1, pb: 1 }}>
        <Container maxWidth={false} disableGutters>
          {/* Back button */}
          <Box display="flex" alignItems="center" mb={1} sx={{ px: "20px" }}>
            <Button size="small" onClick={() => navigate(-1)}>
              ← Back
            </Button>
          </Box>

          {/* Six‐card partition summary */}
          <Box display="flex" flexWrap="wrap" gap={1} mb={2}>
  {[
    {
      title: "Today's Total Headcount",
      value: historyLoading ? <CircularProgress size={20} /> : partToday.total,
      icon: <i className="fa-solid fa-users" style={{ color: '#E57373', fontSize: 25 }} />,
      border: '#FFD666'
    },
    {
      title: "Today's Employees Count",
      value: historyLoading ? <CircularProgress size={20} /> : partToday.Employee,
      icon: <i className="bi bi-people" style={{ color: '#81C784', fontSize: 25 }} />,
      border: '#81C784'
    },
    {
      title: "Today's Contractors Count",
      value: historyLoading ? <CircularProgress size={20} /> : partToday.Contractor,
      icon: <i className="fa-solid fa-circle-user" style={{ color: '#64B5F6', fontSize: 25 }} />,
      border: '#FFE599'
    },
    {
      title: "Realtime Headcount",
      value: live.total,
      icon: <i className="fa-solid fa-users" style={{ color: '#BA68C8', fontSize: 25 }} />,
      border: '#FFF2CC'
    },
    {
      title: "Realtime Employees Count",
      value: live.Employee,
      icon: <i className="bi bi-people" style={{ color: '#FFB74D', fontSize: 25 }} />,
      border: '#FFD666'
    },
    {
      title: "Realtime Contractors Count",
      value: live.Contractor,
      icon: <i className="fa-solid fa-circle-user" style={{ color: '#4DB6AC', fontSize: 25 }} />,
      border: '#FFE599'
    }
  ].map(card => (
    <Box key={card.title} sx={{ flex: '1 1 calc(16.66% - 8px)' }}>
      <SummaryCard
        title={card.title}
        total={card.value}
        stats={[]}
        icon={card.icon}
        sx={{
          height: 140,
          border: `2px solid ${card.border}`
        }}
      />
    </Box>
  ))}
</Box>

          {/* Floor‐capacity chart */}
          <Box mb={4} sx={{ 
            px: "20px", 
            p: 2, 
            border: "2px solid #FFC107",
            background: 'rgba(0,0,0,0.4)'
          }}>
            <Box display="flex" justifyContent="space-between" alignItems="center" mb={1}>
              <Typography variant="h6" sx={{ color: '#FFC107' }}>
                Live Floor Headcount against Occupancy
              </Typography>
              <Typography variant="body2" sx={{ color: '#FFC107' }}>
                Last updated: {lastUpdate}
              </Typography>
            </Box>

            <ChartCard
              data={floorEntries}
              dataKey="Headcount"
              chartHeight={320}
              colors={{ head: "#28B463", cap: "#FDDA0D" }}
              axisProps={{
                xAxis: { tick: { fill: "#fff" } },
                yAxis: { tick: { fill: "#fff" } },
              }}
            />
          </Box>
        </Container>
      </Box>

      <Footer />
    </>
  );
}




