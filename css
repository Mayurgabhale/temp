Unexpected Application Error!
DatePicker is not defined
ReferenceError: DatePicker is not defined
    at ReportsPage (http://localhost:5173/src/pages/ReportsPage.jsx?t=1754289265245:670:11)
    at renderWithHooks (http://localhost:5173/node_modules/.vite/deps/chunk-PPVFY42G.js?v=25177ea9:11568:26)
    at updateFunctionComponent (http://localhost:5173/node_modules/.vite/deps/chunk-PPVFY42G.js?v=25177ea9:14602:28)
    at beginWork (http://localhost:5173/node_modules/.vite/deps/chunk-PPVFY42G.js?v=25177ea9:15944:22)
    at beginWork$1 (http://localhost:5173/node_modules/.vite/deps/chunk-PPVFY42G.js?v=25177ea9:19781:22)
    at performUnitOfWork (http://localhost:5173/node_modules/.vite/deps/chunk-PPVFY42G.js?v=25177ea9:19226:20)
    at workLoopSync (http://localhost:5173/node_modules/.vite/deps/chunk-PPVFY42G.js?v=25177ea9:19165:13)
    at renderRootSync (http://localhost:5173/node_modules/.vite/deps/chunk-PPVFY42G.js?v=25177ea9:19144:15)
    at recoverFromConcurrentError (http://localhost:5173/node_modules/.vite/deps/chunk-PPVFY42G.js?v=25177ea9:18764:28)
    at performSyncWorkOnRoot (http://localhost:5173/node_modules/.vite/deps/chunk-PPVFY42G.js?v=25177ea9:18907:28)
ðŸ’¿ Hey developer ðŸ‘‹

You can provide a way better UX than this when your app throws errors by providing your own ErrorBoundary or errorElement prop on your route.











<DatePicker
  value={from}
  onChange={d=>setFrom(d)}
  onClose={()=>setShowFromCal(false)}
  renderInput={(params) => <TextField {...params} />}
  open
  onAccept={()=>setShowFromCal(false)} // Closes after OK
/>









 {/* Filter Section */}
   <LocalizationProvider dateAdapter={AdapterDateFns}>
        <Box display="flex" flexWrap="wrap" gap={2} mb={4}>
          {/* Region */}
          <FormControl sx={{minWidth:250}}>
            <InputLabel>Region</InputLabel>
            <Select
              value={region}
              onChange={e=>{setRegion(e.target.value); setLocation('');}}
              input={<OutlinedInput label="Region"/>}
              borderColor={'#FFF'}
            >
              {REGION_OPTIONS.map(r=>
                <MenuItem key={r} value={r}>{r.toUpperCase()}</MenuItem>
              )}
            </Select>
          </FormControl>

          {/* Location */}
          <FormControl sx={{minWidth:250}}>
            <InputLabel>Location</InputLabel>
            <Select
              value={location}
              onChange={e=>setLocation(e.target.value)}
              input={<OutlinedInput label="Location"/>}
              disabled={!region}
            >
              {(LOCATION_MAP[region]||[]).map(loc=>
                <MenuItem key={loc} value={loc}>
                  {loc.split('.').pop()}
                </MenuItem>
              )}
            </Select>
          </FormControl>

          {/* From/To */}
          <Box sx={{position:'relative'}}>
            <TextField
              label={tab===0?'From Date':'Start Date'}
              value={from?from.toLocaleDateString():''}
              readOnly
              onClick={()=>setShowFromCal(true)}
            />
            {showFromCal && (
              <StaticDatePicker
                displayStaticWrapperAs="desktop"
                value={from}
                onChange={d=>{setFrom(d);setShowFromCal(false);}}
                renderInput={p=><TextField {...p}/>}
              />
            )}
          </Box>
          <Box sx={{position:'relative'}}>
            <TextField
              label={tab===0?'To Date':'End Date'}
              value={to?to.toLocaleDateString():''}
              readOnly
              onClick={()=>setShowToCal(true)}
              disabled={tab===1}
            />
            {showToCal && (
              <StaticDatePicker
                displayStaticWrapperAs="desktop"
                value={to}
                onChange={d=>{setTo(d);setShowToCal(false);}}
                renderInput={p=><TextField {...p}/>}
              />
            )}
          </Box>

          {/* Employees (only Daily) */}
          {tab===0 && (
            <FormControl sx={{minWidth:250}}>
              <InputLabel>Employees</InputLabel>
              <Select
                multiple
                value={selectedEmps}
                onChange={e=>setSelectedEmps(e.target.value)}
                input={<OutlinedInput label="Employees"/>}
                renderValue={vals=>vals.join(', ')}
              >
                {EMPLOYEE_OPTIONS.map(n=>(
                  <MenuItem key={n} value={n}>
                    <Checkbox checked={selectedEmps.includes(n)}/>
                    <ListItemText primary={n}/>
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          )}
        </Box>
      </LocalizationProvider>
