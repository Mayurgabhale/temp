
slove this error without any fututre arry, careflly


Compiled with problems:
×
ERROR in ./src/components/ERTOverview.jsx
Module build failed (from ./node_modules/babel-loader/lib/index.js):
SyntaxError: C:\Users\W0024618\Desktop\swipeData\client\src\components\ERTOverview.jsx: Unexpected token, expected "," (49:16)

  47 |           baseLocationByRole[role].includes(filterZone)
  48 |         )
> 49 |     : membersRaw;
     |                 ^
  50 |
  51 |   return (
  52 |     <Card className="shadow-sm mb-3" key={role}>
    at constructor (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:360:19)
    at FlowParserMixin.raise (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:6613:19)
    at FlowParserMixin.unexpected (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:6633:16)
    at FlowParserMixin.expect (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:6914:12)
    at FlowParserMixin.parseCallExpressionArguments (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:11154:14)
    at FlowParserMixin.parseCoverCallAndAsyncArrowHead (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:11097:29)
    at FlowParserMixin.parseSubscript (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:11031:19)
    at FlowParserMixin.parseSubscript (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:3656:18)
    at FlowParserMixin.parseSubscripts (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:11005:19)
    at FlowParserMixin.parseSubscripts (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:3622:18)
    at FlowParserMixin.parseExprSubscripts (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:10996:17)
    at FlowParserMixin.parseUpdate (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:10977:21)
    at FlowParserMixin.parseMaybeUnary (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:10957:23)
    at FlowParserMixin.parseMaybeUnaryOrPrivate (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:10810:61)
    at FlowParserMixin.parseExprOps (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:10815:23)
    at FlowParserMixin.parseMaybeConditional (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:10792:23)
    at FlowParserMixin.parseMaybeAssign (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:10745:21)
    at FlowParserMixin.parseMaybeAssign (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:3555:18)
    at C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:10714:39
    at FlowParserMixin.allowInAnd (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:12334:12)
    at FlowParserMixin.parseMaybeAssignAllowIn (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:10714:17)
    at FlowParserMixin.tryParseConditionalConsequent (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:3027:29)
    at FlowParserMixin.parseConditional (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:2988:14)
    at FlowParserMixin.parseMaybeConditional (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:10796:17)
    at FlowParserMixin.parseMaybeAssign (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:10745:21)
    at FlowParserMixin.parseMaybeAssign (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:3555:18)
    at C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:10714:39
    at FlowParserMixin.allowInAnd (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:12329:16)
    at FlowParserMixin.parseMaybeAssignAllowIn (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:10714:17)
    at FlowParserMixin.parseVar (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:13260:91)
    at FlowParserMixin.parseVarStatement (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:13106:10)
    at FlowParserMixin.parseStatementContent (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:12727:23)
    at FlowParserMixin.parseStatementLike (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:12644:17)
    at FlowParserMixin.parseStatementLike (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:2922:24)
    at FlowParserMixin.parseStatementListItem (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:12624:17)
    at FlowParserMixin.parseBlockOrModuleBlockBody (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:13192:61)
    at FlowParserMixin.parseBlockBody (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:13185:10)
    at FlowParserMixin.parseBlock (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:13173:10)
    at FlowParserMixin.parseFunctionBody (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:12018:24)
    at FlowParserMixin.parseFunctionBody (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:2899:11)
    at FlowParserMixin.parseFunctionBodyAndFinish (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:12004:10)
    at FlowParserMixin.parseFunctionBodyAndFinish (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:2907:18)
    at C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:13317:12
    at FlowParserMixin.withSmartMixTopicForbiddingContext (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:12311:14)
    at FlowParserMixin.parseFunction (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:13316:10)
    at FlowParserMixin.parseFunctionStatement (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:13001:17)
    at FlowParserMixin.parseStatementContent (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:12668:21)
    at FlowParserMixin.parseStatementLike (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:12644:17)
    at FlowParserMixin.parseStatementLike (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:2922:24)
    at FlowParserMixin.parseModuleItem (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:12621:17)
ERROR
[eslint] 
src\components\ERTOverview.jsx
  Line 49:16:  Parsing error: Unexpected token, expected "," (49:16)



import React, { useState, useMemo } from 'react';
import { Card, Row, Col, Badge, Button } from 'react-bootstrap';
import {
  FaHome,
  FaBuilding,
  FaLayerGroup,
  FaEnvelopeOpenText,
  FaMobileAlt,
  FaMapMarkerAlt,
  FaUserTie,
  FaUserShield,
  FaUserNurse,
  FaUsers
} from 'react-icons/fa';

const firstColumnRoles = [
  'Site Head',
  'BCM Team / Site Operations',
  'HR',
  'Incident Controller'
];

const roleIcons = {
  'Site Head': <FaUserTie style={{ color: '#2E86C1' }} />,
  'BCM Team / Site Operations': <FaUserShield style={{ color: '#28B463' }} />,
  'HR': <FaUserTie style={{ color: '#8E44AD' }} />,
  'Incident Controller': <FaUserShield style={{ color: '#D35400' }} />,
  'ERT Team Leader': <FaUserShield style={{ color: '#C0392B' }} />,
  'ERT Team Members': <FaUsers style={{ color: '#16A085' }} />,
  'First Aid Team': <FaUserNurse style={{ color: '#E74C3C' }} />
};

const baseLocationByRole = {
  'Site Head': 'Podium Floor – Red Zone',
  'HR': 'Podium Floor – Red Zone',
  'Incident Controller': 'Podium Floor – Red Zone',
  'First Aid Team': 'Podium Floor – Green Zone',
  'ERT Team Leader': 'Podium Floor – Green Zone',
  'BCM Team / Site Operations': 'Podium Floor – Red Zone'
};

function renderRoleCard(role, membersRaw, filterZone) {
  const members = filterZone
    ? membersRaw.filter(m =>
        m.present && (
          (m.zone && m.zone.includes(filterZone)) ||
          baseLocationByRole[role].includes(filterZone)
        )
    : membersRaw;

  return (
    <Card className="shadow-sm mb-3" key={role}>
      <Card.Header style={{ 
        borderBottom: '2px solid #EAECEE', 
        fontWeight: '600',
        backgroundColor: '#F8F9FA',
        display: 'flex',
        alignItems: 'center',
        gap: '10px'
      }}>
        {roleIcons[role] || <FaUserTie style={{ color: '#7F8C8D' }} />}
        {role}
      </Card.Header>
      <Card.Body style={{ padding: '1rem' }}>
        {members.length > 0 ? members.map((m, i) => {
          const location = m.present ? (m.zone || 'Unknown Zone') : baseLocationByRole[role];
          return (
            <div key={i} className="mb-3 pb-2 border-bottom" style={{ borderColor: '#EAECEE' }}>
              <div className="d-flex justify-content-between align-items-center">
                <span style={{ fontWeight: '500' }}>{m.name}</span>
                <Badge bg={m.present ? 'success' : 'secondary'} pill>
                  {m.present ? 'Available' : 'Away'}
                </Badge>
              </div>
              <div className="mt-2" style={{ fontSize: '0.85rem' }}>
                <div className="d-flex align-items-center mb-1">
                  <FaEnvelopeOpenText className="me-2" style={{ color: '#3498DB', minWidth: '16px' }} />
                  <a href={`mailto:${m.email}`} style={{ color: '#2980B9', textDecoration: 'none' }}>
                    {m.email}
                  </a>
                </div>
                <div className="d-flex align-items-center mb-1">
                  <FaMobileAlt className="me-2" style={{ color: '#27AE60', minWidth: '16px' }} />
                  <span style={{ color: '#27AE60' }}>{m.phone}</span>
                </div>
                <div className="d-flex align-items-center">
                  <FaMapMarkerAlt className="me-2" style={{ color: '#E74C3C', minWidth: '16px' }} />
                  <span style={{ color: '#E74C3C' }}>{location}</span>
                </div>
              </div>
            </div>
          );
        }) : (
          <div className="text-muted text-center py-2">No members</div>
        )}
      </Card.Body>
    </Card>
  );
}

export default function ERTOverview({ ertStatus }) {
  const [filterZone, setFilterZone] = useState(null);
  const [showAllMembers, setShowAllMembers] = useState(false);

  const allMembers = useMemo(() => {
    const list = [];
    Object.entries(ertStatus).forEach(([role, members]) => {
      members.forEach(m => list.push({ role, ...m }));
    });
    return list;
  }, [ertStatus]);

  const floorCounts = useMemo(() => {
    const counts = { 'Podium Floor': 0, '2nd Floor': 0, 'Tower B': 0 };
    allMembers.forEach(m => {
      if (!m.present) return;
      const z = m.zone?.toLowerCase() || '';
      if (z.includes('2nd')) counts['2nd Floor']++;
      else if (z.includes('tower b')) counts['Tower B']++;
      else counts['Podium Floor']++;
    });
    return counts;
  }, [allMembers]);

  const ertLeaders = useMemo(() => {
    const raw = (ertStatus['ERT Team Leader'] || []).map(m => ({ role: 'ERT Team Leader', ...m }));
    const filtered = filterZone
      ? raw.filter(m =>
          m.present && (
            (m.zone && m.zone.includes(filterZone)) ||
            baseLocationByRole['ERT Team Leader'].includes(filterZone)
          )
      : raw;

    const order = ['Vishal Chaudhari', 'Vinit Kumar', 'Sonu Pandey', 'Sagar Jamdade', 'Rangare, Bhupendra Babu', 'Satish Bhoyane'];
    return filtered.sort((a, b) => {
      const pa = a.present ? 1 : 0, pb = b.present ? 1 : 0;
      if (pa !== pb) return pb - pa;
      const ia = order.indexOf(a.name), ib = order.indexOf(b.name);
      if (ia !== -1 || ib !== -1) {
        if (ia === -1) return 1;
        if (ib === -1) return -1;
        return ia - ib;
      }
      return a.name.localeCompare(b.name);
    });
  }, [ertStatus, filterZone]);

  const ertMembers = useMemo(() => {
    const members = (ertStatus['ERT Team Members'] || []).map(m => ({
      role: 'ERT Team Members',
      name: m.Name || m.name,
      baseLocation: m['Base Location'] || m.Floor || m.zone,
      liveLocation: m.zone,
      email: m.Email || m.email,
      phone: m.Phone || m.phone,
      present: m.present
    }));

    const filtered = filterZone 
      ? members.filter(m => 
          m.present && (
            (m.liveLocation && m.liveLocation.includes(filterZone)) || 
            m.baseLocation.includes(filterZone)
          )
      : members;
    
    filtered.sort((a, b) => {
      const pa = a.present ? 1 : 0, pb = b.present ? 1 : 0;
      if (pa !== pb) return pb - pa;
      return a.name.localeCompare(b.name);
    });
    return showAllMembers ? filtered : filtered.slice(0, 8);
  }, [ertStatus, filterZone, showAllMembers]);

  const floorIcons = {
    'Podium Floor': <FaHome size={24} style={{ color: '#E74C3C' }} />,
    '2nd Floor': <FaBuilding size={24} style={{ color: '#3498DB' }} />,
    'Tower B': <FaLayerGroup size={24} style={{ color: '#2ECC71' }} />
  };

  return (
    <div className="container-fluid py-3">
      <h4 className="mb-4" style={{ color: '#2C3E50', fontWeight: '600' }}>
        Emergency Response Team Overview
      </h4>
      
      {/* Floor Filters */}
      <Row className="g-3 mb-4">
        <Col xs={12} md={3}>
          <Card className="text-center shadow-sm h-100 border-0" style={{ backgroundColor: '#F8F9FA' }}>
            <Card.Body className="py-3">
              <FaLayerGroup size={28} style={{ color: '#7F8C8D' }} className="mb-2" />
              <h5 className="mb-1" style={{ fontWeight: '500', color: '#7F8C8D' }}>Total Members</h5>
              <h2 className="m-0" style={{ color: '#2C3E50', fontWeight: '600' }}>
                {Object.values(floorCounts).reduce((sum, c) => sum + c, 0)}
              </h2>
            </Card.Body>
          </Card>
        </Col>
        
        {['Podium Floor', '2nd Floor', 'Tower B'].map(floor => {
          const count = floorCounts[floor] || 0;
          const isSelected = filterZone === floor;
          return (
            <Col key={floor} xs={12} md={3}>
              <Card 
                className={`text-center shadow-sm h-100 ${isSelected ? 'border-primary' : 'border-0'}`}
                style={{ 
                  cursor: 'pointer',
                  backgroundColor: isSelected ? '#EBF5FB' : '#F8F9FA'
                }}
                onClick={() => setFilterZone(prev => prev === floor ? null : floor)}
              >
                <Card.Body className="py-3">
                  {floorIcons[floor]}
                  <h5 className="mb-1 mt-2" style={{ fontWeight: '500', color: isSelected ? '#3498DB' : '#7F8C8D' }}>
                    {floor}
                  </h5>
                  <h2 className="m-0" style={{ color: isSelected ? '#2C3E50' : '#2C3E50', fontWeight: '600' }}>
                    {count}
                  </h2>
                </Card.Body>
              </Card>
            </Col>
          );
        })}
      </Row>

      {/* Three-column layout */}
      <Row className="g-3">
        {/* LEFT COLUMN: Fixed roles */}
        <Col xs={12} lg={4}>
          {firstColumnRoles.map(role => renderRoleCard(role, ertStatus[role] || [], filterZone))}
        </Col>

        {/* MIDDLE COLUMN: ERT Team Leaders */}
        <Col xs={12} lg={4}>
          <Card className="shadow-sm mb-3">
            <Card.Header style={{ 
              borderBottom: '2px solid #EAECEE', 
              fontWeight: '600',
              backgroundColor: '#F8F9FA',
              display: 'flex',
              alignItems: 'center',
              gap: '10px'
            }}>
              {roleIcons['ERT Team Leader']}
              ERT Team Leader
            </Card.Header>
            <Card.Body style={{ padding: '1rem' }}>
              {ertLeaders.map((m, i) => {
                const location = m.present ? m.zone || 'Unknown Zone' : baseLocationByRole['ERT Team Leader'];
                return (
                  <div key={i} className="mb-3 pb-2 border-bottom" style={{ borderColor: '#EAECEE' }}>
                    <div className="d-flex justify-content-between align-items-center">
                      <span style={{ fontWeight: '500' }}>{m.name}</span>
                      <Badge bg={m.present ? 'success' : 'secondary'} pill>
                        {m.present ? 'Available' : 'Away'}
                      </Badge>
                    </div>
                    <div className="mt-2" style={{ fontSize: '0.85rem' }}>
                      <div className="d-flex align-items-center mb-1">
                        <FaEnvelopeOpenText className="me-2" style={{ color: '#3498DB', minWidth: '16px' }} />
                        <a href={`mailto:${m.email}`} style={{ color: '#2980B9', textDecoration: 'none' }}>
                          {m.email}
                        </a>
                      </div>
                      <div className="d-flex align-items-center mb-1">
                        <FaMobileAlt className="me-2" style={{ color: '#27AE60', minWidth: '16px' }} />
                        <span style={{ color: '#27AE60' }}>{m.phone}</span>
                      </div>
                      <div className="d-flex align-items-center">
                        <FaMapMarkerAlt className="me-2" style={{ color: '#E74C3C', minWidth: '16px' }} />
                        <span style={{ color: '#E74C3C' }}>{location}</span>
                      </div>
                    </div>
                  </div>
                );
              })}
              {!ertLeaders.length && <div className="text-muted text-center py-2">No Team Leaders</div>}
            </Card.Body>
          </Card>
        </Col>

        {/* RIGHT COLUMN: ERT Team Members */}
        <Col xs={12} lg={4}>
          <Card className="shadow-sm">
            <Card.Header style={{ 
              borderBottom: '2px solid #EAECEE', 
              fontWeight: '600',
              backgroundColor: '#F8F9FA',
              display: 'flex',
              alignItems: 'center',
              gap: '10px'
            }}>
              {roleIcons['ERT Team Members']}
              ERT Team Members
            </Card.Header>
            <Card.Body style={{ padding: '1rem' }}>
              {ertMembers.map((m, i) => {
                const location = m.present ? m.liveLocation || 'Unknown Zone' : m.baseLocation;
                return (
                  <div key={i} className="mb-3 pb-2 border-bottom" style={{ borderColor: '#EAECEE' }}>
                    <div className="d-flex justify-content-between align-items-center">
                      <span style={{ fontWeight: '500' }}>{m.name}</span>
                      <Badge bg={m.present ? 'success' : 'secondary'} pill>
                        {m.present ? 'Available' : 'Away'}
                      </Badge>
                    </div>
                    <div className="mt-2" style={{ fontSize: '0.85rem' }}>
                      <div className="d-flex align-items-center mb-1">
                        <FaEnvelopeOpenText className="me-2" style={{ color: '#3498DB', minWidth: '16px' }} />
                        <a href={`mailto:${m.email}`} style={{ color: '#2980B9', textDecoration: 'none' }}>
                          {m.email}
                        </a>
                      </div>
                      <div className="d-flex align-items-center mb-1">
                        <FaMobileAlt className="me-2" style={{ color: '#27AE60', minWidth: '16px' }} />
                        <span style={{ color: '#27AE60' }}>{m.phone}</span>
                      </div>
                      <div className="d-flex align-items-center">
                        <FaMapMarkerAlt className="me-2" style={{ color: '#E74C3C', minWidth: '16px' }} />
                        <span style={{ color: '#E74C3C' }}>{location}</span>
                      </div>
                    </div>
                  </div>
                );
              })}
              {!ertMembers.length && <div className="text-muted text-center py-2">No members</div>}
              <div className="text-center mt-3">
                <Button 
                  variant="outline-primary" 
                  size="sm" 
                  onClick={() => setShowAllMembers(prev => !prev)}
                  style={{ minWidth: '120px' }}
                >
                  {showAllMembers ? 'Show Less' : 'Show More'}
                </Button>
              </div>
            </Card.Body>
          </Card>
        </Col>
      </Row>
    </div>
  );
}
