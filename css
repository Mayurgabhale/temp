const lastDay = Array.isArray(historyData?.summaryByDate) && historyData.summaryByDate.length > 0
  ? historyData.summaryByDate.at(-1)
  : null;

const partToday = lastDay?.partitions?.[code] || { total: 0, Employee: 0, Contractor: 0 };










http://localhost:3000/partition/Pune


Uncaught runtime errors:
×
ERROR
Cannot read properties of undefined (reading 'partitions')
TypeError: Cannot read properties of undefined (reading 'partitions')
    at PartitionDetail (http://localhost:3000/static/js/src_pages_PartitionDetail_jsx.chunk.js:840:29)
    at react-stack-bottom-frame (http://localhost:3000/static/js/bundle.js:27761:18)
    at renderWithHooks (http://localhost:3000/static/js/bundle.js:17971:20)
    at updateFunctionComponent (http://localhost:3000/static/js/bundle.js:19664:17)
    at beginWork (http://localhost:3000/static/js/bundle.js:20250:16)
    at runWithFiberInDEV (http://localhost:3000/static/js/bundle.js:15742:68)
    at performUnitOfWork (http://localhost:3000/static/js/bundle.js:22323:93)
    at workLoopSync (http://localhost:3000/static/js/bundle.js:22216:38)
    at renderRootSync (http://localhost:3000/static/js/bundle.js:22200:7)
    at performWorkOnRoot (http://localhost:3000/static/js/bundle.js:21964:42)




//C:\Users\W0024618\Desktop\apac-occupancy-frontend\src\pages\PartitionDetail.jsx

import React, { useEffect, useState } from "react";
import {
  Container, Box, Typography, Button, CircularProgress
} from "@mui/material";
import { useParams, useNavigate } from "react-router-dom";

import Header from "../components/Header";
import Footer from "../components/Footer";
import SummaryCard from "../components/SummaryCard";
import ChartCard from "../components/ChartCard";
import LoadingSpinner from "../components/LoadingSpinner";

import { fetchLiveSummary, fetchHistory } from "../api/occupancy.service";
import buildingCapacities from "../data/buildingCapacities";
import { partitionMap } from "../utils/doorMap";

export default function PartitionDetail() {
  const { partition } = useParams();
  const navigate = useNavigate();
  const code = partitionMap[partition] || null;

  const [liveSummary, setLiveSummary]       = useState(null);
  const [historyData, setHistoryData]       = useState(null);
  const [historyLoading, setHistoryLoading] = useState(true);
  const [lastUpdate, setLastUpdate]         = useState("");

  // Poll live
  useEffect(() => {
    if (!code) return;
    let alive = true;
    async function load() {
      const json = await fetchLiveSummary();
      if (!alive) return;
      setLiveSummary(json);
      setLastUpdate(new Date().toLocaleTimeString());
    }
    load();
    const iv = setInterval(load, 1000);
    return () => { alive = false; clearInterval(iv); };
  }, [code]);

  // Fetch history
  useEffect(() => {
    if (!code) return;
    setHistoryLoading(true);
    fetchHistory(code)
      .then(json => setHistoryData(json))
      .finally(() => setHistoryLoading(false));
  }, [code]);

  if (!code || !liveSummary || !historyData) return <LoadingSpinner />;

  const lastDay = historyData.summaryByDate.at(-1);
  const partToday = (lastDay.partitions && lastDay.partitions[code]) || { total:0, Employee:0, Contractor:0 };

  const live = liveSummary.realtime[code] || { total:0, Employee:0, Contractor:0, floors:{} };

  const floorEntries = Object.entries(live.floors).map(([floor, cnt]) => {
    const cap = buildingCapacities[floor.trim()] || 0;
    const pct = cap ? Math.round((cnt / cap)*100) : 0;
    return {
      name: floor.trim(),
      Headcount: cnt,
      Capacity: cap,
      breakdown: { Headcount: cnt, "Total Seat": cap, Usage:`${pct}%` },
    };
  });

  const cards = [
    {
      title: "Today's Total Headcount",
      value: historyLoading ? <CircularProgress size={20}/> : partToday.total,
      icon: <i className="fa-solid fa-users" style={{ color:'#E57373', fontSize:25 }}/>,
      border:'#FFD666'
    },
    {
      title: "Today's Employees Count",
      value: historyLoading ? <CircularProgress size={20}/> : partToday.Employee,
      icon: <i className="bi bi-people" style={{ color:'#81C784', fontSize:25 }}/>,
      border:'#81C784'
    },
    {
      title: "Today's Contractors Count",
      value: historyLoading ? <CircularProgress size={20}/> : partToday.Contractor,
      icon: <i className="fa-solid fa-circle-user" style={{ color:'#64B5F6', fontSize:25 }}/>,
      border:'#FFE599'
    },
    {
      title: "Realtime Headcount",
      value: live.total,
      icon: <i className="fa-solid fa-users" style={{ color:'#BA68C8', fontSize:25 }}/>,
      border:'#FFF2CC'
    },
    {
      title: "Realtime Employees Count",
      value: live.Employee,
      icon: <i className="bi bi-people" style={{ color:'#FFB74D', fontSize:25 }}/>,
      border:'#FFD666'
    },
    {
      title: "Realtime Contractors Count",
      value: live.Contractor,
      icon: <i className="fa-solid fa-circle-user" style={{ color:'#4DB6AC', fontSize:25 }}/>,
      border:'#FFE599'
    },
  ];

  return (
    <>
      <Header />

      <Box component="main" sx={{ pt:1, pb:1 }}>
        <Container disableGutters maxWidth={false}>
          <Box mb={1} sx={{ px:2 }}>
            <Button size="small" onClick={() => navigate(-1)}>← Back</Button>
          </Box>

          <Box display="flex" flexWrap="wrap" gap={1} mb={3} sx={{ px:2 }}>
            {cards.map(c => (
              <Box key={c.title} sx={{ flex:'1 1 calc(16.66% - 8px)' }}>
                <SummaryCard
                  title={c.title}
                  total={c.value}
                  stats={[]}
                  icon={c.icon}
                  sx={{ height:140, border:`2px solid ${c.border}` }}
                />
              </Box>
            ))}
          </Box>

          <Box sx={{ px:2, p:2, border:'2px solid #FFC107', background:'rgba(0,0,0,0.4)' }}>
            <Box display="flex" justifyContent="space-between" mb={1}>
              <Typography variant="h6" sx={{ color:'#FFC107' }}>
                Live Floor Headcount vs Capacity
              </Typography>
              <Typography variant="body2" sx={{ color:'#FFC107' }}>
                Last updated: {lastUpdate}
              </Typography>
            </Box>

            <ChartCard
              data={floorEntries}
              dataKey="Headcount"
              chartHeight={320}
              colors={{ head:'#28B463', cap:'#FDDA0D' }}
              axisProps={{
                xAxis:{ tick:{ fill:'#fff' } },
                yAxis:{ tick:{ fill:'#fff' } },
              }}
            />
          </Box>
        </Container>
      </Box>

      <Footer />
    </>
  );
}


// src/components/Header.jsx — APAC Edition

import React, { useEffect, useState } from 'react';
import {
  AppBar,
  Toolbar,
  Box,
  Typography,
  Select,
  MenuItem,
  IconButton
} from '@mui/material';
import { useNavigate, useLocation, Link } from 'react-router-dom';

import HomeIcon    from '@mui/icons-material/Home';
import HistoryIcon from '@mui/icons-material/History';
import InfoIcon    from '@mui/icons-material/Info';

import WuLogo        from '../assets/wu-logo.png';
import IndiaFlag     from '../assets/flags/india.png';
import MalaysiaFlag  from '../assets/flags/malaysia.png';
import PhilippinesFlag from '../assets/flags/philippines.png';
import TaguigFlag    from '../assets/flags/Taguig.png';
import JapanFlag     from '../assets/flags/japan.png';
import DefaultFlag   from '../assets/flags/default.png';

import { partitionList }    from '../services/occupancy.service';
import { useLiveOccupancy } from '../hooks/useLiveOccupancy';

// Friendly display names
const displayNameMap = {
  'IN.Pune':         'Pune',
  'MY.Kuala Lumpur': 'Kuala Lumpur',
  'PH.Quezon':       'Quezon City',
  'PH.Taguig':       'Taguig',
  'JP.Tokyo':        'Tokyo',
};

// Flag lookup by partition code
const flagMap = {
  'IN.Pune':         IndiaFlag,
  'MY.Kuala Lumpur': MalaysiaFlag,
  'PH.Quezon':       PhilippinesFlag,
  'PH.Taguig':       TaguigFlag,
  'JP.Tokyo':        JapanFlag,
};

export default function Header() {
  const navigate  = useNavigate();
  const location  = useLocation();
  const { data }  = useLiveOccupancy(1000);
  const [lastUpdate, setLastUpdate] = useState('');

  // Update timestamp on each new live-data push
  // useEffect(() => {
  //   if (data) {
  //     setLastUpdate(new Date().toLocaleTimeString());
  //   }
  // }, [data]);

  // Parse path to detect /partition/:code and any trailing "history" or "details"
  const segments        = location.pathname.split('/').filter(Boolean);
  const isPartitionPage = segments[0] === 'partition' && Boolean(segments[1]);
  const currentCode     = isPartitionPage ? decodeURIComponent(segments[1]) : '';
  const extraSegments   = isPartitionPage ? segments.slice(2) : [];

  // Choose flag (or default)
  const selectedFlag = flagMap[currentCode] || DefaultFlag;

  // Preserve any /history or /details suffix when changing region
  const handlePartitionChange = (newCode) => {
    const base   = newCode ? `/partition/${encodeURIComponent(newCode)}` : '/';
    const suffix = extraSegments.length ? `/${extraSegments.join('/')}` : '';
    navigate(base + suffix);
  };

  return (
    <AppBar position="static" color="primary" sx={{ mb: 2, bgcolor: '#28282B' }}>
      <Toolbar sx={{ justifyContent: 'space-between', alignItems: 'center' }}>
        
        {/* Left: Logo + Title + Nav Icons */}
        <Box display="flex" alignItems="center" sx={{ flexGrow: 1 }}>
          <Box component="img" src={WuLogo} alt="WU Logo" sx={{ height: 36, mr: 2 }} />
          
          <Typography variant="h6" sx={{ color: '#FFC107', mr: 3, fontWeight: 600 }}>
            APAC Live Occupancy
            {currentCode && ` • ${displayNameMap[currentCode] || currentCode}`}
          </Typography>

          <Typography
            variant="caption"
            sx={{
              color: '#FFC107',
              ml: 2,
              opacity: data ? 1 : 0,
              transition: 'opacity 0.8s'
            }}
          >
            {lastUpdate}
          </Typography>

          <IconButton
            component={Link}
            to={ isPartitionPage
              ? `/partition/${encodeURIComponent(currentCode)}`
              : '/' }
            color="inherit"
          >
            <HomeIcon />
          </IconButton>

          <IconButton
            component={Link}
            to={ isPartitionPage
              ? `/partition/${encodeURIComponent(currentCode)}/history`
              : '/history' }
            color="inherit"
          >
            <HistoryIcon />
          </IconButton>

          <IconButton
            component={Link}
            to={ isPartitionPage
              ? `/partition/${encodeURIComponent(currentCode)}/details`
              : '/partition/Pune/details' }
            color="inherit"
          >
            <InfoIcon />
          </IconButton>
        </Box>

        {/* Right: Region Selector + Flag */}
        <Box display="flex" alignItems="center">
          <Select
            size="small"
            value={currentCode}
            displayEmpty
            onChange={e => handlePartitionChange(e.target.value)}
            sx={{ bgcolor: 'background.paper', mr: 2, minWidth: 160 }}
            renderValue={val =>
              val ? displayNameMap[val] || val : '— Select Region —'
            }
          >
            <MenuItem value="">— Select Region —</MenuItem>
            {partitionList.map(code => (
              <MenuItem key={code} value={code}>
                {displayNameMap[code] || code}
              </MenuItem>
            ))}
          </Select>
          <Box component="img" src={selectedFlag} alt="Flag" sx={{ height: 50 }} />
        </Box>
      </Toolbar>
    </AppBar>
  );
}

