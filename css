// //C:\Users\W0024618\Desktop\laca-occupancy-frontend\src\pages\PartitionDetail.jsx
// import React, { useEffect, useState } from "react";
// import {
//   Container,
//   Box,
//   Typography,
//   Button,
//   CircularProgress,
// } from "@mui/material";
// import { useParams, useNavigate } from "react-router-dom";

// import SummaryCard from "../components/SummaryCard";
// import ChartCard from "../components/ChartCard";
// import Header from "../components/Header";
// import Footer from "../components/Footer";
// import LoadingSpinner from "../components/LoadingSpinner";

// import { fetchLiveSummary, fetchHistory } from "../api/occupancy.service";
// import { lookupFloor } from "../utils/floorLookup";

// import buildingCapacities from "../data/buildingCapacities";

// import GroupIcon from "@mui/icons-material/Group";
// import TrackChangesIcon from "@mui/icons-material/TrackChanges";
// import PeopleIcon from "@mui/icons-material/People";
// import BusinessCenterIcon from "@mui/icons-material/BusinessCenter";

// export default function PartitionDetail() {
//   const { partition } = useParams();
//   const navigate = useNavigate();

//   const [liveSummary, setLiveSummary] = useState(null);
//   const [history, setHistory] = useState(null);
//   const [historyLoading, setHistoryLoading] = useState(true);
//   const [lastUpdate, setLastUpdate] = useState("");

//   // Auto‐refresh live summary
//   useEffect(() => {
//     let timer;
//     async function loadLive() {
//       const json = await fetchLiveSummary();
//       setLiveSummary(json);
//       setLastUpdate(new Date().toLocaleTimeString());
//     }
//     loadLive();
//     timer = setInterval(loadLive, 1000);
//     return () => clearInterval(timer);
//   }, [partition]);

//   // Load historical summary once
//   useEffect(() => {
//     setHistoryLoading(true);
//     fetchHistory(partition).then((json) => {
//       setHistory(json);
//       setHistoryLoading(false);
//     });
//   }, [partition]);

//   if (!liveSummary || !history) return <LoadingSpinner />;

//   // Totals for cards
//   const lastDay = history.summaryByDate.at(-1);
//   const partToday = lastDay.region;
//   const live = liveSummary.realtime[partition] || {
//     total: 0,
//     Employee: 0,
//     Contractor: 0,
//     TempBadge: 0,
//     floors: {},
//   };

//   // Build floorEntries with capacity
//   const floorEntries = Object.entries(live.floors).map(([floor, cnt]) => {
//     const name     = floor.trim();
//     const capacity = buildingCapacities[name] ?? 0;
//     const pct      = capacity ? Math.round((cnt / capacity) * 100) : 0;

//     return {
//       name,
//       Headcount: cnt,
//       Capacity:  capacity,
//       breakdown: {
//         Headcount: cnt,
//       'Total Seat': capacity,           // renamed
//        Usage:        pct + '%',          // renamed
//       },
//     };
//   });

//   return (
//     <>
//       <Header />

//       <Box component="main" sx={{ pt: 1, pb: 1 }}>
//         <Container maxWidth={false} disableGutters>
//           {/* Back button */}
//           <Box display="flex" alignItems="center" mb={1} sx={{ px: "20px" }}>
//             <Button size="small" onClick={() => navigate(-1)}>
//               ← Back
//             </Button>
//           </Box>

//           {/* Six‐card partition summary */}
//          <Box display="flex" flexWrap="wrap" gap={1} mb={1}>
//   {[
//     {
//       title: "Today's Total Headcount",
//       value: historyLoading ? <CircularProgress size={20} /> : partToday.total,
//       icon: <i className="fa-solid fa-users" style={{ fontSize: 25, color: '#FFB300' }} />,
//       border: '#FFB300',
//     },
//     {
//       title: "Today's Employees Count",
//       value: historyLoading ? <CircularProgress size={20} /> : partToday.Employee,
//       icon: <i className="bi bi-people" style={{ fontSize: 25, color: '#EF5350' }} />,
//       border: '#8BC34A',
//     },
//     {
//       title: "Today's Contractors Count",
//       value: historyLoading ? <CircularProgress size={20} /> : partToday.Contractor,
//       icon: <i className="fa-solid fa-circle-user" style={{ fontSize: 25, color: '#8BC34A' }} />,
//       border: '#E57373',
//     },
//     {
//       title: "Realtime Headcount",
//       value: live.total,
//       icon: <i className="fa-solid fa-users" style={{ fontSize: 25, color: '#FFB300' }} />,
//       border: '#FFD180',
//     },
//     {
//       title: "Realtime Employees Count",
//       value: live.Employee,
//       icon: <i className="bi bi-people" style={{ fontSize: 25, color: '#EF5350' }} />,
//       border: '#AED581',
//     },
//     {
//       title: "Realtime Contractors Count",
//       value: live.Contractor,
//       icon: <i className="fa-solid fa-circle-user" style={{ fontSize: 25, color: '#8BC34A' }} />,
//       border: '#EF5350',
//     },
//   ].map((card) => (
//     <Box key={card.title} sx={{ flex: "1 1 calc(16.66% - 8px)" }}>
//       <SummaryCard
//         title={card.title}
//         total={card.value}
//         stats={[]}
//         icon={card.icon}
//         sx={{
//           height: 140,
//           border: `2px solid ${card.border}`,
//         }}
//       />
//     </Box>
//   ))}
// </Box>
//           {/* Floor‐capacity chart */}
//           <Box mb={4} sx={{ px: "20px", p: 2, border: "2px solid #FFC107" }}>
//             <Box display="flex" justifyContent="space-between" alignItems="center" mb={1}>
//               <Typography variant="h6">Live Floor Headcount against Occupancy</Typography>
//               <Typography variant="body2" color="textSecondary">
//                 Last updated: {lastUpdate}
//               </Typography>
//             </Box>

//             <ChartCard
//               data={floorEntries}
//               dataKey="Headcount"
//               chartHeight={320}
//               colors={{ head: "#28B463", cap: "#FDDA0D" }}
//               axisProps={{
//                 xAxis: { angle: -0, textAnchor: "end", tick: { fill: "#fff" } },
//                 yAxis: { tick: { fill: "#fff" } },
//               }}
//             />
//           </Box>
//         </Container>
//       </Box>

//       <Footer />
//     </>
//   );
// }

























































//C:\Users\W0024618\Desktop\laca-occupancy-frontend\src\pages\PartitionDetail.jsx
import React, { useEffect, useState } from "react";
import {
  Container,
  Box,
  Typography,
  Button,
  CircularProgress,
} from "@mui/material";
import { useParams, useNavigate } from "react-router-dom";

import SummaryCard from "../components/SummaryCard";
import ChartCard from "../components/ChartCard";
import Header from "../components/Header";
import Footer from "../components/Footer";
import LoadingSpinner from "../components/LoadingSpinner";

import { fetchLiveSummary, fetchHistory } from "../api/occupancy.service";
import { lookupFloor } from "../utils/floorLookup";

import buildingCapacities from "../data/buildingCapacities";

import GroupIcon from "@mui/icons-material/Group";
import TrackChangesIcon from "@mui/icons-material/TrackChanges";
import PeopleIcon from "@mui/icons-material/People";
import BusinessCenterIcon from "@mui/icons-material/BusinessCenter";

export default function PartitionDetail() {
  const { partition } = useParams();
  const navigate = useNavigate();

  const [liveSummary, setLiveSummary] = useState(null);
  const [history, setHistory] = useState(null);
  const [historyLoading, setHistoryLoading] = useState(true);
  const [lastUpdate, setLastUpdate] = useState("");

  // Auto‐refresh live summary
  useEffect(() => {
    let timer;
    async function loadLive() {
      const json = await fetchLiveSummary();
      setLiveSummary(json);
      setLastUpdate(new Date().toLocaleTimeString());
    }
    loadLive();
    timer = setInterval(loadLive, 1000);
    return () => clearInterval(timer);
  }, [partition]);

  // Load historical summary once
  useEffect(() => {
    setHistoryLoading(true);
    fetchHistory(partition).then((json) => {
      setHistory(json);
      setHistoryLoading(false);
    });
  }, [partition]);

  if (!liveSummary || !history) return <LoadingSpinner />;

  // Totals for cards
  const lastDay = history.summaryByDate.at(-1);
  const partToday = lastDay.region;
  const live = liveSummary.realtime[partition] || {
    total: 0,
    Employee: 0,
    Contractor: 0,
    TempBadge: 0,
    floors: {},
  };

  // Build floorEntries with capacity
  const floorEntries = Object.entries(live.floors).map(([floor, cnt]) => {
    const name     = floor.trim();
    const capacity = buildingCapacities[name] ?? 0;
    const pct      = capacity ? Math.round((cnt / capacity) * 100) : 0;

    return {
      name,
      Headcount: cnt,
      Capacity:  capacity,
      breakdown: {
        Headcount: cnt,
      'Total Seat': capacity,           // renamed
       Usage:        pct + '%',          // renamed
      },
    };
  });

  return (
    <>
      <Header />

      <Box component="main" sx={{ pt: 1, pb: 1 }}>
        <Container maxWidth={false} disableGutters>
          {/* Back button */}
          <Box display="flex" alignItems="center" mb={1} sx={{ px: "20px" }}>
            <Button size="small" onClick={() => navigate(-1)}>
              ← Back
            </Button>
          </Box>

          {/* Six‐card partition summary */}
         <Box display="flex" flexWrap="wrap" gap={1} mb={1}>
  {[
    {
      title: "Today's Total Headcount",
      value: historyLoading ? <CircularProgress size={20} /> : partToday.total,
      icon: <i className="fa-solid fa-users" style={{ fontSize: 25, color: '#FFB300' }} />,
      border: '#FFB300',
    },
    {
      title: "Today's Employees Count",
      value: historyLoading ? <CircularProgress size={20} /> : partToday.Employee,
      icon: <i className="bi bi-people" style={{ fontSize: 25, color: '#EF5350' }} />,
      border: '#8BC34A',
    },
    {
      title: "Today's Contractors Count",
      value: historyLoading ? <CircularProgress size={20} /> : partToday.Contractor,
      icon: <i className="fa-solid fa-circle-user" style={{ fontSize: 25, color: '#8BC34A' }} />,
      border: '#E57373',
    },
    {
      title: "Realtime Headcount",
      value: live.total,
      icon: <i className="fa-solid fa-users" style={{ fontSize: 25, color: '#FFB300' }} />,
      border: '#FFD180',
    },
    {
      title: "Realtime Employees Count",
      value: live.Employee,
      icon: <i className="bi bi-people" style={{ fontSize: 25, color: '#EF5350' }} />,
      border: '#AED581',
    },
    {
      title: "Realtime Contractors Count",
      value: live.Contractor,
      icon: <i className="fa-solid fa-circle-user" style={{ fontSize: 25, color: '#8BC34A' }} />,
      border: '#EF5350',
    },
  ].map((card) => (
    <Box key={card.title} sx={{ flex: "1 1 calc(16.66% - 8px)" }}>
      <SummaryCard
        title={card.title}
        total={card.value}
        stats={[]}
        icon={card.icon}
        sx={{
          height: 140,
          border: `2px solid ${card.border}`,
        }}
      />
    </Box>
  ))}
</Box>
          {/* Floor‐capacity chart */}
          <Box mb={4} sx={{ px: "20px", p: 2, border: "2px solid #FFC107" }}>
            <Box display="flex" justifyContent="space-between" alignItems="center" mb={1}>
              <Typography variant="h6">Live Floor Headcount against Occupancy</Typography>
              <Typography variant="body2" color="textSecondary">
                Last updated: {lastUpdate}
              </Typography>
            </Box>

            <ChartCard
              data={floorEntries}
              dataKey="Headcount"
              chartHeight={320}
              colors={{ head: "#28B463", cap: "#FDDA0D" }}
              axisProps={{
                xAxis: { angle: -0, textAnchor: "end", tick: { fill: "#fff" } },
                yAxis: { tick: { fill: "#fff" } },
              }}
            />
          </Box>
        </Container>
      </Box>

      <Footer />
    </>
  );
}

if in partination detail if route is this http://localhost:3000/partition/CR.Costa%20Rica%20Partition
this is Costa rica partition page in this only for Costa rica
Live Floor Headcount against Occupancy chart is show in left side and right side i want to disply ERT Overview Data

so read all code carefuuly and how to create it tell me step by step, 




import React, { useMemo, useState } from 'react';
import { Card, Row, Col, Button } from 'react-bootstrap';
import { FaUsers, FaEnvelopeOpenText, FaMobileAlt, FaMapMarkerAlt } from 'react-icons/fa';

const roleIcon = <FaUsers style={{ color: '#16A085' }} />;

export default function ErtOverview({ ertData }) {
  const [showAll, setShowAll] = useState(false);

  const members = useMemo(() => {
    const raw = ertData?.['Team Members'] ?? [];
    return showAll ? raw : raw.slice(0, 12); // Show only 12 initially
  }, [ertData, showAll]);

  const splitIntoColumns = (data, columns = 3) => {
    const perColumn = Math.ceil(data.length / columns);
    return Array.from({ length: columns }, (_, i) =>
      data.slice(i * perColumn, (i + 1) * perColumn)
    );
  };

  const columns = splitIntoColumns(members, 3);

  return (
    <div className="container-fluid py-3">
      <h4 className="mb-4" style={{ color: '#fff', fontWeight: '600' }}>
        LACA ERT Team Members
      </h4>

      <Row className="g-8">
        {columns.map((column, colIndex) => (
          <Col key={colIndex} xs={62} md={16} lg={4}>
            <Card className="shadow-sm">
              <Card.Header style={{
                borderBottom: '1px solid #EAECEE',
                fontWeight: '600',
                display: 'flex',
                alignItems: 'center',
                gap: '10px'
              }}>
                {roleIcon}
                Emergency Response Team (LACA)
              </Card.Header>
              <Card.Body style={{ padding: '1rem' }}>
                {column.map((m, i) => (
                  <div key={i} className="mb-3 pb-12" style={{ borderBottom: '0.5px solid #595959' }}>
                    <div style={{ fontWeight: '500' }}>{m.name}</div>
                    <div className="mt-2" style={{ fontSize: '0.85rem' }}>
                      <div className="d-flex align-items-center mb-1">
                        <FaEnvelopeOpenText className="me-2" style={{ color: '#3498DB', minWidth: '16px' }} />
                        <a href={`mailto:${m.email}`} style={{ color: '#2980B9', textDecoration: 'none' }}>
                          {m.email}
                        </a>
                      </div>
                      <div className="d-flex align-items-center mb-1">
                        <FaMobileAlt className="me-2" style={{ color: '#7F8C8D', minWidth: '16px' }} />
                        <span style={{ color: '#7F8C8D' }}>Emp ID: {m['emp_id']}</span>
                      </div>
                      <div className="d-flex align-items-center">
                        <FaMapMarkerAlt className="me-2" style={{ color: '#E74C3C', minWidth: '16px' }} />
                        <span style={{ color: '#E74C3C' }}>Costa Rica</span>
                      </div>
                    </div>
                  </div>
                ))}
              </Card.Body>
            </Card>
          </Col>
        ))}
      </Row>

      <div className="text-center mt-4">
        <Button 
          variant="outline-primary" 
          size="sm" 
          onClick={() => setShowAll(prev => !prev)}
          style={{ minWidth: '120px' }}
        >
          {showAll ? 'Show Less' : 'Show More'}
        </Button>
      </div>
    </div>
  );
}



// client/src/pages/ErtPage.jsx

import React from 'react';
import { Container, Row, Col } from 'react-bootstrap';
// import ErtOverview from '../components/ErtOverview';
import ErtOverview from '../components/ERTOverview';
import ertData from '../data/lacaErtMembers.json';
// index.js or App.js
import 'bootstrap/dist/css/bootstrap.min.css';
function ErtPage() {
  return (
    <Container fluid className="py-1">
      <Row className="g-1">
        <Col>
          <ErtOverview ertData={ertData} />
        </Col>
      </Row>


