const handleGenerate = async () => {
  setLoading(true);
  try {
    const baseParams = { region, location: location || undefined };

    if (tab === 0) { // Daily Access
      // Create new Date objects to avoid modifying the original ones
      const fromDate = new Date(from);
      const toDate = new Date(to);
      
      // Set time to UTC midnight for from date
      fromDate.setUTCHours(0, 0, 0, 0);
      
      // Set time to UTC 23:59:59 for to date
      toDate.setUTCHours(23, 59, 59, 999);

      const params = {
        ...baseParams,
        from: fromDate.toISOString(),
        to: toDate.toISOString(),
        employees: selectedEmps.join(',')
      };
      const resp = await axios.get('/api/reports/daily-access', { params });
      await generateDailyAccessExcel(resp.data.data);
    }
    else if (tab === 1) { // Raw
      const fromDate = new Date(from);
      const toDate = new Date(to);
      
      fromDate.setUTCHours(0, 0, 0, 0);
      toDate.setUTCHours(23, 59, 59, 999);

      const params = {
        ...baseParams,
        startDate: fromDate.toISOString(),
        endDate: toDate.toISOString()
      };
      const resp = await axios.get('/api/reports/raw', { params });
      
      // filter by date range
      const startIso = fromDate.toISOString().slice(0, 10);
      const endIso = toDate.toISOString().slice(0, 10);
      const rows = resp.data.data.filter(r => {
        const date = (r.DateOnly || r.LocaleMessageTime).slice(0, 10);
        return date >= startIso && date <= endIso;
      });
      const ws = XLSX.utils.json_to_sheet(rows);
      const wb = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(wb, ws, 'Raw');
      XLSX.writeFile(wb, `RawReport_${region}_${startIso}to${endIso}.xlsx`);
    }
    else if (tab === 2) { // Rejection
      const date = new Date(from);
      date.setUTCHours(0, 0, 0, 0);
      
      const params = {
        ...baseParams,
        date: date.toISOString()
      };
      const resp = await axios.get('/api/reports/rejection', { params });
      const iso = params.date.slice(0, 10);
      const rows = resp.data.data.filter(r => 
        (r.DateOnly || r.LocaleMessageTime).slice(0, 10) === iso
      );
      await generateRejectionExcel(rows);
    }
    else if (tab === 3) {
      const date = new Date(from);
      date.setUTCHours(0, 0, 0, 0);
      
      const params = {
        ...baseParams,
        startDate: date.toISOString(),
        partition: location.split('.').pop() // e.g. "Default"
      };
      const resp = await axios.get('/api/reports/time-duration', { params });
      await generateTimeDurationExcel(resp.data.data);
    }
  } catch (err) {
    console.error(err);
    alert('Failed to generate report');
  } finally {
    setLoading(false);
  }
};