slove the error carefully 


Uncaught runtime errors:
×
ERROR
Cannot read properties of undefined (reading 'Employee')
TypeError: Cannot read properties of undefined (reading 'Employee')
    at Dashboard (http://localhost:3000/static/js/src_pages_Dashboard_jsx.chunk.js:1258:27)
    at react-stack-bottom-frame (http://localhost:3000/static/js/bundle.js:27761:18)
    at renderWithHooks (http://localhost:3000/static/js/bundle.js:17971:20)
    at updateFunctionComponent (http://localhost:3000/static/js/bundle.js:19664:17)
    at beginWork (http://localhost:3000/static/js/bundle.js:20232:637)
    at runWithFiberInDEV (http://localhost:3000/static/js/bundle.js:15742:68)
    at performUnitOfWork (http://localhost:3000/static/js/bundle.js:22323:93)
    at workLoopSync (http://localhost:3000/static/js/bundle.js:22216:38)
    at renderRootSync (http://localhost:3000/static/js/bundle.js:22200:7)
    at performWorkOnRoot (http://localhost:3000/static/js/bundle.js:21964:42)




// src/pages/Dashboard.jsx
import React from 'react';
import {
  Container, Box, Typography, Skeleton,
  Paper,
  colors
} from '@mui/material';

import Header from '../components/Header';
import Footer from '../components/Footer';

import { Grid, useTheme } from '@mui/material';

import SummaryCard from '../components/SummaryCard';
import CompositeChartCard from '../components/CompositeChartCard';
import PieChartCard from '../components/PieChartCard';

import { useLiveOccupancy } from '../hooks/useLiveOccupancy';
import { partitionList } from '../services/occupancy.service';
import buildingCapacities from '../data/buildingCapacities';


import indiaFlag from '../assets/flags/india.png';
import japanFlag from '../assets/flags/japan.png';
import malaysiaFlag from '../assets/flags/malaysia.png';
import philippinesFlag from '../assets/flags/philippines.png';
import taguigFlag from '../assets/flags/Taguig.png';

const palette15 = [
  '#FFC107', '#E91E63', '#4CAF50', '#FFEB3B', '#FFD666',
  '#D84315', '#3F51B5', '#9C27B0', '#00BCD4', '#8BC34A',
  '#FF9800', '#673AB7', '#009688', '#CDDC39', '#795548'
];

const flagMap = {
  'Pune': indiaFlag,
  'Quezon City': philippinesFlag,
  'JP.Tokyo': japanFlag,
  'MY.Kuala Lumpur': malaysiaFlag,
  'Taguig City': taguigFlag
};

export default function Dashboard() {
  const { data, loading, error } = useLiveOccupancy(1000);

  if (error) {
    return (
      <Box width="100vw" py={4}>
        <Typography color="error" align="center">
          Error loading live data
        </Typography>
      </Box>
    );
  }

  const regions = data?.realtime || {};

  const partitions = partitionList
  .map(name => {
    const key = Object.keys(regions).find(k => k.includes(name));
    const p = key && regions[key] ? regions[key] : {};
    return {
      name,
      total: p.total || 0,
      Employee: p.Employee || 0,
      Contractor: p.Contractor || 0,
      floors: p.floors || {},
      flag: flagMap[name] || null
    };
  })
  .sort((a, b) => b.total - a.total);

  const todayTot = data?.today?.total || 0;
  const todayEmp = data?.today?.Employee || 0;
  const todayCont = data?.today?.Contractor || 0;
  const realtimeTot = partitions.reduce((sum, p) => sum + p.total, 0);
  const realtimeEmp = partitions.reduce((sum, p) => sum + p.Employee, 0);
  const realtimeCont = partitions.reduce((sum, p) => sum + p.Contractor, 0);

  const pune = partitions.find(p => p.name === 'Pune');
  const quezonCity = partitions.find(p => p.name === 'Quezon City');
  const combinedRegions = partitions.filter(p =>
    ['JP.Tokyo', 'MY.Kuala Lumpur', 'Taguig City'].includes(p.name)
  );

  const floors = Object.entries(pune?.floors || {});

  const chartConfigs = [
    {
      key: 'pune',
      title: 'Pune',
      body: pune?.total === 0
        ? (
          <Typography color="white" align="center" py={6}>
            No Pune data
          </Typography>
        )
        : (
          <CompositeChartCard
            data={floors.map(([f, h]) => ({
              name: f,
              headcount: h,
              capacity: buildingCapacities[f] || 0
            }))}
            lineColor={palette15[0]}
            height={250}
            sx={{ border: 'none' }}
          />
        )
    },
    {
  key: 'quezon',
  title: 'Quezon City',
  body: quezonCity?.total === 0
    ? (
      <Typography color="white" align="center" py={6}>
        No Quezon City data
      </Typography>
    )
    : (
      <PieChartCard
        // title="Quezon City"
        data={[
          { name: 'Employees', value: quezonCity.Employee },
          { name: 'Contractors', value: quezonCity.Contractor }
        ]}
        colors={['#4CAF50', '#F44336']} // ✅ Green for employee, red for contractor
        height={270}
        showZeroSlice
        sx={{ border: 'none' }}
      />
    )
},
    {
      key: 'combined',
      title: 'Asia-Pacific',
      body: combinedRegions.length === 0
        ? (
          <Typography color="white" align="center" py={6}>
            No regional data
          </Typography>
        )
        : (
          <PieChartCard
            data={combinedRegions.map(r => ({
              name: r.name.replace(/^.*\./, ''),  // strip country code
              value: r.total
            }))}
            colors={['#FFBF00','#FFFAA0', '#B4C424']}
            height={290}
            showZeroSlice
            sx={{ border: 'none' }}
          />
        )
    }
  ];

  return (
    <>
      <Header title="APAC Live Occupancy" />
      <Container
        maxWidth={false}
        disableGutters
        // sx={{ py: 3, px: 2, background: 'rgba(0, 0, 0, 0.93)' }}
        sx={{
          py: 0,
          px: 2,
          background: 'linear-gradient(135deg, #0f0f0f 0%, #1c1c1c 100%)',
          color: '#f5f5f5',
          // minHeight: '100vh'
        }}
      >
        {/* ..................... */}
        {/* Top Summary Cards */}
        <Box display="flex" flexWrap="wrap" gap={1} mb={1}>
          {[
            {
              title: "Today's Total Headcount",
              
              color:'#FFE599',
              value: todayTot,
              icon: <i className="fa-solid fa-users" style={{ fontSize: 25, color: '#FFB300' }} />,
              border: '#FFB300',

            },
            {
              title: "Today's Employees Count",
              value: todayEmp,
              icon: <i className="bi bi-people" style={{ fontSize: 25, color: '#EF5350' }} />,
              border: '#8BC34A'
            },
            {
              title: "Today's Contractors Count",
              value: todayCont,
              icon: <i className="fa-solid fa-circle-user" style={{ fontSize: 25, color: '#8BC34A' }} />,
              border: '#E57373'
            },
            {
              title: "Realtime Headcount",
              value: realtimeTot,
              icon: <i className="fa-solid fa-users" style={{ fontSize: 25, color: '#FFB300' }} />,
              border: '#FFD180'
            },
            {
              title: "Realtime Employees Count",
              value: realtimeEmp,
              icon: <i className="bi bi-people" style={{ fontSize: 25, color: '#EF5350' }} />,
              border: '#AED581'
            },
            {
              title: "Realtime Contractors Count",
              value: realtimeCont,
              icon: <i className="fa-solid fa-circle-user" style={{ fontSize: 25, color: '#8BC34A' }} />,
              border: '#EF5350'
            }
          ].map(c => (
            <Box key={c.title} sx={{ flex: '1 1 calc(16.66% - 8px)' }}>
              <SummaryCard
                title={c.title}
                total={c.value}
                stats={[]}
                icon={c.icon}
                sx={{ height: 140, border: `2px solid ${c.border}` }}
              />
            </Box>
          ))}
        </Box>

        {/* Region Cards */}
        <Box display="flex" flexWrap="wrap" gap={1} mb={3}>
          {loading
            ? <Skeleton variant="rectangular" width="90%" height={200} />
            :
            partitions.map((p, index) => (
              <Box
                key={p.name}
                sx={{ flex: '1 1 calc(16.66% - 8px)' }}
              >
                <SummaryCard
                  title={
                    <Typography
                      variant="subtitle1"
                      sx={{
                        fontWeight: 'bold',
                        color: '#FFC107',  // Change this to your desired color
                        fontSize: '1.3rem'
                      }}
                    >
                      {p.name.replace(/^.*\./, '')}
                    </Typography>
                  }
                  total={p.total}
                  stats={[
                    { label: 'Employees',  value: p.Employee, color: '#40E0D0' },
                    { label: 'Contractors', value: p.Contractor, color: 'green' }
                  ]}
                  sx={{
                    width: '100%',
                    border: `2px solid ${palette15[index % palette15.length]}`
                  }}
                  icon={
                    <Box
                      component="img"
                      src={p.flag}
                      sx={{ width: 48, height: 32 }}
                    />
                  }
                />
              </Box>
            ))
          }

        </Box>

        {/* .............. */}




        {/* Main Charts Section */}
        <Box display="flex" gap={2} flexWrap="wrap" mb={4}>
          {chartConfigs.map(({ key, title, body }) => (
            <Box
              key={key}
              sx={{
                flex: '1 1 32%',
                minWidth: 280,
                height: 380,
                animation: 'fadeInUp 0.5s'
              }}
            >
              <Paper
                sx={{
                  p: 2,
                  height: '100%',
                  background: 'rgba(0,0,0,0.4)',
                  border: '1px solid #FFC107',
                  display: 'flex',
                  flexDirection: 'column'
                }}
              >
                <Typography variant="h6" align="center" sx={{ color: '#FFC107', mb: 2 }}>
                  {title}
                </Typography>
                <Box sx={{ flex: 1, overflow: 'hidden' }}>
                  {body}
                </Box>
              </Paper>
            </Box>
          ))}
        </Box>
      </Container>
      <Footer />

    </>
  );
}

C:\Users\W0024618\Desktop\apac-occupancy-frontend\src\api\occupancy.service.js




// src/api/occupancy.service.js
const BASE = process.env.REACT_APP_API_BASE || 'http://localhost:3007';

// In-memory cache
const cache = {
  liveSummary: null,
  history: new Map(),  // key: partition code or 'global'
};

/**
 * Fetch live summary (always fresh).
 */
export async function fetchLiveSummary() {
  const res = await fetch(`${BASE}/api/occupancy/live-summary`);
  if (!res.ok) throw new Error(`Live summary fetch failed: ${res.status}`);
  return res.json();
}

/**
 * Fetch history (global or per-partition), with in-memory caching.
 * @param {string} [location] — e.g. 'IN.Pune'
 */
export async function fetchHistory(location) {
  const key = location || 'global';
  if (cache.history.has(key)) {
    return cache.history.get(key);
  }
  const url = location
    ? `${BASE}/api/occupancy/history/${encodeURIComponent(location)}`
    : `${BASE}/api/occupancy/history`;

  const res = await fetch(url);
  if (!res.ok) throw new Error(`History fetch failed: ${res.status}`);
  const json = await res.json();
  cache.history.set(key, json);
  return json;
}

/** Clear in-memory caches */
export function clearCache() {
  cache.liveSummary = null;
  cache.history.clear();
}

// APAC partition list for selector
export const partitionList = [
  'IN.Pune',
  'MY.Kuala Lumpur',
  'PH.Quezon',
  'PH.Taguig',
  'JP.Tokyo'
];


C:\Users\W0024618\Desktop\apac-occupancy-frontend\src\services\occupancy.service.js

    //src/services/occupancy.service.js

// APAC partition list
export const partitionList = [
  'IN.Pune',
  'MY.Kuala Lumpur',
  'PH.Quezon',
  'PH.Taguig',
  'JP.Tokyo'
];

C:\Users\W0024618\Desktop\apac-occupancy-frontend\src\pages\PartitionDetail.jsx

    




//C:\Users\W0024618\Desktop\apac-occupancy-frontend\src\pages\PartitionDetail.jsx

import React, { useEffect, useState } from "react";
import {
  Container, Box, Typography, Button, CircularProgress
} from "@mui/material";
import { useParams, useNavigate } from "react-router-dom";

import Header from "../components/Header";
import Footer from "../components/Footer";
import SummaryCard from "../components/SummaryCard";
import ChartCard from "../components/ChartCard";
import LoadingSpinner from "../components/LoadingSpinner";

import { fetchLiveSummary, fetchHistory } from "../api/occupancy.service";
import buildingCapacities from "../data/buildingCapacities";
import { partitionMap } from "../utils/doorMap";

export default function PartitionDetail() {
  const { partition } = useParams();
  const navigate = useNavigate();
  const code = partitionMap[partition] || null;

  const [liveSummary, setLiveSummary]       = useState(null);
  const [historyData, setHistoryData]       = useState(null);
  const [historyLoading, setHistoryLoading] = useState(true);
  const [lastUpdate, setLastUpdate]         = useState("");

  // Poll live
  useEffect(() => {
    if (!code) return;
    let alive = true;
    async function load() {
      const json = await fetchLiveSummary();
      if (!alive) return;
      setLiveSummary(json);
      setLastUpdate(new Date().toLocaleTimeString());
    }
    load();
    const iv = setInterval(load, 1000);
    return () => { alive = false; clearInterval(iv); };
  }, [code]);

  // Fetch history
  useEffect(() => {
    if (!code) return;
    setHistoryLoading(true);
    fetchHistory(code)
      .then(json => setHistoryData(json))
      .finally(() => setHistoryLoading(false));
  }, [code]);

  if (!code || !liveSummary || !historyData) return <LoadingSpinner />;

  const lastDay = historyData.summaryByDate.at(-1);
  const partToday = (lastDay.partitions && lastDay.partitions[code]) || { total:0, Employee:0, Contractor:0 };

  const live = liveSummary.realtime[code] || { total:0, Employee:0, Contractor:0, floors:{} };

  const floorEntries = Object.entries(live.floors).map(([floor, cnt]) => {
    const cap = buildingCapacities[floor.trim()] || 0;
    const pct = cap ? Math.round((cnt / cap)*100) : 0;
    return {
      name: floor.trim(),
      Headcount: cnt,
      Capacity: cap,
      breakdown: { Headcount: cnt, "Total Seat": cap, Usage:`${pct}%` },
    };
  });

  const cards = [
    {
      title: "Today's Total Headcount",
      value: historyLoading ? <CircularProgress size={20}/> : partToday.total,
      icon: <i className="fa-solid fa-users" style={{ color:'#E57373', fontSize:25 }}/>,
      border:'#FFD666'
    },
    {
      title: "Today's Employees Count",
      value: historyLoading ? <CircularProgress size={20}/> : partToday.Employee,
      icon: <i className="bi bi-people" style={{ color:'#81C784', fontSize:25 }}/>,
      border:'#81C784'
    },
    {
      title: "Today's Contractors Count",
      value: historyLoading ? <CircularProgress size={20}/> : partToday.Contractor,
      icon: <i className="fa-solid fa-circle-user" style={{ color:'#64B5F6', fontSize:25 }}/>,
      border:'#FFE599'
    },
    {
      title: "Realtime Headcount",
      value: live.total,
      icon: <i className="fa-solid fa-users" style={{ color:'#BA68C8', fontSize:25 }}/>,
      border:'#FFF2CC'
    },
    {
      title: "Realtime Employees Count",
      value: live.Employee,
      icon: <i className="bi bi-people" style={{ color:'#FFB74D', fontSize:25 }}/>,
      border:'#FFD666'
    },
    {
      title: "Realtime Contractors Count",
      value: live.Contractor,
      icon: <i className="fa-solid fa-circle-user" style={{ color:'#4DB6AC', fontSize:25 }}/>,
      border:'#FFE599'
    },
  ];

  return (
    <>
      <Header />

      <Box component="main" sx={{ pt:1, pb:1 }}>
        <Container disableGutters maxWidth={false}>
          <Box mb={1} sx={{ px:2 }}>
            <Button size="small" onClick={() => navigate(-1)}>← Back</Button>
          </Box>

          <Box display="flex" flexWrap="wrap" gap={1} mb={3} sx={{ px:2 }}>
            {cards.map(c => (
              <Box key={c.title} sx={{ flex:'1 1 calc(16.66% - 8px)' }}>
                <SummaryCard
                  title={c.title}
                  total={c.value}
                  stats={[]}
                  icon={c.icon}
                  sx={{ height:140, border:`2px solid ${c.border}` }}
                />
              </Box>
            ))}
          </Box>

          <Box sx={{ px:2, p:2, border:'2px solid #FFC107', background:'rgba(0,0,0,0.4)' }}>
            <Box display="flex" justifyContent="space-between" mb={1}>
              <Typography variant="h6" sx={{ color:'#FFC107' }}>
                Live Floor Headcount vs Capacity
              </Typography>
              <Typography variant="body2" sx={{ color:'#FFC107' }}>
                Last updated: {lastUpdate}
              </Typography>
            </Box>

            <ChartCard
              data={floorEntries}
              dataKey="Headcount"
              chartHeight={320}
              colors={{ head:'#28B463', cap:'#FDDA0D' }}
              axisProps={{
                xAxis:{ tick:{ fill:'#fff' } },
                yAxis:{ tick:{ fill:'#fff' } },
              }}
            />
          </Box>
        </Container>
      </Box>

      <Footer />
    </>
  );
}


C:\Users\W0024618\Desktop\apac-occupancy-frontend\src\pages\PartitionDetailDetails.jsx

//C:\Users\W0024618\Desktop\apac-occupancy-frontend\src\pages\PartitionDetailDetails.jsx

import React, { useEffect, useState, useMemo } from "react";
import {
  Container, Box, Typography, Button, TextField,
  Paper, TableContainer, Table, TableHead, TableRow, TableCell, TableBody
} from "@mui/material";
import { useParams, useNavigate } from "react-router-dom";

import Header from "../components/Header";
import Footer from "../components/Footer";
import LoadingSpinner from "../components/LoadingSpinner";
import DataTable from "../components/DataTable";

import { fetchLiveSummary } from "../api/occupancy.service";
import { lookupFloor } from "../utils/floorLookup";

export default function PartitionDetailDetails() {
  const { partition } = useParams();
  const navigate = useNavigate();

  const [details, setDetails]       = useState([]);
  const [liveCounts, setLiveCounts] = useState({});
  const [loading, setLoading]       = useState(true);
  const [lastUpdate, setLastUpdate] = useState("");
  const [searchTerm, setSearchTerm] = useState("");
  const [expandedFloor, setExpandedFloor] = useState(null);

  // load once
  useEffect(() => {
    let active = true;
    fetchLiveSummary().then(json => {
      if (!active) return;
      setLiveCounts(json.realtime[partition]?.floors || {});
      const det = json.details
        .filter(r => r.PartitionName2 === partition && r.Direction === "InDirection")
        .map(r => ({ ...r, floor: lookupFloor(r.PartitionName2, r.Door, r.Direction) }));
      setDetails(det);
      setLastUpdate(new Date().toLocaleTimeString());
      setLoading(false);
    });
    return () => { active = false };
  }, [partition]);

  // poll
  useEffect(() => {
    const iv = setInterval(async () => {
      const json = await fetchLiveSummary();
      setLiveCounts(json.realtime[partition]?.floors || {});
      const det = json.details
        .filter(r => r.PartitionName2 === partition && r.Direction === "InDirection")
        .map(r => ({ ...r, floor: lookupFloor(r.PartitionName2, r.Door, r.Direction) }));
      setDetails(det);
      setLastUpdate(new Date().toLocaleTimeString());
    }, 1000);
    return () => clearInterval(iv);
  }, [partition]);

  // group floors
  const floorMap = useMemo(() => {
    const m = {};
    Object.keys(liveCounts).forEach(f => m[f] = []);
    details.forEach(r => {
      if (!m[r.floor]) m[r.floor] = [];
      m[r.floor].push(r);
    });
    return m;
  }, [details, liveCounts]);

  // filter/sort
  const displayed = useMemo(() => {
    const term = searchTerm.toLowerCase();
    return Object.entries(floorMap)
      .filter(([fl, emps]) => {
        if (!term) return true;
        if (fl.toLowerCase().includes(term)) return true;
        return emps.some(r =>
          r.ObjectName1.toLowerCase().includes(term) ||
          r.EmployeeID.toLowerCase().includes(term)
        );
      })
      .sort(([a],[b]) => (liveCounts[b]||0) - (liveCounts[a]||0));
  }, [floorMap, liveCounts, searchTerm]);

  const columns = [
    { field:"EmployeeID",     headerName:"Emp ID"      },
    { field:"ObjectName1",    headerName:"Name"        },
    { field:"LocaleMessageTime", headerName:"Swipe Time" },
    { field:"PersonnelType",  headerName:"Type"        },
    { field:"CardNumber",     headerName:"Card"        },
    { field:"Door",           headerName:"Door"        },
  ];

  if (loading) {
    return (
      <>
        <Header />
        <Box sx={{ px:2, py:8 }}><LoadingSpinner/></Box>
        <Footer />
      </>
    );
  }

  return (
    <>
      <Header />

      <Box sx={{ pt:1, pb:1, background:'rgba(0,0,0,0.6)' }}>
        <Container disableGutters maxWidth={false}>
          <Box display="flex" alignItems="center" mb={2} sx={{ px:2 }}>
            <Button size="small" onClick={()=>navigate(-1)} sx={{ color:'#FFC107' }}>
              ← Back to Overview
            </Button>
          </Box>

          <Box display="flex" alignItems="center" gap={2} mb={2} sx={{ px:2 }}>
            <Typography variant="h6" sx={{ color:'#FFC107' }}>
              Floor Details
            </Typography>
            <Typography variant="body2" sx={{ color:'#FFC107' }}>
              Last updated: {lastUpdate}
            </Typography>
            <TextField
              size="small"
              placeholder="Search floor / emp…"
              value={searchTerm}
              onChange={e=>setSearchTerm(e.target.value)}
              sx={{
                '& .MuiInputBase-input': { color:'#FFC107' },
                '& .MuiOutlinedInput-root fieldset': { borderColor:'#FFC107' }
              }}
            />
          </Box>

          <Box display="flex" flexWrap="wrap" width="100%" sx={{ px:2 }}>
            {displayed.map(([floor, emps]) => (
              <Box key={floor} sx={{ width:'50%', p:2 }}>
                <Paper sx={{
                  border:'2px solid #FFC107',
                  p:2,
                  background:'rgba(0,0,0,0.4)'
                }}>
                  <Typography variant="subtitle1" fontWeight={600} gutterBottom sx={{ color:'#FFC107' }}>
                    {floor} (Total {liveCounts[floor]||0})
                  </Typography>

                  <TableContainer component={Paper} variant="outlined" sx={{ mb:1, background:'rgba(0,0,0,0.4)' }}>
                    <Table size="small">
                      <TableHead>
                        <TableRow sx={{ bgcolor:'#000' }}>
                          {["Emp ID","Name","Swipe Time","Type","Card","Door"].map(h=>(
                            <TableCell key={h} sx={{ color:'#FFC107', border:'1px solid #FFC107', fontWeight:'bold' }}>
                              {h}
                            </TableCell>
                          ))}
                        </TableRow>
                      </TableHead>
                      <TableBody>
                        {emps.slice(0,10).map((r,i)=>(
                          <TableRow key={i}>
                            <TableCell sx={{ color:'#fff', border:'1px solid #FFC107' }}>{r.EmployeeID}</TableCell>
                            <TableCell sx={{ color:'#fff', border:'1px solid #FFC107' }}>{r.ObjectName1}</TableCell>
                            <TableCell sx={{ color:'#fff', border:'1px solid #FFC107' }}>
                              {new Date(r.LocaleMessageTime).toLocaleTimeString()}
                            </TableCell>
                            <TableCell sx={{ color:'#fff', border:'1px solid #FFC107' }}>{r.PersonnelType}</TableCell>
                            <TableCell sx={{ color:'#fff', border:'1px solid #FFC107' }}>{r.CardNumber}</TableCell>
                            <TableCell sx={{ color:'#fff', border:'1px solid #FFC107' }}>{r.Door}</TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </TableContainer>

                  <Button size="small"
                    onClick={()=>setExpandedFloor(f=>f===floor?null:floor)}
                    sx={{ color:'#FFC107' }}
                  >
                    {expandedFloor===floor?'Hide':'See more…'}
                  </Button>
                </Paper>
              </Box>
            ))}
          </Box>

          {expandedFloor && (
            <Box sx={{ px:2, mt:2 }}>
              <Typography variant="h6" sx={{ color:'#FFC107' }} gutterBottom>
                {expandedFloor} — All Entries
              </Typography>
              <DataTable
                columns={columns}
                rows={floorMap[expandedFloor].map(r=>({
                  ...r,
                  LocaleMessageTime: new Date(r.LocaleMessageTime).toLocaleTimeString()
                }))}
              />
            </Box>
          )}
        </Container>
      </Box>

      <Footer />
    </>
  );
}





C:\Users\W0024618\Desktop\apac-occupancy-frontend\src\routes\AppRoutes.jsx
                    import React, { lazy, Suspense } from 'react';
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import LoadingSpinner from '../components/LoadingSpinner';

const Dashboard              = lazy(() => import('../pages/Dashboard'));
const History                = lazy(() => import('../pages/History'));
const PartitionDetail        = lazy(() => import('../pages/PartitionDetail'));
const PartitionDetailDetails = lazy(() => import('../pages/PartitionDetailDetails'));
// const RealtimeDetails        = lazy(() => import('../pages/RealtimeDetails'));

export default function AppRoutes() {
  return (
    <BrowserRouter>
      <Suspense fallback={<LoadingSpinner />}>
        <Routes>
          <Route path="/" element={<Dashboard />} />

          {/* Global history */}
          <Route path="/history" element={<History />} />

          {/* Partition-scoped history */}
          <Route path="/partition/:partition/history" element={<History />} />

          {/* Real-time detail view */}
          {/* <Route path="/realtime/:partition" element={<RealtimeDetails />} /> */}

          {/* Partition overview */}
          <Route path="/partition/:partition" element={<PartitionDetail />} />

          {/* Partition details (floor swipes) */}
          <Route path="/partition/:partition/details" element={<PartitionDetailDetails />} />
        </Routes>
      </Suspense>
    </BrowserRouter>
  );
}
 









