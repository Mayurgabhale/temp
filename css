import React, { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import {
  Container, Box, Typography, Button, CircularProgress, Grid
} from "@mui/material";
import SummaryCard from "../components/SummaryCard";
import ChartCard from "../components/ChartCard";
import Header from "../components/Header";
import Footer from "../components/Footer";
import LoadingSpinner from "../components/LoadingSpinner";
import { fetchLiveSummary, fetchHistory } from "../api/occupancy.service";
import buildingCapacities from "../data/buildingCapacities";

// APAC partition display names
const apacPartitionNames = {
  'IN.Pune': 'Pune',
  'MY.Kuala Lumpur': 'Kuala Lumpur',
  'PH.Quezon': 'Quezon City',
  'PH.Taguig': 'Taguig',
  'JP.Tokyo': 'Tokyo'
};

export default function PartitionDetail() {
  const { partition } = useParams();
  const navigate = useNavigate();
  const decodedPartition = decodeURIComponent(partition);
  const partitionName = apacPartitionNames[decodedPartition] || decodedPartition;

  const [liveSummary, setLiveSummary] = useState(null);
  const [history, setHistory] = useState(null);
  const [historyLoading, setHistoryLoading] = useState(true);
  const [lastUpdate, setLastUpdate] = useState("");

  // Auto-refresh live summary
  useEffect(() => {
    let timer;
    async function loadLive() {
      const json = await fetchLiveSummary();
      setLiveSummary(json);
      setLastUpdate(new Date().toLocaleTimeString());
    }
    loadLive();
    timer = setInterval(loadLive, 5000);
    return () => clearInterval(timer);
  }, [partition]);

  // Load historical summary
  useEffect(() => {
    setHistoryLoading(true);
    fetchHistory(decodedPartition).then((json) => {
      setHistory(json);
      setHistoryLoading(false);
    });
  }, [decodedPartition]);

  if (!liveSummary || !history) return <LoadingSpinner />;

  const lastDay = history.summaryByDate.at(-1);
  const partToday = lastDay?.region || {};
  const live = liveSummary.realtime[decodedPartition] || {
    total: 0,
    Employee: 0,
    Contractor: 0,
    floors: {},
  };

  // Build floor entries with capacity
  const floorEntries = Object.entries(live.floors || {}).map(([floor, cnt]) => {
    const capacity = buildingCapacities[floor] ?? 0;
    const pct = capacity ? Math.round((cnt / capacity) * 100) : 0;
    return {
      name: floor,
      Headcount: cnt,
      Capacity: capacity,
      Usage: pct,
    };
  });

  return (
    <>
      <Header />
      <Box component="main" sx={{ pt: 1, pb: 1 }}>
        <Container maxWidth={false} disableGutters>
          <Box display="flex" alignItems="center" mb={1} sx={{ px: "20px" }}>
            <Button size="small" onClick={() => navigate(-1)}>
              ‚Üê Back
            </Button>
          </Box>

          <Typography variant="h5" sx={{ px: "20px", mb: 2, fontWeight: 600, color: '#FFC107' }}>
            {partitionName} Occupancy
          </Typography>

          <Grid container spacing={2} sx={{ px: "20px", mb: 4 }}>
            {[
              {
                title: "Today's Total",
                value: historyLoading ? <CircularProgress size={20} /> : partToday.total,
                icon: <i className="fa-solid fa-users" style={{ fontSize: 25, color: '#FFB300' }} />,
                border: '#FFB300',
              },
              {
                title: "Today's Employees",
                value: historyLoading ? <CircularProgress size={20} /> : partToday.Employee,
                icon: <i className="bi bi-people" style={{ fontSize: 25, color: '#EF5350' }} />,
                border: '#8BC34A',
              },
              {
                title: "Today's Contractors",
                value: historyLoading ? <CircularProgress size={20} /> : partToday.Contractor,
                icon: <i className="fa-solid fa-circle-user" style={{ fontSize: 25, color: '#8BC34A' }} />,
                border: '#E57373',
              },
              {
                title: "Realtime Headcount",
                value: live.total,
                icon: <i className="fa-solid fa-users" style={{ fontSize: 25, color: '#FFB300' }} />,
                border: '#FFD180',
              },
              {
                title: "Realtime Employees",
                value: live.Employee,
                icon: <i className="bi bi-people" style={{ fontSize: 25, color: '#EF5350' }} />,
                border: '#AED581',
              },
              {
                title: "Realtime Contractors",
                value: live.Contractor,
                icon: <i className="fa-solid fa-circle-user" style={{ fontSize: 25, color: '#8BC34A' }} />,
                border: '#EF5350',
              },
            ].map((card, index) => (
              <Grid item xs={12} sm={6} md={4} key={index}>
                <SummaryCard
                  title={card.title}
                  total={card.value}
                  icon={card.icon}
                  sx={{
                    height: 140,
                    border: `2px solid ${card.border}`,
                  }}
                />
              </Grid>
            ))}
          </Grid>

          <Box mb={4} sx={{ px: "20px", p: 2, border: "2px solid #FFC107", borderRadius: 2 }}>
            <Box display="flex" justifyContent="space-between" alignItems="center" mb={1}>
              <Typography variant="h6">Live Floor Occupancy</Typography>
              <Typography variant="body2" color="textSecondary">
                Last updated: {lastUpdate}
              </Typography>
            </Box>
            <ChartCard
              data={floorEntries}
              dataKey="Headcount"
              secondaryDataKey="Capacity"
              chartHeight={320}
              colors={{ primary: "#28B463", secondary: "#FDDA0D" }}
              axisProps={{
                xAxis: { dataKey: "name", interval: 0 },
                yAxis: { domain: [0, 'dataMax + 20'] },
              }}
              tooltipFormatter={(value, name) => 
                name === 'Headcount' ? [`${value} people`, 'Headcount'] : [`${value} seats`, 'Capacity']
              }
            />
          </Box>

          <Box sx={{ px: "20px", display: 'flex', justifyContent: 'center', gap: 2 }}>
            <Button
              variant="contained"
              sx={{ bgcolor: '#FFC107', color: '#000' }}
              onClick={() => navigate(`/partition/${partition}/details`)}
            >
              View Floor Details
            </Button>
            <Button
              variant="outlined"
              sx={{ borderColor: '#FFC107', color: '#FFC107' }}
              onClick={() => navigate(`/partition/${partition}/history`)}
            >
              View History
            </Button>
          </Box>
        </Container>
      </Box>
      <Footer />
    </>
  );
}