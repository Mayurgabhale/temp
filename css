
const floorEntries = Object.entries(realtime.floors).map(([floor, cnt]) => {
  const name     = floor.trim();
  const capacity = buildingCapacities[name] || 0;
  const pct      = capacity ? Math.round(cnt / capacity * 100) : 0;
  return {
    name,
    headcount: cnt,
    capacity,
    percentage: pct
  };
});






C:\Users\W0024618\Desktop\emea-occupancy-frontend\src\components\ChartCard.jsx




// made changes by mayur


import React, { useState } from 'react';
import { Card, CardContent, Typography, Box } from '@mui/material';
import {
  AreaChart, Area, XAxis, YAxis, Tooltip, ResponsiveContainer,
  CartesianGrid, Legend, Brush
} from 'recharts';
import dayjs from 'dayjs';

export default function ChartCard({
  data = [],
  dataKey = 'value',
  colors = { head: '#FFC107', cap: '#B0BEC5' },
  chartHeight = 300,
  title = ''
}) {
  // Hook must be called unconditionally
  const [hidden, setHidden] = useState({});

  if (!Array.isArray(data) || data.length === 0) {
    return (
      <Card>
        <CardContent>
          <Typography>No data to display.</Typography>
        </CardContent>
      </Card>
    );
  }

  const handleLegend = o => {
    const key = o.dataKey;
    setHidden(h => ({ ...h, [key]: !h[key] }));
  };

  return (
    <Card>
      <CardContent>
        {title && <Typography variant="h6" gutterBottom>{title}</Typography>}
        <Box sx={{ width: '100%', height: chartHeight }}>
          <ResponsiveContainer>
            <AreaChart data={data} margin={{ top: 20, right: 30, left: 0, bottom: 20 }}>
              <defs>
                <linearGradient id="colorHead" x1="0" y1="0" x2="0" y2="1">
                  <stop offset="5%" stopColor={colors.head} stopOpacity={0.8} />
                  <stop offset="95%" stopColor={colors.head} stopOpacity={0} />
                </linearGradient>
              </defs>
              {/* <CartesianGrid strokeDasharray="3 3" /> */}
              <XAxis
                dataKey="name"
                tickFormatter={t =>
                  typeof t === 'number' ? dayjs(t).format('HH:mm:ss') : t
                }
              />
              <YAxis />
              {/* <Tooltip /> */}


              <Tooltip
                contentStyle={{
                  backgroundColor: '#FFD666',
                  border: `1px solid ${colors.head}`,
                  borderRadius: 4,
                  padding: 8,
                  color: '#000'
                }}
                content={({ active, payload, label }) => {
                  if (!active || !payload || !payload.length) return null;
                  const datum = payload[0].payload;
                  return (
                    <div style={{
                      backgroundColor: '#FFD666',
                      border: `1px solid ${colors.head}`,
                      borderRadius: 4,
                      padding: 8,
                      color: '#000'
                    }}>
                      <div style={{ fontWeight: 700, marginBottom: 4 }}>{label}</div>
                      <div>Headcount: {datum.headcount}</div>
                      <div>Usage %: {datum.percentage}%</div>
                      <div>Seat Capacity: {datum.capacity}</div>
                    </div>
                  );
                }}
              />
              <Legend onClick={handleLegend} />
              <Area
                type="monotone"
                dataKey={dataKey}
                stroke={colors.head}
                fill="url(#colorHead)"
                hide={hidden[dataKey]}
              />
              <Brush dataKey="name" height={20} stroke={colors.head} />
            </AreaChart>
          </ResponsiveContainer>
        </Box>
      </CardContent>
    </Card>
  );
}


C:\Users\W0024618\Desktop\emea-occupancy-frontend\src\pages\PartitionDetail.jsx



import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { Container, Box, Typography, Button } from '@mui/material';

import Header         from '../components/Header';
import Footer         from '../components/Footer';
import SummaryCard    from '../components/SummaryCard';
import ChartCard      from '../components/ChartCard';
import LoadingSpinner from '../components/LoadingSpinner';

import GroupIcon          from '@mui/icons-material/Group';
import TrackChangesIcon   from '@mui/icons-material/TrackChanges';
import PeopleIcon         from '@mui/icons-material/People';
import BusinessCenterIcon from '@mui/icons-material/BusinessCenter';

import { fetchLiveSummary, fetchHistory } from '../api/occupancy.service';
import buildingCapacities                from '../data/buildingCapacities';
import doorMapRaw                        from '../utils/doorMap';
import { lookupFloor }                   from '../utils/floorLookup';

export default function PartitionDetail() {
  const { partition } = useParams();
  const navigate      = useNavigate();

  const [live, setLive]         = useState(null);
  const [history, setHistory]   = useState(null);
  const [loadingHistory, setLoadingHistory] = useState(true);
  const [lastUpdate, setLastUpdate] = useState('');

  // Poll live
  useEffect(() => {
    let active = true;
    const load = async () => {
      const json = await fetchLiveSummary();
      if (!active) return;
      setLive(json);
      setLastUpdate(new Date().toLocaleTimeString());
    };
    load();
    const iv = setInterval(load, 1000);
    return () => { active = false; clearInterval(iv); };
  }, [partition]);

  // Load history once
  useEffect(() => {
    setLoadingHistory(true);
    fetchHistory(partition).then(json => {
      setHistory(json);
      setLoadingHistory(false);
    });
  }, [partition]);

  if (!live || !history) return <LoadingSpinner />;

  const today  = history.summaryByDate.at(-1).region;
  const realtime = live.realtime[partition] || { total:0, Employee:0, Contractor:0, floors:{} };

  // Build floor entries
  const floorEntries = Object.entries(realtime.floors).map(([floor, cnt]) => {
    
    const name     = floor.trim();
    const capacity = buildingCapacities[name] || 0;
    const pct      = capacity ? Math.round(cnt / capacity * 100) : 0;
    return {
      name,
      headcount: cnt,
      capacity,
      percentage: pct
    };


  });

  // Six cards
  const cards = [
  {
    title: "Today's Total Headcount",
    value: loadingHistory ? <LoadingSpinner size={25} /> : today.total,
    icon: <i className="fa-solid fa-users" style={{ color: '#E57373', fontSize: 25 }} />,
    border: '#FFB300'
  },
  {
    title: "Today's Employees Count",
    value: loadingHistory ? <LoadingSpinner size={25} /> : today.Employee,
    icon: <i className="bi bi-people" style={{ color: '#81C784', fontSize: 25 }} />,
    border: '#8BC34A'
  },
  {
    title: "Today's Contractors Count",
    value: loadingHistory ? <LoadingSpinner size={25} /> : today.Contractor,
    icon: <i className="fa-solid fa-circle-user" style={{ color: '#81C784', fontSize: 25 }} />,
    border: '#E57373'
  },
  {
    title: "Realtime Headcount",
    value: realtime.total,
    icon: <i className="fa-solid fa-users" style={{ color: '#BA68C8', fontSize: 25 }} />,
    border: '#FFD180'
  },
  {
    title: "Realtime Employees Count",
    value: realtime.Employee,
    icon: <i className="bi bi-people" style={{ color: '#81C784', fontSize: 25 }} />,
    border: '#AED581'
  },
  {
    title: "Realtime Contractors Count",
    value: realtime.Contractor,
    icon: <i className="fa-solid fa-circle-user" style={{ color: '#BA68C8', fontSize: 25 }} />,
    border: '#EF5350'
  }
];

  return (
    <>
      <Header />

      <Container maxWidth={false} disableGutters sx={{ px:2, py:2 }}>
        <Box mb={1}>
          <Button size="small" onClick={() => navigate(-1)}>‚Üê Back</Button>
        </Box>

        <Box display="flex" flexWrap="wrap" gap={1} mb={3}>
          {cards.map(c => (
            <Box key={c.title} sx={{ flex: '1 1 calc(16.66% - 8px)' }}>
              <SummaryCard
                title={c.title}
                total={c.value}
                stats={[]}
                icon={c.icon}
                sx={{ height: 140, border: `2px solid ${c.border}` }}
              />
            </Box>
          ))}
        </Box>

        <Box sx={{ border:'2px solid #FFC107', p:2, borderRadius:2, background:'rgba(0,0,0,0.6)' }}>
          <Box display="flex" justifyContent="space-between" mb={1}>
            <Typography variant="h6">Live Floor Headcount vs Capacity</Typography>
            <Typography variant="body2" color="textSecondary">Last updated: {lastUpdate}</Typography>
          </Box>

          <ChartCard
            data={floorEntries}
            dataKey="headcount"
            chartHeight={320}
            colors={{ head:'#28B463', cap:'#FDDA0D' }}
            axisProps={{
              xAxis: { tick:{ fill:'#fff' }, angle: -0, textAnchor:'end' },
              yAxis: { tick:{ fill:'#fff' } }
            }}
          />
        </Box>
      </Container>

      <Footer />
    </>
  );
}





C:\Users\W0024618\Desktop\emea-occupancy-frontend\src\data\buildingCapacities.js


const seatCapacities = {
  Dubai: 53,
  Dublin: 78,
  Rome: 39,
  London: 41,
  Moscow: 108,
  Casablanca: 55,
  Madrid: 65,
};

export default seatCapacities;








