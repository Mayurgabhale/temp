line percent i want to dislay employee and contractores 
read the below code carefully and dislpy only in Dublin Moscow Rome pie chart

<Pie
                data={renderData}
                dataKey="value"
                nameKey="name"
                innerRadius={70}
                outerRadius={120}
                paddingAngle={4}
                isAnimationActive
                animationDuration={animationDuration}
                // show percent labels inside each slice
                label={({ percent, }) => `${(percent * 100).toFixed(0)}%`}
                
                labelLine={false}

              >



                           

import React from 'react';
import { Card, CardContent, Typography, Box } from '@mui/material';
import { PieChart, Pie, Cell, Tooltip, Legend, ResponsiveContainer } from 'recharts';

export default function PieChartCard({
  title,
  data,
  colors = ['#FFC107', '#E0E0E0'],
  height = 300,
  showZeroSlice = false,
  animationDuration = 1500,
  noDataMessage = 'No realtime data',
  totalSeats = 0,
}) {


  const total = data.reduce((sum, d) => sum + d.value, 0);

  if (total === 0 && !showZeroSlice) {
    return (
      <Card sx={cardStyle(colors[0])}>
        <CardContent>
          <Typography variant="subtitle1" align="center" color="text.primary">
            {title}
          </Typography>
          <Typography variant="body2" align="center" sx={{ mt: 2, color: 'text.secondary' }}>
            {noDataMessage}
          </Typography>
        </CardContent>
      </Card>
    );
  }

  // If zero, and showZeroSlice==true, show single “Available” slice
  const renderData = (total === 0 && showZeroSlice)
    ? [{ name: 'Available', value: data[1]?.value || 0 }]
    : data;

  return (
    <Card sx={cardStyle(colors[0])}>
      <CardContent sx={{ p: 1 }}>
        <Typography variant="subtitle1" align="center" color="text.primary">
          {title}
        </Typography>
        {/* <Box sx={{ width:'100%', height }}>
          <ResponsiveContainer>
            <PieChart> */}
        {/* wrap in relative container so we can overlay the total */}
        <Box sx={{ position: 'relative', width: '100%', height }}>

          <ResponsiveContainer>
            <PieChart>

              <Pie
                data={renderData}
                dataKey="value"
                nameKey="name"
                innerRadius={70}
                outerRadius={120}
                paddingAngle={4}
                isAnimationActive
                animationDuration={animationDuration}
                // show percent labels inside each slice
                label={({ percent, }) => `${(percent * 100).toFixed(0)}%`}
                
                labelLine={false}

              >
                {renderData.map((_, i) => (
                  <Cell key={i} fill={colors[i % colors.length]} />
                ))}
              </Pie>
              {/* <Tooltip contentStyle={{ backgroundColor: '#FFEE8C', borderColor: colors[0] }} /> */}
              <Tooltip content={<CustomTooltip />} />
              <Legend
                verticalAlign="bottom"
                wrapperStyle={{ color: 'rgba(255,255,255,0.8)' }}
                formatter={(value, entry) => `${value}: ${entry.payload.value}`}
              />


              {/* </PieChart>
            
          </ResponsiveContainer>
        </Box> */}

            </PieChart>
          </ResponsiveContainer>

          {/* centered total */}
          <Box
            component="div"
            sx={{
              position: 'absolute',
              top: '50%',
              left: '50%',
              transform: 'translate(-50%, -50%)',
              pointerEvents: 'none'
            }}
          >
            <Typography variant="h4" align="center" sx={{ color: colors[0], fontWeight: 'bold' }}>
              {total}
            </Typography>
            <Typography variant="caption" align="center" sx={{ color: 'rgba(255,255,255,0.7)' }}>
            </Typography>


            <Typography variant="caption" align="center" sx={{ color: 'rgba(255,255,255,0.7)' }}>
              {/* of {totalSeats} seats */}
            </Typography>

          </Box>


        </Box>

      </CardContent>
    </Card>
  );
}



const CustomTooltip = ({ active, payload }) => {
  if (active && payload && payload.length > 0) {
    const data = payload[0].payload;
    return (
      <Box
        sx={{
          bgcolor: '#FFEE8C',
          p: 3,
          border: '1px solid #FFC107',
          borderRadius: 1,
          color: '#FFC107'
        }}
      >
        <Typography variant="body2" sx={{ color: '#000' }}><strong>{data.name}</strong></Typography>
        <Typography variant="body2" sx={{ color: '#000' }}>Total: {data.value}</Typography>

        {data.Employee !== undefined && (
          <Typography variant="body2" sx={{ color: '#000' }}>Employees: {data.Employee}</Typography>
        )}
        {data.Contractor !== undefined && (
          <Typography variant="body2" sx={{ color: '#000' }}>Contractors: {data.Contractor}</Typography>
        )}
      </Box>
    );
  }

  return null;
};

const cardStyle = borderColor => ({
  // border: `1px solid ${borderColor}`,
  borderRadius: 2,
  bgcolor: 'rgba(0,0,0,0.4)',
  // overflow: 'hidden',
  transition: 'transform 0.3s, box-shadow 0.3s',
  '&:hover': {
    transform: 'scale(1.02)',
    boxShadow: '0 4px 12px rgba(0,0,0,0.7)'
  }
});


..
 // CHART 1: Dublin, Rome, Moscow with breakdown (Total, Employee, Contractor per city)
  const pieData1 = summaryItems
  .filter(item => ['Dublin', 'Rome', 'Moscow'].includes(item.label))
  .map(item => ({
    name: item.label,
    value: item.total,
    Employee: item.emp,         // ✅ Add Employee
    Contractor: item.cont       // ✅ Add Contractor
  }));


  {/* 1) Vilnius composite */}
          <Box flex="1 1 0" sx={{ border: '2px solid #FFC107', borderRadius: 2, p: 2, background: 'rgba(0,0,0,0.6)' }}>

            {loading ? (
              <Skeleton variant="rectangular" height={300} />
            ) : (
              <CompositeChartCard
                title="Vilnius "
                data={vilniusFloors}
                barColor="#4CAF50"
                lineColor="#FF0000"
                height={350}
                animationDuration={1500}
                animationEasing="ease-in-out"
              />
            )}
          </Box>



