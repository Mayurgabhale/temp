const total = useMemo(() => data.reduce((sum, d) => sum + d.value, 0), [data]);

const renderData = useMemo(() => {
  return (total === 0 && showZeroSlice)
    ? [{ name: 'Available', value: data[1]?.value || 0 }]
    : data;
}, [data, showZeroSlice, total]);

const memoizedTooltip = useMemo(() => <CustomTooltip />, []);

const chart = useMemo(() => (
  <ResponsiveContainer>
    <PieChart>
      <Pie
        data={renderData}
        dataKey="value"
        nameKey="name"
        innerRadius={70}
        outerRadius={120}
        paddingAngle={4}
        isAnimationActive={false}
        animationDuration={0}
        animationEasing="linear"
        label={({ percent }) => `${(percent * 100).toFixed(0)}%`}
        labelLine={false}
      >
        {renderData.map((_, i) => (
          <Cell key={i} fill={colors[i % colors.length]} />
        ))}
      </Pie>
      <Tooltip content={memoizedTooltip} />
      <Legend
        verticalAlign="bottom"
        wrapperStyle={{ color: 'rgba(18, 17, 17, 0.8)' }}
        formatter={(value, entry) => `${value}: ${entry.payload.value}`}
      />
    </PieChart>
  </ResponsiveContainer>
), [renderData, colors, memoizedTooltip]);