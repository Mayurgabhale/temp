<label for="location-filter">Filter by Location:</label>
<select id="location-filter">
  <option value="All">All Locations</option>
</select>





function populateDeviceTable(details, historyData) {
    const tbody = document.getElementById('device-table').getElementsByTagName('tbody')[0];
    tbody.innerHTML = '';
    let list = [];
    let locationSet = new Set();

    ['cameras', 'archivers', 'controllers', 'servers'].forEach(type => {
        details[type]?.forEach(dev => {
            const ip = dev.ip_address;
            const safe = sanitizeId(ip);
            const name = dev[type.slice(0, -1) + 'name'] || 'Unknown';
            const category = type.slice(0, -1).toUpperCase();
            const region = dev.location || 'Unknown';
            const hist = filterHistoryForDisplay(historyData[ip] || [], category);
            const current = dev.status || (hist.length ? hist[hist.length - 1].status : 'Unknown');
            const downCount = hist.filter(e => e.status === 'Offline').length;

            locationSet.add(region); // Collect unique locations

            if (current === 'Offline' || downCount > 15) {
                list.push({ ip, safe, name, category, region, current, hist, downCount });
            }
        });
    });

    // Populate the location dropdown
    const locationFilter = document.getElementById('location-filter');
    if (locationFilter) {
        locationFilter.innerHTML = '<option value="All">All Locations</option>';
        [...locationSet].sort().forEach(loc => {
            const opt = document.createElement('option');
            opt.value = loc;
            opt.textContent = loc;
            locationFilter.appendChild(opt);
        });
    }

    list.sort((a, b) => b.downCount - a.downCount);

    const downtimeOver15Count = list.filter(d => d.downCount > 15).length;
    const currentlyOfflineCount = list.filter(d => d.current === 'Offline').length;
    const setIf = (id, txt) => { const el = document.getElementById(id); if (el) el.innerText = txt; };
    setIf('count-downtime-over-15', `Devices with >15 downtimes: ${downtimeOver15Count}`);
    setIf('count-currently-offline', `Devices currently Offline: ${currentlyOfflineCount}`);

    if (!list.length) {
        const row = tbody.insertRow();
        const cell = row.insertCell();
        cell.colSpan = 10;
        cell.textContent = "No devices found";
        cell.style.textAlign = "center";
        cell.style.fontWeight = "bold";
        updateDisplayedDeviceCount(0);
        return;
    }

    window.allDeviceRows = list; // Cache for filtering
    renderFilteredTable();
}




function filterData() {
    const typeSel = document.getElementById('device-type').value.toUpperCase();
    const remarkSel = document.getElementById('remark-filter').value.toUpperCase();
    const locSel = document.getElementById('location-filter')?.value || "All";
    const rows = document.getElementById('device-table').getElementsByTagName('tbody')[0].rows;
    let count = 0;

    for (let row of rows) {
        const type = row.cells[3].textContent.toUpperCase();
        const remark = row.cells[9].textContent.trim().toUpperCase();
        const location = row.cells[4].textContent.trim();
        const show = (typeSel === 'ALL' || type === typeSel) &&
                     (remarkSel === 'ALL' || remark.includes(remarkSel)) &&
                     (locSel === 'All' || location === locSel);
        row.style.display = show ? '' : 'none';
        if (show) count++;
    }

    updateDisplayedDeviceCount(count);
}















document.addEventListener("DOMContentLoaded", () => {
    ['region', 'device-type', 'remark-filter', 'location-filter'].forEach(id => {
        const el = document.getElementById(id);
        if (el) el.addEventListener('change', id === 'region' ? fetchDeviceData : filterData);
    });
    fetchDeviceData();
});