
const renderTooltip = ({ active, payload }) => {
  if (!active || !payload?.length) return null;
  const item = payload[0]?.payload;
  if (!item) return null;

  const { name, headcount, capacity, percentage } = item;

  const breakdownEntries = Object.entries(item).filter(
    ([key]) =>
      !['name', 'headcount', 'capacity', 'percentage', '_color'].includes(key)
  );

  return (
    <div
      style={{
        backgroundColor: '#1a1a1a',
        color: '#FFD100',
        border: '1px solid var(--wu-yellow)',
        borderRadius: 4,
        padding: '0.75rem',
        minWidth: 180
      }}
    >
      <div style={{ marginBottom: 4, fontSize: '1rem' }}>
        <strong>{name}</strong>
      </div>
      <div style={{ marginBottom: 6, fontWeight: 'bold', fontSize: '0.9rem' }}>
        Headcount: {headcount} / {capacity} ({percentage}%)
      </div>
      {breakdownEntries.map(([type, value]) => (
        <div
          key={type}
          style={{
            display: 'flex',
            justifyContent: 'space-between',
            marginTop: 2,
            color: '#fff',
            fontSize: '0.85rem'
          }}
        >
          <span style={{ opacity: 0.8 }}>
            {type.charAt(0).toUpperCase() + type.slice(1)}
          </span>
          <span style={{ fontWeight: 'bold' }}>{value}</span>
        </div>
      ))}
    </div>
  );
};










// C:\Users\W0024618\Desktop\swipeData\client\src\components\FloorOccupancyChart.jsx


// src/components/FloorOccupancyChart.jsx

import React from 'react';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  CartesianGrid,
  Cell,
  LabelList,
  Legend
} from 'recharts';
import { Card } from 'react-bootstrap';
import floorCapacities from '../constants/floorCapacities';

// A single-color palette for “live headcount” bars
const FLOOR_COLOR_PALETTE = [
  ['#006400', '#CCFFCC']
];

export default function FloorOccupancyChart({ data = [] }) {
  if (!data.length) {
    return (
      <Card body className="bg-dark text-white">
        No floor data available
      </Card>
    );
  }

  // 1) Enrich each floor object with liveCount, capacity, usedPct, and breakdown
  const enriched = data.map((floorObj) => {
    const { floor, total: liveCount } = floorObj;
    const capacity = floorCapacities[floor] ?? 0;
    const usedPct = capacity > 0
      ? ((liveCount / capacity) * 100).toFixed(1)
      : '0.0';
    return {
      ...floorObj,           // includes breakdown fields: employees, contractors, etc.
      capacity,
      liveCount,
      usedPct: Number(usedPct),
      label: `${liveCount}/${capacity}`
    };
  });

  // 2) Compute “Pune Office Total” across all floors
  const totalLive = enriched.reduce((sum, f) => sum + f.liveCount, 0);
  const totalCap  = enriched.reduce((sum, f) => sum + f.capacity, 0);
  const totalUsedPct = totalCap > 0
    ? ((totalLive / totalCap) * 100).toFixed(1)
    : '0.0';

  const totalEntry = {
    floor: 'Pune Office Total',
    liveCount: totalLive,
    capacity: totalCap,
    usedPct: Number(totalUsedPct),
    label: `${totalLive}/${totalCap}`
  };

  // 3) Sort floors by liveCount descending, then prepend “Pune Office Total”
  const sortedFloors = [...enriched].sort((a, b) => b.liveCount - a.liveCount);
  const chartData = [totalEntry, ...sortedFloors];

  // 4) Determine the maximum capacity to set Y-axis domain
  const maxCapacity = Math.max(...chartData.map(f => f.capacity)) || 0;

  // 5) Custom tooltip to show raw counts, percentages, and breakdown
  const renderTooltip = ({ active, payload }) => {
    if (!active || !payload?.length) return null;
    const floorObj = payload[0].payload;
    const { liveCount, capacity, usedPct } = floorObj;

    const breakdownEntries = Object.entries(floorObj).filter(
      ([key]) =>
        !['floor', 'liveCount', 'capacity', 'usedPct', 'label'].includes(key)
    );

    return (
      <div
        style={{
          backgroundColor: '#1a1a1a',
          color: '#FFD100',
          border: '1px solid var(--wu-yellow)',
          borderRadius: 4,
          padding: '0.75rem',
          minWidth: 180
        }}
      >
        <div style={{ marginBottom: 4, fontSize: '1rem' }}>
          <strong>Floor: {floorObj.floor}</strong>
        </div>
        <div style={{ marginBottom: 6, fontWeight: 'bold', fontSize: '0.9rem' }}>
          Live: {liveCount} / {capacity} ({usedPct}%)
        </div>
        {breakdownEntries.map(([type, value]) => (
          <div
            key={type}
            style={{
              display: 'flex',
              justifyContent: 'space-between',
              marginTop: 2,
              color: '#fff',
              fontSize: '0.85rem'
            }}
          >
            <span style={{ opacity: 0.8 }}>
              {type.charAt(0).toUpperCase() + type.slice(1)}
            </span>
            <span style={{ fontWeight: 'bold' }}>{value}</span>
          </div>
        ))}
      </div>
    );
  };

  return (
    <Card className="mb-4 shadow-sm border" style={{ borderColor: 'var(--wu-yellow)' }}>
      <Card.Header className="bg-dark text-warning text-center fw-bold" style={{ borderBottom: '2px solid var(--wu-yellow)', fontSize: '1.2rem' }}>
        Western Union-Pune Headcount against Occupancy
      </Card.Header>

      <Card.Body style={{ height: '50vh', padding: 0, backgroundColor: 'var(--wu-gray-dark)' }}>
        <ResponsiveContainer width="100%" height="100%">
          <BarChart
            data={chartData}
            margin={{ top: 20, right: 24, left: 0, bottom: 24 }}
            barCategoryGap="1%"
          >
            {/* 6) Gradient for capacity bars (WU Yellow → WU Accent) */}
            <defs>
              <linearGradient id="capacity-gradient" x1="0" y1="0" x2="0" y2="1">
                <stop offset="0%" stopColor="#FFD100" stopOpacity={1} />
                <stop offset="100%" stopColor="#FFB800" stopOpacity={1} />
              </linearGradient>
              {/* 7) Single gradient for “live” bars */}
              {chartData.map((_, idx) => {
                const [darkColor, lightColor] =
                  FLOOR_COLOR_PALETTE[idx % FLOOR_COLOR_PALETTE.length];
                return (
                  <linearGradient
                    id={`live-grad-${idx}`}
                    key={`live-grad-${idx}`}
                    x1="0"
                    y1="0"
                    x2="0"
                    y2="1"
                  >
                    <stop offset="0%" stopColor={darkColor} stopOpacity={1} />
                    <stop offset="100%" stopColor={lightColor} stopOpacity={1} />
                  </linearGradient>
                );
              })}
            </defs>

            {/* 8) Grid and Axes */}
            <CartesianGrid stroke="#444" strokeDasharray="3 3" />
            <XAxis
              dataKey="floor"
              tick={{ fontSize: 12, fill: '#fff' }}
              position
              textAnchor="end"
              interval={0}
              height={50}
            />
            <YAxis
              tick={{ fontSize: 15, fill: '#fff' }}
              domain={[0, Math.ceil(maxCapacity / 50) * 50]}
            />

            {/* 9) Custom Tooltip */}
            <Tooltip content={renderTooltip} />

  {/* 10) Legend */}   
            <Legend
               verticalAlign="top"
               align="center"
               wrapperStyle={{ color: '#fff', paddingBottom: 8 }}
               payload={[
                 { value: 'Occupancy', type: 'square', color: '#FFD100' },
                 { value: 'Live HeadCount', type: 'square', color: '#006400' }
               ]}
             />

            {/* 11) Capacity bar – wider, WU Yellow gradient, white border */}
            <Bar
              dataKey="capacity"
              name="Occupancy"
              radius={[4, 4, 0, 0]}
              barSize={70}
              fill="url(#capacity-gradient)"
              stroke="#fff"
              strokeWidth={1}
            >
              {chartData.map((_, idx) => (
                <Cell key={`cap-cell-${idx}`} fill="url(#capacity-gradient)" />
              ))}
              <LabelList
                dataKey="capacity"
                position="top"
                formatter={(val) => val}
                style={{ fill: '#fff', fontSize: 15, fontWeight: 'bold' }}
              />
            </Bar>

            {/* 12) Live bar – narrower, multi-color gradient, white border */}
            <Bar
              dataKey="liveCount"
              name="Live HeadCount"
              radius={[4, 4, 0, 0]}
              barSize={70}
              stroke="#fff"
              strokeWidth={1}
            >
              {chartData.map((_, idx) => (
                <Cell
                  key={`live-cell-${idx}`}
                  fill={`url(#live-grad-${idx})`}
                />
              ))}

              {/* Label on top: raw count */}
              <LabelList
                dataKey="liveCount"
                position="top"
                formatter={(val) => val}
                style={{
                  fill: '#fff',
                  fontSize: 15,
                  fontWeight: 'bold',
                  backgroundColor: 'rgba(0,0,0,0.3)',
                  borderRadius: 2,
                  padding: '2px 4px'
                }}
              />

              {/* Label inside bar: percentage */}
              <LabelList
                dataKey="usedPct"
                position="center"
                formatter={(val) => `${val}%`}
                style={{ fill: '#fff', fontSize: 15, fontWeight: 'bold' }}
              />
            </Bar>
          </BarChart>
        </ResponsiveContainer>
      </Card.Body>
    </Card>
  );
}
.......

Read the above only tooltip code and write same in below code, careflly and 
// src/components/CompositeChartCard.jsx

import React from 'react';
import { Card, CardContent, Typography, Box } from '@mui/material';
import {
  ComposedChart,
  Bar,
  Line,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  CartesianGrid,
  Legend,
  LabelList,
  Cell
} from 'recharts';

import buildingCapacities from '../data/buildingCapacities';
import floorCapacities from '../data/floorCapacities';



const DARK_TO_LIGHT = [
  '#FFD666', '#FFE599', '#FFF2CC', '#FFE599', '#E0E1DD',
  '#FFD666', '#FFEE8C', '#F8DE7E', ' #FBEC5D', '#F0E68C',
  ' #FFEE8C', '#21325E', '#415A77', '#6A7F9A', '#B0C4DE',
  '#1A1F36', '#2B3353', '#4C6482', '#7B90B2', '#CAD3E9'
];

export default function CompositeChartCard({
  title,
  data,
  lineColor = '#fff',
  height = 350,
  animationDuration = 1500,
  animationEasing = 'ease-in-out',
  breakdownMap = {}
}) {
  if (!Array.isArray(data) || data.length === 0) {
    return (
      <Card sx={{ border: `1px solid #fff`, bgcolor: 'rgba(0,0,0,0.4)' }}>
        <CardContent>
          <Typography variant="subtitle1" align="center" color="text.secondary">
            {title}
          </Typography>
          <Typography variant="body2" align="center" sx={{ mt: 4 }}>
            No realtime employee data
          </Typography>
        </CardContent>
      </Card>
    );
  }
  // Enrich each datum with its usage percentage
  const enriched = data.map((d, i) => ({
    ...d,
    percentage: d.capacity ? Math.round(d.headcount / d.capacity * 100) : 0,
    _color: DARK_TO_LIGHT[i % DARK_TO_LIGHT.length]
  }));
  const totalHeadcount = enriched.reduce((sum, d) => sum + (d.headcount || 0), 0);
  const totalCapacity = enriched.reduce((sum, d) => sum + (d.capacity || 0), 0);
  const avgUsage = totalCapacity ? Math.round((totalHeadcount / totalCapacity) * 100) : 0;


  

  return (
    <Card
      sx={{
        // border: `1px solid ${lineColor}`,
        borderRadius: 2,
        overflow: 'hidden',
        bgcolor: 'rgba(0,0,0,0.4)',
        transition: 'transform 0.3s, box-shadow 0.3s',
        '&:hover': {
          transform: 'scale(1.02)',
          boxShadow: '0 4px 12px rgba(0,0,0,0.7)'
        }
      }}
    >
      <CardContent sx={{ p: 1 }}>
        <Typography
          variant="subtitle1"
          align="center"
          gutterBottom
          sx={{ color: '#FFC107' }}
        >
          {title}
        </Typography>

        <Box sx={{ width: '100%', height }}>
          <ResponsiveContainer>
            <ComposedChart
              data={enriched}
              margin={{ top: 15, right: 20, left: 0, bottom: 20 }}
            >
              <CartesianGrid strokeDasharray="3 3" stroke="rgba(255,255,255,0.1)" />


              <XAxis
                dataKey="name"
                tickLine={false}
                axisLine={false}
                stroke="rgba(255,255,255,0.6)"
                tickFormatter={(label, index) => {
                  const strLabel = String(label);
                  const match = strLabel.match(/\d+/); // Extract number from label like "Floor 3"
                  const floorNum = parseInt(match?.[0], 10);

                  if (isNaN(floorNum)) return strLabel; // fallback to raw label if no number found

                  const suffix = (n) => {
                    if (n % 100 >= 11 && n % 100 <= 13) return `${n}th`;
                    switch (n % 10) {
                      case 1: return `${n}st`;
                      case 2: return `${n}nd`;
                      case 3: return `${n}rd`;
                      default: return `${n}th`;
                    }
                  };

                  return suffix(floorNum);
                }}
              />


              <YAxis
                yAxisId="left"
                tickLine={false}
                axisLine={false}
                stroke="rgba(255,255,255,0.6)"
              />

              <YAxis
                yAxisId="right"
                orientation="right"
                tickLine={false}
                axisLine={false}
                stroke="rgba(255,255,255,0.6)"
                domain={[0, 100]}
                tickFormatter={val => `${val}%`}
              />

              {/* <Tooltip
                contentStyle={{ backgroundColor: '#FFD666', borderColor: lineColor }}
                formatter={(value, name) =>
                  name === 'percentage' ? `${value}%` : value
                }
              /> */}

                        <Tooltip content={renderTooltip} />





              {/* Headcount bars with per-bar colors & percentage labels */}
              <Bar
                yAxisId="left"
                dataKey="headcount"
                name="Headcount"
                barSize={700}
                isAnimationActive={false}
                animationDuration={0}
              // animationEasing={animationEasing}
              >
                {enriched.map((entry, idx) => (
                  <Cell key={`cell-${idx}`} fill={entry._color} />
                ))}


                {/* Show % on top of each bar */}
                <LabelList
                  dataKey="headcount"
                  position="top"
                  formatter={val => `${val}`}
                  style={{ fill: '#fff', fontSize: 15, fontWeight: 700 }}
                />

                {/* Percentage centered inside each bar */}
                <LabelList
                  dataKey="percentage"
                  position="inside"
                  formatter={val => `${val}%`}
                  style={{ fill: '#EE4B2B', fontSize: 14, fontWeight: 700 }}
                />
              </Bar>


              {/* Seat Capacity line */}
              <Line
                yAxisId="right"
                type="monotone"
                dataKey="percentage"
                name="Usage %"
                stroke='#FF0000'
                strokeWidth={2}
                dot={false}
                isAnimationActive
                animationDuration={animationDuration}
                animationEasing={animationEasing}
              />

              {/* Optional: draw capacity as second line */}
              <Line
                yAxisId="left"
                type="monotone"

                //  dataKey="capacity"
                name="Total Seats"
                stroke="#81C784"
                strokeDasharray="5 5"
                dot={false}
                isAnimationActive
                animationDuration={animationDuration}
                animationEasing={animationEasing}
              />
            </ComposedChart>
          </ResponsiveContainer>
        </Box>
        <Box
          sx={{
            display: 'flex',
            justifyContent: 'center',
            gap: 4,
            alignItems: 'center',
            mb: 1,
            fontWeight: 'bold',
            fontSize: 16
          }}
        >
          <Box sx={{ color: '#FFD700' /* Yellow */ }}>
            Total Headcount: {totalHeadcount}
          </Box>
          <Box sx={{ color: '#4CAF50' /* Green */ }}>
            Total Seats: {totalCapacity}
          </Box>
          <Box sx={{ color: '#FF4C4C' /* Red */ }}>
            Usage: {avgUsage}%
          </Box>
        </Box>
      </CardContent>
    </Card>
  );
