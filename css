// import React from 'react';
// import { Card, CardContent, Typography } from '@mui/material';
// import { PieChart, Pie, Cell, Tooltip, Legend } from 'recharts';

// const COLORS = ['#8884d8', '#82ca9d'];

// const PieChartCard = ({ title, data }) => (
//   <Card variant="outlined" sx={{ mb: 2 }}>
//     <CardContent>
//       <Typography variant="h6" gutterBottom>{title}</Typography>
//       <PieChart width={300} height={200}>
//         <Pie
//           data={data}
//           dataKey="value"
//           nameKey="name"
//           cx="50%"
//           cy="50%"
//           outerRadius={60}
//           label
//         >
//           {data.map((entry, index) => (
//             <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
//           ))}
//         </Pie>
//         <Tooltip />
//         <Legend />
//       </PieChart>
//     </CardContent>
//   </Card>
// );

// export default PieChartCard;



// // // src/components/PieChartCard.jsx

// // import React from 'react';
// // import { PieChart, Pie, Cell, Tooltip, ResponsiveContainer } from 'recharts';
// // import ChartCard from './ChartCard';

// // export default function PieChartCard({ title, data, colors }) {
// //   return (
// //     <ChartCard title={title}>
// //       <ResponsiveContainer width="100%" height={250}>
// //         <PieChart>
// //           <Pie data={data} dataKey="value" nameKey="name" outerRadius={80} label>
// //             {data.map((entry, index) => (
// //               <Cell key={entry.name} fill={colors[index % colors.length]} />
// //             ))}
// //           </Pie>
// //           <Tooltip />
// //         </PieChart>
// //       </ResponsiveContainer>
// //     </ChartCard>
// //   );
// // }


// //////////////////////


// src/components/PieChartCard.jsx
// import React from 'react';
// import { Card, CardContent, Typography } from '@mui/material';
// import { PieChart, Pie, Cell, Tooltip, Legend } from 'recharts';

// const DEFAULT_COLORS = ['#4E79A7', '#F28E2B', '#E15759', '#76B7B2', '#59A14F', '#EDC948'];

// const PieChartCard = ({ title, data, colors = DEFAULT_COLORS }) => (
//   <Card variant="outlined" sx={{ background: '#1E1E1E', color: '#fff' }}>
//     <CardContent>
//       <Typography variant="h6" gutterBottom sx={{ color: '#FFC72C' }}>
//         {title}
//       </Typography>
//       <PieChart width={500} height={450}>
//         <Pie
//           data={data}
//           dataKey="value"
//           nameKey="name"
//           cx="50%"
//           cy="50%"
//           outerRadius={80}
//           label
//         >
//           {data.map((entry, index) => (
//             <Cell key={`cell-${index}`} fill={colors[index % colors.length]} />
//           ))}
//         </Pie>
//         <Tooltip />
//         <Legend />
//       </PieChart>
//     </CardContent>
//   </Card>
// );



import React from 'react';
import { Card, CardContent, Typography, Box } from '@mui/material';
import { PieChart, Pie, Cell, Tooltip, Legend, ResponsiveContainer } from 'recharts';

export default function PieChartCard({
  title,
  data,
  colors = ['#FFC107', '#E0E0E0'],
  height = 300,
  showZeroSlice = false,
  animationDuration = 1500,
  noDataMessage = 'No realtime data',
  totalSeats = 0,
}) {


  const total = data.reduce((sum, d) => sum + d.value, 0);

  if (total === 0 && !showZeroSlice) {
    return (
      <Card sx={cardStyle(colors[0])}>
        <CardContent>
          <Typography variant="subtitle1" align="center" color="text.primary">
            {title}
          </Typography>
          <Typography variant="body2" align="center" sx={{ mt:4, color:'text.secondary' }}>
            {noDataMessage}
          </Typography>
        </CardContent>
      </Card>
    );
  }

  // If zero, and showZeroSlice==true, show single “Available” slice
  const renderData = (total === 0 && showZeroSlice)
    ? [{ name: 'Available', value: data[1]?.value || 0 }]
    : data;

  return (
    <Card sx={cardStyle(colors[0])}>
      <CardContent sx={{ p:1 }}>
        <Typography variant="subtitle1" align="center" color="text.primary">
          {title}
        </Typography>
        {/* <Box sx={{ width:'100%', height }}>
          <ResponsiveContainer>
            <PieChart> */}
        {/* wrap in relative container so we can overlay the total */}
        <Box sx={{ position: 'relative', width: '100%', height }}>
          <ResponsiveContainer>
            <PieChart>

              <Pie
                data={renderData}
                dataKey="value"
                nameKey="name"
                innerRadius={70}
                outerRadius={120}
                paddingAngle={4}
                isAnimationActive
                animationDuration={animationDuration}
              // show percent labels inside each slice
              label={({ percent }) => `${(percent * 100).toFixed(0)}%`}
              labelLine={false}

              >
                {renderData.map((_, i) => (
                  <Cell key={i} fill={colors[i % colors.length]} />
                ))}
              </Pie>
              <Tooltip contentStyle={{ backgroundColor:'#FFEE8C', borderColor:colors[0] }} />
              <Legend verticalAlign="bottom" wrapperStyle={{ color:'rgba(255,255,255,0.8)' }} />
           
           
            {/* </PieChart>
            
          </ResponsiveContainer>
        </Box> */}

            </PieChart>
          </ResponsiveContainer>

          {/* centered total */}
          <Box
            component="div"
            sx={{
              position: 'absolute',
              top: '50%',
              left: '50%',
              transform: 'translate(-50%, -50%)',
              pointerEvents: 'none'
            }}
          >
            <Typography variant="h4" align="center" sx={{ color: colors[0], fontWeight: 'bold' }}>
              {total}
            </Typography>
            <Typography variant="caption" align="center" sx={{ color: 'rgba(255,255,255,0.7)' }}>
              </Typography>
              

            <Typography variant="caption" align="center" sx={{ color: 'rgba(255,255,255,0.7)' }}>
              {/* of {totalSeats} seats */}
            </Typography>

          </Box>
        </Box>

      </CardContent>
    </Card>
  );
}

const cardStyle = borderColor => ({
  // border: `1px solid ${borderColor}`,
  borderRadius: 2,
  bgcolor: 'rgba(0,0,0,0.4)',
  // overflow: 'hidden',
  transition: 'transform 0.3s, box-shadow 0.3s',
  '&:hover': {
    transform: 'scale(1.02)',
    boxShadow: '0 4px 12px rgba(0,0,0,0.7)'
  }
});




