
const puneBreakdown = useMemo(() => {
  if (!pune || !pune.floors || !data?.realtime?.['Pune']?.allDetails) return {};
  const enriched = enrichFloorsWithTypes('Pune', pune.floors, data.realtime['Pune'].allDetails);
  return enriched.reduce((acc, curr) => {
    const { name, employee, contractors, visitor, propertyMgmt, tempBadge } = curr;
    acc[name] = {
      Employee: employee,
      Contractor: contractors,
      Visitor: visitor,
      'Property Management': propertyMgmt,
      'Temp Badge': tempBadge
    };
    return acc;
  }, {});
}, [pune, data]);





Compiled with problems:
Ã—
ERROR
[eslint] 
src\pages\Dashboard.jsx
  Line 158:27:  'puneBreakdown' is not defined  no-undef

Search for the keywords to learn more about each error.



// src/pages/Dashboard.jsx
import React from 'react';
import {
  Container, Box, Typography, Skeleton,
  Paper,
  colors
} from '@mui/material';

import Header from '../components/Header';
import Footer from '../components/Footer';

import { Grid, useTheme } from '@mui/material';

import SummaryCard from '../components/SummaryCard';
import CompositeChartCard from '../components/CompositeChartCard';
import PieChartCard from '../components/PieChartCard';

import { useLiveOccupancy } from '../hooks/useLiveOccupancy';
import { partitionList } from '../services/occupancy.service';
import buildingCapacities from '../data/buildingCapacities';
import { useMemo } from 'react';
import floorCapacities from '../data/floorCapacities';
import indiaFlag from '../assets/flags/india.png';
import japanFlag from '../assets/flags/japan.png';
import malaysiaFlag from '../assets/flags/malaysia.png';
import philippinesFlag from '../assets/flags/philippines.png';
import taguigFlag from '../assets/flags/Taguig.png';

const palette15 = [
  '#FFC107', '#E57373', '#4CAF50', '#FFEB3B', '#FFD666',
  '#8BC34A', '#3F51B5', '#9C27B0', '#00BCD4', '#8BC34A',
  '#FF9800', '#673AB7', '#009688', '#CDDC39', '#795548'
];

const flagMap = {
  'Pune': indiaFlag,
  'Quezon City': philippinesFlag,
  'JP.Tokyo': japanFlag,
  'MY.Kuala Lumpur': malaysiaFlag,
  'Taguig City': philippinesFlag
};



// Enrich floors with personnel type breakdown
function enrichFloorsWithTypes(partition, floors, allDetails) {
  return Object.entries(floors).map(([floorName, headcount]) => {
    const peopleOnFloor = allDetails.filter(
      (p) => p.PartitionName2 === partition && p.Door.includes(floorName)
    );

    return {
      name: floorName,
      headcount,
      capacity: floorCapacities?.[partition]?.[floorName] ?? 0,
      employee: peopleOnFloor.filter(p => p.PersonnelType === 'Employee').length,
      contractors: peopleOnFloor.filter(p => p.PersonnelType === 'Contractor').length,
      visitor: peopleOnFloor.filter(p => p.PersonnelType === 'Visitor').length,
      propertyMgmt: peopleOnFloor.filter(p => p.PersonnelType === 'Property Management').length,
      tempBadge: peopleOnFloor.filter(p => p.PersonnelType === 'Temp Badge').length,
      live: peopleOnFloor.length,
      total: headcount,
    };
  });
}



export default function Dashboard() {
  const { data, loading, error } = useLiveOccupancy(1000);




  const regions = data?.realtime || {};

  const partitions = useMemo(() => {
    return partitionList
      .map(name => {
        const key = Object.keys(regions).find(k => k.includes(name));
        const p = key && regions[key] ? regions[key] : {};
        return {
          name,
          total: p.total || 0,
          Employee: p.Employee || 0,
          Contractor: p.Contractor || 0,
          floors: p.floors || {},
          flag: flagMap[name] || null
        };
      })
      .sort((a, b) => b.total - a.total);
  }, [regions]);



  const todayTot = data?.today?.total || 0;
  const todayEmp = data?.today?.Employee || 0;
  const todayCont = data?.today?.Contractor || 0;
  const realtimeTot = partitions.reduce((sum, p) => sum + p.total, 0);
  const realtimeEmp = partitions.reduce((sum, p) => sum + p.Employee, 0);
  const realtimeCont = partitions.reduce((sum, p) => sum + p.Contractor, 0);
  const pune = partitions.find(p => p.name === 'Pune');
  const quezonCity = partitions.find(p => p.name === 'Quezon City');
  const combinedRegions = partitions.filter(p =>
    ['JP.Tokyo', 'MY.Kuala Lumpur', 'Taguig City'].includes(p.name)
  );
  const quezonData = useMemo(() => [
    { name: 'Employees', value: quezonCity?.Employee || 0 },
    { name: 'Contractors', value: quezonCity?.Contractor || 0 }
  ], [quezonCity?.Employee, quezonCity?.Contractor]);


  const asiaPacData = useMemo(() =>
    combinedRegions.map(r => ({
      name: r.name.replace(/^.*\./, ''),
      value: r.total,
      emp: r.Employee,
      cont: r.Contractor
    })),
    [combinedRegions]
  );




  if (error) {
    return (
      <Box width="100vw" py={4}>
        <Typography color="error" align="center">
          Error loading live data
        </Typography>
      </Box>
    );
  }

  const floors = Object.entries(pune?.floors || {});

  const chartConfigs = [
    {
      key: 'pune',
      title: 'Pune',
      body: pune?.total === 0
        ? (
          <Typography color="white" align="center" py={6}>
            No Pune data
          </Typography>
        )
        : (
          <CompositeChartCard
            data={floors.map(([f, h]) => ({
              name: f,
              headcount: h,
              capacity: buildingCapacities[f] || 0
            }))}
            lineColor={palette15[0]}
            height={250}
            sx={{ border: 'none' }}
            breakdownMap={puneBreakdown} // ðŸ‘ˆ This must be included
          />

        )
    },
    // {
    //   key: 'quezon',
    //   title: 'Quezon City',
    //   body: quezonCity?.total === 0
    //     ? (
    //       <Typography color="white" align="center" py={6}>
    //         No Quezon City data
    //       </Typography>
    //     )
    //     : (
    //       <PieChartCard
    //         data={quezonData}
    //         colors={['#4CAF50', '#F44336']}
    //         height={290}
    //         showZeroSlice
    //         sx={{ border: 'none' }}
    //       />

    //     )
    // },
    {
      key: 'quezon',
      title: 'Quezon City',
      body: quezonCity?.total === 0
        ? (
          <Typography color="white" align="center" py={6}>
            No Quezon City data
          </Typography>
        )
        : (
          <CompositeChartCard
            title=""
            data={[
              {
                name: "Quezon City (6thFloor)",
                headcount: data?.realtime?.["Quezon City"]?.floors?.["6th Floor"] ?? 0,
                capacity: buildingCapacities?.["Quezon City (6thFloor)"] ?? 0,
              },
              {
                name: "Quezon City (7thFloor)",
                headcount: data?.realtime?.["Quezon City"]?.floors?.["7th Floor"] ?? 0,
                capacity: buildingCapacities?.["Quezon City (7thFloor)"] ?? 0,
              },
            ]}
            lineColor={palette15[1]}
            height={250}
            sx={{ border: 'none' }}
          />
        )
    },
    {
      key: 'combined',
      title: 'Asia-Pacific',
      body: combinedRegions.length === 0
        ? (
          <Typography color="white" align="center" py={6}>
            No regional data
          </Typography>
        )
        : (
          <PieChartCard
            data={asiaPacData}
            colors={['#FFBF00', '#FFFAA0', '#B4C424']}
            height={320}
            showZeroSlice
            sx={{ border: 'none' }}
          />
        )
    }
  ];

  return (
    <>
      <Header title="APAC Live Occupancy" />
      <Container
        maxWidth={false}
        disableGutters
        // sx={{ py: 3, px: 2, background: 'rgba(0, 0, 0, 0.93)' }}
        sx={{
          py: 0,
          px: 2,
          background: 'linear-gradient(135deg, #0f0f0f 0%, #1c1c1c 100%)',
          color: '#f5f5f5',
          // minHeight: '100vh'
        }}
      >
        {/* ..................... */}
        {/* Top Summary Cards */}
        <Box display="flex" flexWrap="wrap" gap={1} mb={1}>
          {[
            {
              title: "Today's Total Headcount",

              color: '#FFE599',
              value: todayTot,
              icon: <i className="fa-solid fa-users" style={{ fontSize: 25, color: '#FFB300' }} />,
              border: '#FFB300',

            },
            {
              title: "Today's Employees Count",
              value: todayEmp,
              icon: <i className="bi bi-people" style={{ fontSize: 25, color: '#EF5350' }} />,
              border: '#8BC34A'
            },
            {
              title: "Today's Contractors Count",
              value: todayCont,
              icon: <i className="fa-solid fa-circle-user" style={{ fontSize: 25, color: '#8BC34A' }} />,
              border: '#E57373'
            },
            {
              title: "Realtime Headcount",
              value: realtimeTot,
              icon: <i className="fa-solid fa-users" style={{ fontSize: 25, color: '#FFB300' }} />,
              border: '#FFD180'
            },
            {
              title: "Realtime Employees Count",
              value: realtimeEmp,
              icon: <i className="bi bi-people" style={{ fontSize: 25, color: '#EF5350' }} />,
              border: '#AED581'
            },
            {
              title: "Realtime Contractors Count",
              value: realtimeCont,
              icon: <i className="fa-solid fa-circle-user" style={{ fontSize: 25, color: '#8BC34A' }} />,
              border: '#EF5350'
            }
          ].map(c => (
            <Box key={c.title} sx={{ flex: '1 1 calc(16.66% - 8px)' }}>
              <SummaryCard
                title={c.title}
                total={c.value}
                stats={[]}
                icon={c.icon}
                sx={{ height: 140, border: `2px solid ${c.border}` }}
              />
            </Box>
          ))}
        </Box>

        {/* Region Cards */}
        <Box display="flex" flexWrap="wrap" gap={1} mb={3}>
          {loading
            ? <Skeleton variant="rectangular" width="90%" height={200} />
            :
            partitions.map((p, index) => (
              <Box
                key={p.name}
                sx={{ flex: '1 1 calc(16.66% - 8px)' }}
              >
                <SummaryCard
                  title={
                    <Typography
                      variant="subtitle1"
                      sx={{
                        fontWeight: 'bold',
                        color: '#FFC107',  // Change this to your desired color
                        fontSize: '1.3rem'
                      }}
                    >
                      {p.name.replace(/^.*\./, '')}
                    </Typography>
                  }
                  total={p.total}
                  stats={[
                    { label: 'Employees', value: p.Employee, color: '#40E0D0' },
                    { label: 'Contractors', value: p.Contractor, color: 'green' }
                  ]}
                  sx={{
                    width: '100%',
                    border: `2px solid ${palette15[index % palette15.length]}`
                  }}
                  icon={
                    <Box
                      component="img"
                      src={p.flag}
                      sx={{ width: 48, height: 32 }}
                    />
                  }
                />
              </Box>
            ))
          }

        </Box>

        {/* .............. */}




        {/* Main Charts Section */}
        <Box display="flex" gap={2} flexWrap="wrap" mb={4}>
          {chartConfigs.map(({ key, title, body }) => (
            <Box
              key={key}
              sx={{
                flex: '1 1 32%',
                minWidth: 280,
                height: 405,
                animation: 'fadeInUp 0.5s'
              }}
            >
              <Paper
                sx={{
                  p: 2,
                  height: '100%',
                  background: 'rgba(0,0,0,0.4)',
                  border: '1px solid #FFC107',
                  display: 'flex',
                  flexDirection: 'column'
                }}
              >
                <Typography variant="h6" align="center" sx={{ color: '#FFC107', mb: 2 }}>
                  {title}
                </Typography>
                <Box sx={{ flex: 1, overflow: 'hidden' }}>
                  {body}
                </Box>
              </Paper>
            </Box>
          ))}
        </Box>



      </Container>
      <Footer />

    </>
  );
}


