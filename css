


// src/components/MapChart.jsx
import React, { useState, useEffect } from 'react';
import {
  ComposableMap,
  Geographies,
  Geography,
  Marker,
  ZoomableGroup,
} from 'react-simple-maps';
import { useTheme } from '@mui/material/styles';
import Box from '@mui/material/Box';
import IconButton from '@mui/material/IconButton';
import AddIcon from '@mui/icons-material/Add';
import RemoveIcon from '@mui/icons-material/Remove';

const geoUrl = '/world-110m.json';

// const apacList = [
//   { name: 'Pune, India', coords: [73.8567, 18.5204] },
//   { name: 'Quezon City, Philippines', coords: [121.0509, 14.6760] },
//   { name: 'Tokyo, Japan', coords: [139.6917, 35.6895] },
//   { name: 'Taguig City, Philippines', coords: [121.0437, 14.5547] },
//   { name: 'Kuala Lumpur, Malaysia', coords: [101.6869, 3.1390] },
// ];
// const lacaList = [
//   { name: 'San José, Costa Rica', coords: [-84.0907, 9.9281] },
//   { name: 'Mexico City, Mexico', coords: [-99.1332, 19.4326] },
//   { name: 'Buenos Aires, Argentina', coords: [-58.3816, -34.6037] },
//   { name: 'Panama City, Panama', coords: [-79.5167, 8.9833] },
//   { name: 'Lima, Peru', coords: [-77.0428, -12.0464] },
//   { name: 'Brasília, Brazil', coords: [-47.8825, -15.7942] },
// ];
// const emeaList = [
//   { name: 'Dubai, UAE', coords: [55.2708, 25.2048] },
//   { name: 'London, UK', coords: [-0.1278, 51.5074] },
//   { name: 'Dublin, Ireland', coords: [-6.2603, 53.3498] },
//   { name: 'Moscow, Russia', coords: [37.6173, 55.7558] },
//   { name: 'Casablanca, Morocco', coords: [-7.5898, 33.5731] },
//   { name: 'Vilnius, Lithuania', coords: [25.2797, 54.6872] },
// ];
// const namerList = [
//   { name: 'Denver, USA', coords: [-104.9903, 39.7392] },
//   { name: 'New York, USA', coords: [-74.0060, 40.7128] },
//   { name: 'Miami, USA', coords: [-80.1918, 25.7617] },
//   { name: 'Austin, USA', coords: [-97.7431, 30.2672] },
// ];



const apacList = [
  { name: 'Pune, India', coords: [73.8567, 18.5204], url: 'http://localhost:3000/pune' },
  { name: 'Quezon City, Philippines', coords: [121.0509, 14.6760], url: 'http://localhost:3000/Quezon City' },
  { name: 'Tokyo, Japan', coords: [139.6917, 35.6895], url: 'http://localhost:3000/Tokyo' },
  { name: 'Taguig City, Philippines', coords: [121.0437, 14.5547], url: 'http://localhost:3000/Tokyo' },
  { name: 'Kuala Lumpur, Malaysia', coords: [101.6869, 3.1390], url: 'http://localhost:3000/Kuala Lumpu' },
];

const lacaList = [
  { name: 'San José, Costa Rica', coords: [-84.0907, 9.9281], url: 'http://localhost:3000/San José' },
  { name: 'Mexico City, Mexico', coords: [-99.1332, 19.4326], url: 'http://localhost:3000/Mexico City' },
  { name: 'Buenos Aires, Argentina', coords: [-58.3816, -34.6037], url: 'http://localhost:3000/Buenos Aires' },
  { name: 'Panama City, Panama', coords: [-79.5167, 8.9833], url: 'http://localhost:3000/Panama City' },
  { name: 'Lima, Peru', coords: [-77.0428, -12.0464], url: 'http://localhost:3000/Lima' },
  { name: 'Brasília, Brazil', coords: [-47.8825, -15.7942], url: 'http://localhost:3000/Brasília' },
];

const emeaList = [
  { name: 'Dubai, UAE', coords: [55.2708, 25.2048], url: 'http://localhost:3000/Dubai' },
  { name: 'London, UK', coords: [-0.1278, 51.5074], url: 'http://localhost:3000/London' },
  { name: 'Dublin, Ireland', coords: [-6.2603, 53.3498], url: 'http://localhost:3000/Dublin' },
  { name: 'Moscow, Russia', coords: [37.6173, 55.7558], url: 'http://localhost:3000/Moscow' },
  { name: 'Casablanca, Morocco', coords: [-7.5898, 33.5731], url: 'http://localhost:3000/Casablanca' },
  { name: 'Vilnius, Lithuania', coords: [25.2797, 54.6872], url: 'http://localhost:3000/Vilnius' },
];

const namerList = [
  { name: 'Denver, USA', coords: [-104.9903, 39.7392], url: 'http://localhost:3000/Denver' },
  { name: 'New York, USA', coords: [-74.0060, 40.7128], url: 'http://localhost:3000/New York' },
  { name: 'Miami, USA', coords: [-80.1918, 25.7617], url: 'http://localhost:3000/Miami' },
  { name: 'Austin, USA', coords: [-97.7431, 30.2672], url: 'http://localhost:3000/Austin' },
];

const REGION_COUNTRIES = {
  global: [...apacList, ...emeaList, ...lacaList, ...namerList],
  apac: apacList,
  emea: emeaList,
  laca: lacaList,
  namer: namerList,
};

const regionOrder = ['global', 'apac', 'emea', 'laca', 'namer'];
function getColor(region, palette) {
  return palette[regionOrder.indexOf(region) % palette.length];
}

// For each “secondary” city, shift south by 1° & only show on hover
const SECONDARY_OFFSETS = {
  'Taguig City, Philippines': [0, -1],
  'Panama City, Panama': [0, -1],
  'Dublin, Ireland': [0, -1],
  'Moscow, Russia': [0, -1],
};

export default function MapChart({ selected = 'global', onClickSite, initialZoom = 5, }) {
  const theme = useTheme();
  const brands = theme.palette.brand.colors;

  // Zoom & center
  // const [zoom, setZoom] = useState();

  // Zoom & center
  // Use a ref to know if we’re mounting for the first time
  const firstMount = React.useRef(true);
  const [zoom, setZoom] = useState(initialZoom);


  const [center, setCenter] = useState([0, 20]);
  useEffect(() => {


    // recenter every time region changes
    if (selected === 'global') {
      setCenter([0, 13]);
      // only reset zoom on first mount if you want; otherwise keep whatever zoom is
      if (firstMount.current) {
        setZoom(initialZoom);
        firstMount.current = false;
      }
    } else {

      const list = REGION_COUNTRIES[selected] || [];
      if (list.length) {
        setCenter(list[0].coords);
        setZoom(selected === 'apac' || selected === 'emea' ? 2 : 3);
      }
    }
  }, [selected]);

  const handleZoomIn = () => setZoom(z => Math.min(z * 1.9, 10));
  const handleZoomOut = () => setZoom(z => Math.max(z / 1.5, 1));

  // Build markers with label / tooltip behavior
  const markers = REGION_COUNTRIES[selected].map((m, idx) => {
    const [city] = m.name.split(',');
    const isSecondary = SECONDARY_OFFSETS[m.name] !== undefined;
    const offset = SECONDARY_OFFSETS[m.name] || [0, 0];
    const coords = isSecondary
      ? [m.coords[0] + offset[0], m.coords[1] + offset[1]]
      : m.coords;

    return {
      name: city.trim(),
      coords,
      color: brands[idx % brands.length],
      showLabel: !isSecondary,
      tooltip: isSecondary ? city.trim() : null,
      url: m.url, // ✅ Include URL from the data
    };
  });

  return (
    <Box sx={{ position: 'relative', width: '100%', height: '100%' }}>
      {/* Zoom Controls */}
      <Box
        sx={{
          position: 'absolute',
          top: 8,
          right: 8,
          display: 'flex',
          flexDirection: 'column',
          zIndex: 10,
        }}
      >
        <IconButton size="small" onClick={handleZoomIn}>
          <AddIcon fontSize="small" />
        </IconButton>
        <IconButton size="small" onClick={handleZoomOut}>
          <RemoveIcon fontSize="small" />
        </IconButton>
      </Box>

      <ComposableMap
        projectionConfig={{ rotate: [-10, 0, 0], scale: 150 }}
        style={{
          width: '100%',
          height: '100%',

          // border: '1px solid #d0d0d0', // professional border
          borderRadius: '12px',
          boxShadow: '0 4px 20px rgba(0, 0, 0, 0.1)',
        }}
      >
        <ZoomableGroup center={center} zoom={zoom}>
          {/* Countries */}
          <Geographies geography={geoUrl}>
            {({ geographies }) =>
              geographies.map(geo => {
                const name = geo.properties.NAME;
                const inRegion = REGION_COUNTRIES[selected].some(
                  c => c.name.split(',').pop().trim() === name
                );
                return (
                  <Geography
                    key={geo.rsmKey}
                    geography={geo}
                    fill={
                      inRegion
                        ? getColor(selected, brands)
                        : theme.palette.grey[900]
                    }
                    stroke={theme.palette.grey[700]}
                    strokeWidth={0.5}
                    style={{ default: { outline: 'none' } }}
                  />
                );
              })
            }
          </Geographies>

          {/* Markers */}
          {/* {markers.map((m, i) => {
            const r = 1 * zoom;
            return (
              <Marker key={i} coordinates={m.coords} onClick={() => onClickSite(selected)}>
                <svg
                  width={4 * zoom}
                  height={4 * zoom}
                  viewBox="0 0 16 16"
                  fill={m.color}
                  xmlns="http://www.w3.org/2000/svg"
                  style={{ transform: 'translate(-8px, -16px)' }}
                >
                  <path d="M8 0a5 5 0 0 0-5 5c0 4.25 5 11 5 11s5-6.75 5-11a5 5 0 0 0-5-5zm0 7a2 2 0 1 1 0-4 2 2 0 0 1 0 4z" />
                  {m.tooltip && <title>{m.tooltip}</title>}
                </svg>

                {m.showLabel && (
                  <text
                    textAnchor="middle"
                    y={-12 * zoom} // pushes text farther above
                    fill={m.color}
                    fontSize={3 * zoom}
                    fontWeight="bold"
                    style={{
                      paintOrder: 'stroke', // ensures contrast with background
                      // stroke: 'white',
                      strokeWidth: 1,
                      strokeLinejoin: 'round',
                    }}
                  >
                    {m.name}
                  </text>
                )}
              </Marker>
            );
          })} */}



          {markers.map((m, i) => {
            const r = 1 * zoom;
            return (
              <Marker
                key={i}
                coordinates={m.coords}
                onClick={() => {
                  if (m.url) {
                    window.open(m.url); // ✅ Use URL from data
                  }
                }}
                style={{ cursor: 'pointer' }}
              >
                <svg
                  width={5 * zoom}
                  height={5 * zoom}
                  viewBox="0 0 16 16"
                  fill={m.color}
                  xmlns="http://www.w3.org/2000/svg"
                  style={{ transform: 'translate(-8px, -16px)', cursor: 'pointer' }}
                >
                  <path d="M8 0a5 5 0 0 0-5 5c0 4.25 5 11 5 11s5-6.75 5-11a5 5 0 0 0-5-5zm0 7a2 2 0 1 1 0-4 2 2 0 0 1 0 4z" />
                  {m.tooltip && <title>{m.tooltip}</title>}
                </svg>

                {m.showLabel && (
                  <text
                    textAnchor="middle"
                    y={-12 * zoom}
                    fill={m.color}
                    fontSize={5 * zoom}
                    fontWeight="bold"
                    style={{
                      paintOrder: 'stroke',
                      strokeWidth: 1,
                      strokeLinejoin: 'round',
                      cursor: 'pointer', // Ensure text also shows pointer
                    }}
                  >
                    {m.name}
                  </text>
                )}
              </Marker>
            );
          })}


        </ZoomableGroup>
      </ComposableMap>
    </Box>
  );
}



