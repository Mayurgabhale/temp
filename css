import React, { useMemo } from 'react'; // Add useMemo if not already imported

const renderData = useMemo(() => {
  const rawData = (total === 0 && showZeroSlice)
    ? [{ name: 'Available', value: data[1]?.value || 0 }]
    : data;

  const sum = rawData.reduce((acc, d) => acc + d.value, 0);

  return rawData.map(d => ({
    ...d,
    percent: sum > 0 ? d.value / sum : 0
  }));
}, [JSON.stringify(data), total, showZeroSlice]);










const renderData = useMemo(() => {
  const rawData = (total === 0 && showZeroSlice)
    ? [{ name: 'Available', value: data[1]?.value || 0 }]
    : data;

  return rawData.map(d => ({
    ...d,
    percent: total > 0 ? d.value / total : 0,
  }));
}, [JSON.stringify(data), total, showZeroSlice]); // compare actual values, not just reference





same blink issue for below cod also slove it same above 


import React from 'react';
import { Card, CardContent, Typography, Box } from '@mui/material';
import { PieChart, Pie, Cell, Tooltip, Legend, ResponsiveContainer } from 'recharts';

export default function PieChartCard({
  title,
  data,
  colors = ['#FFC107', '#E0E0E0'],
  height = 350,
  showZeroSlice = false,
  animationDuration = 1500,
  noDataMessage = 'No realtime data',
  totalSeats = 0,
}) {


  const total = data.reduce((sum, d) => sum + d.value, 0);

  if (total === 0 && !showZeroSlice) {
    return (
      <Card sx={cardStyle(colors[0])}>
        <CardContent>
          <Typography variant="subtitle1" align="center" color="text.primary">
            {title}
          </Typography>
          <Typography variant="body2" align="center" sx={{ mt:4, color:'text.secondary' }}>
            {noDataMessage}
          </Typography>
        </CardContent>
      </Card>
    );
  }

  // If zero, and showZeroSlice==true, show single “Available” slice
  const renderData = (total === 0 && showZeroSlice)
    ? [{ name: 'Available', value: data[1]?.value || 0 }]
    : data;

  return (
    <Card sx={cardStyle(colors[0])}>
      <CardContent sx={{ p:1 }}>
        <Typography variant="subtitle1" align="center" color="text.primary">
          {title}
        </Typography>
        {/* <Box sx={{ width:'100%', height }}>
          <ResponsiveContainer>
            <PieChart> */}
        {/* wrap in relative container so we can overlay the total */}
        <Box sx={{ position: 'relative', width: '100%', height }}>
          <ResponsiveContainer>
            <PieChart>

              <Pie
                data={renderData}
                dataKey="value"
                nameKey="name"
                innerRadius={60}
                outerRadius={120}
                paddingAngle={4}
                isAnimationActive={false}
                animationDuration={0}
              // show percent labels inside each slice
              label={({ percent }) => `${(percent * 100).toFixed(0)}%`}
              labelLine={false}

              >
                {renderData.map((_, i) => (
                  <Cell key={i} fill={colors[i % colors.length]} />
                ))}
              </Pie>
              <Tooltip contentStyle={{ backgroundColor:'#FFEE8C', borderColor:colors[0] }} />
              <Legend verticalAlign="bottom" wrapperStyle={{ color:'rgba(255,255,255,0.8)' }} sx={{ mt:7}} />
           
           
            {/* </PieChart>
            
          </ResponsiveContainer>
        </Box> */}

            </PieChart>
          </ResponsiveContainer>

          {/* centered total */}
          <Box
            component="div"
            sx={{
              position: 'absolute',
              top: '50%',
              left: '50%',
              transform: 'translate(-50%, -50%)',
              pointerEvents: 'none'
            }}
          >
            <Typography variant="h4" align="center" sx={{ color: colors[0], fontWeight: 'bold' }}>
              {total}
            </Typography>
            <Typography variant="caption" align="center" sx={{ color: 'rgba(255,255,255,0.7)' }}>
              </Typography>
              

            <Typography variant="caption" align="center" sx={{ color: 'rgba(255,255,255,0.7)' }}>
              {/* of {totalSeats} seats */}
            </Typography>

          </Box>
        </Box>

      </CardContent>
    </Card>
  );
}

const cardStyle = borderColor => ({
  // border: `1px solid ${borderColor}`,
  borderRadius: 2,
  bgcolor: 'rgba(0,0,0,0.4)',
  // overflow: 'hidden',
  transition: 'transform 0.3s, box-shadow 0.3s',
  '&:hover': {
    transform: 'scale(1.02)',
    boxShadow: '0 4px 12px rgba(0,0,0,0.7)'
  }
});




