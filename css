this is emea dashboard i want same dashboard for apac in dark this
read this emea code line by line and create apac dashboard carefully 
//C:\Users\W0024618\Desktop\emea-occupancy-frontend\src\pages\Dashboard.jsx


// src/pages/Dashboard.jsx

import React, { useEffect, useState } from 'react';
import { Container, Box, Typography, Skeleton } from '@mui/material';
import GroupIcon from '@mui/icons-material/Group';
import TrackChangesIcon from '@mui/icons-material/TrackChanges';
import PeopleIcon from '@mui/icons-material/People';
import BusinessCenterIcon from '@mui/icons-material/BusinessCenter';

import Header from '../components/Header';
import Footer from '../components/Footer';
import SummaryCard from '../components/SummaryCard';
import CompositeChartCard from '../components/CompositeChartCard';
import PieChartCard from '../components/PieChartCard';
import LoadingSpinner from '../components/LoadingSpinner';
import { useLiveOccupancy } from '../hooks/useLiveOccupancy';

import doorMapRaw from '../utils/doorMap';

// Flags
import austriaFlag from '../assets/flags/austria.png';
import uaeFlag from '../assets/flags/uae.png';
import irelandFlag from '../assets/flags/ireland.png';
import italyFlag from '../assets/flags/italy.png';
import lithuaniaFlag from '../assets/flags/lithuania.png';
import moroccoFlag from '../assets/flags/morocco.png';
import russiaFlag from '../assets/flags/russia.png';
import ukFlag from '../assets/flags/uk.png';
import spainFlag from '../assets/flags/spain.png';

const partitions = [
  'AUT.Vienna', 'DU.Abu Dhab', 'IE.Dublin', 'IT.Rome',
  'LT.Vilnius', 'MA.Casablanca', 'RU.Moscow', 'UK.London', 'ES.Madrid'
];
const displayName = {
  'AUT.Vienna': 'Vienna',
  'DU.Abu Dhab': 'Abu Dhabi',
  'IE.Dublin': 'Dublin',
  'IT.Rome': 'Rome',
  'LT.Vilnius': 'Vilnius',
  'MA.Casablanca': 'Casablanca',
  'RU.Moscow': 'Moscow',
  'UK.London': 'London',
  'ES.Madrid': 'Madrid'
};
const flagMap = {
  'AUT.Vienna': austriaFlag,
  'DU.Abu Dhab': uaeFlag,
  'IE.Dublin': irelandFlag,
  'IT.Rome': italyFlag,
  'LT.Vilnius': lithuaniaFlag,
  'MA.Casablanca': moroccoFlag,
  'RU.Moscow': russiaFlag,
  'UK.London': ukFlag,
  'ES.Madrid': spainFlag
};
const colorsMap = {
  'AUT.Vienna': ['#FFD666', '#fcf3cf', '#2ecc71', '#ec7063'],
  'DU.Abu Dhab': ['#FFE599', '#fcf3cf', '#2ecc71', '#ec7063'],
  'IE.Dublin': ['#FFF2CC', '#fcf3cf', '#2ecc71', '#ec7063'],
  'IT.Rome': ['#FFD666', '#fcf3cf', '#2ecc71', '#ec7063'],
  'LT.Vilnius': ['#FFE599', '#fcf3cf', '#2ecc71', '#ec7063'],
  'MA.Casablanca': ['#FFF2CC', '#fcf3cf', '#2ecc71', '#ec7063'],
  'RU.Moscow': ['#FFD666', '#fcf3cf', '#2ecc71', '#ec7063'],
  'UK.London': ['#FFE599', '#fcf3cf', '#2ecc71', '#ec7063'],
  'ES.Madrid': ['#FFC0CB', '#fcf3cf', '#2ecc71', '#ec7063']
};

// Vilnius door → building
const vilniusMap = doorMapRaw.reduce((acc, { partition, door }) => {
  if (partition === 'LT.Vilnius') {
    acc[door] = door.toUpperCase().includes('GAMA') ? 'GAMA' : 'Delta';
  }
  return acc;
}, {});




export default function Dashboard() {
  const { data, loading, error } = useLiveOccupancy(1000);
  const [lastUpdate, setLastUpdate] = useState('');

  useEffect(() => {
    if (data) setLastUpdate(new Date().toLocaleTimeString());
  }, [data]);

  if (error) {
    return <Box py={4}><Typography color="error" align="center">Error loading live data</Typography></Box>;
  }

  // Vilnius breakdown
  // const counts = { GAMA: 0, Delta: 0 };
  // (data?.details || []).forEach(r => {
  //   if (r.PartitionName2 === 'LT.Vilnius' && r.Direction === 'InDirection') {
  //     const b = vilniusMap[r.Door];
  //     if (b) counts[b]++;
  //   }
  // });
  // const vilniusFloors = Object.entries(counts).map(([name, headcount]) => ({ name, headcount, capacity: 0 }));

  // Vilnius floor-wise breakdown from realtime data
  const vilniusRealtimeFloors = data?.realtime?.['LT.Vilnius']?.floors || {};

  const floorCapacities = {
    // '1st Floor': 90,
    '2nd Floor': 74,
    '3rd Floor': 97,
    '4th Floor': 97,
    '5th Floor': 97,
    '6th Floor': 143,
    '7th Floor': 141,
    '8th Floor': 147,
    '9th Floor': 153,
    '10th Floor': 135,

    // Add/adjust these based on real capacity per floor
  };

  const vilniusFloors = Object.entries(vilniusRealtimeFloors).map(([floor, headcount]) => ({
    name: floor,
    headcount,
    capacity: floorCapacities[floor] || 0
  }));

  // Vilnius door → building
const vilniusMap = doorMapRaw.reduce((acc, { partition, door }) => {
  if (partition === 'LT.Vilnius') {
    acc[door] = door.toUpperCase().includes('GAMA') ? 'GAMA' : 'Delta';
  }
  return acc;
}, {});

  // Donut slices
  const slice1 = partitions.slice(0, 4).map(k => ({ name: displayName[k], value: data?.realtime?.[k]?.total || 0 }));
  const slice2 = partitions.slice(5).map(k => ({ name: displayName[k], value: data?.realtime?.[k]?.total || 0 }));

  // Summary cards
  const todayTot = data?.today.total || 0;
  const todayEmp = data?.today.Employee || 0;
  const todayCon = data?.today.Contractor || 0;
  const realtimeTot = Object.values(data?.realtime || {}).reduce((s, x) => s + (x.total || 0), 0);
  const realtimeEmp = Object.values(data?.realtime || {}).reduce((s, x) => s + (x.Employee || 0), 0);
  const realtimeCon = Object.values(data?.realtime || {}).reduce((s, x) => s + (x.Contractor || 0), 0);

  // Build per-site items
  const summaryItems = [];
  summaryItems.push({
    label: 'Vilnius',
    total: data?.realtime['LT.Vilnius']?.total || 0,
    emp: data?.realtime['LT.Vilnius']?.Employee || 0,
    cont: data?.realtime['LT.Vilnius']?.Contractor || 0,
    flag: flagMap['LT.Vilnius'], colors: colorsMap['LT.Vilnius']
  });
  partitions.filter(k => k !== 'LT.Vilnius').forEach(k => {
    const x = data?.realtime[k] || {};
    summaryItems.push({ label: displayName[k], total: x.total || 0, emp: x.Employee || 0, cont: x.Contractor || 0, flag: flagMap[k], colors: colorsMap[k] });
  });

  return (
    <>
      <Header />
      <Container maxWidth={false} disableGutters sx={{ px: 2, py: 1 }}>

        
        <Box display="flex" flexWrap="wrap" gap={1} mb={2}>
          {[
            {
              title: "Today's Total Headcount",
              value: todayTot,
              icon: <i className="fa-solid fa-users" style={{ color: '#E57373', fontSize: 25 }} />,
              border: '#FFD666'
            },
            {
              title: "Today's Employees Count",
              value: todayEmp,
              icon: <i className="bi bi-people" style={{ color: '#81C784', fontSize: 25 }} />,
              border: '#81C784'
            },
            {
              title: "Today's Contractors Count",
              value: todayCon,
              icon: <i className="fa-solid fa-circle-user" style={{ color: '#81C784', fontSize: 25 }} />,
              border: '#FFE599'
            },
            {
              title: "Realtime Headcount",
              value: realtimeTot,
              icon: <i className="fa-solid fa-users" style={{ color: '#BA68C8', fontSize: 25 }} />,
              border: '#FFF2CC'
            },
            {
              title: "Realtime Employees Count",
              value: realtimeEmp,
              icon: <i className="bi bi-people" style={{ color: '#81C784', fontSize: 25 }} />,
              border: '#FFD666'
            },
            {
              title: "Realtime Contractors Count",
              value: realtimeCon,
              icon: <i className="fa-solid fa-circle-user" style={{ color: '#BA68C8', fontSize: 25 }} />,
              border: '#FFE599'
            }
          ].map(c => (
            <Box key={c.title} sx={{ flex: '1 1 calc(16.66% - 8px)' }}>
              <SummaryCard
                title={c.title}
                total={c.value}
                stats={[]}
                icon={c.icon}
                sx={{ height: 140, border: `2px solid ${c.border}` }}
              />
            </Box>
          ))}
        </Box>



        <Box display="flex" flexWrap="wrap" gap={1} mb={4}>
          {loading ? <LoadingSpinner />
            : summaryItems.map(item => {
              const [tc, totc, ec, cc] = item.colors;
              return (
                // <Box key={item.label} sx={{ flex: '1 1 calc(16.66% - 8px)' }}>
                <Box key={item.label} sx={{ flex: '1 1 calc(10.66% - 1px)' }}>
                  <SummaryCard
                    title={item.label}
                    total={item.total}
                    stats={[{ label: 'Employees', value: item.emp }, { label: 'Contractors', value: item.cont }]}
                    icon={item.flag && <Box component="img" src={item.flag} alt={item.label} sx={{ width: 50, height: 30, border: '1px solid #fff' }} />}
                    titleColor={tc} totalColor={totc} statColors={[ec, cc]}
                    sx={{
                      height: 180,
                      border: `2px solid ${tc}`,
                      '& .MuiTypography-subtitle1': { fontSize: '1.3rem' },
                      '& .MuiTypography-h4': { fontSize: '1.7rem' },
                      '& .MuiTypography-caption': { fontSize: '0.875rem' }
                    }}
                  />
                </Box>
              )
            })
          }
        </Box>



        {/* Live charts row */}
        <Box display="flex" gap={2} mb={4} flexWrap="wrap">

          {/* 1) Vilnius composite */}
          <Box flex="1 1 0" sx={{ border: '2px solid #FFC107', borderRadius: 2, p: 2, background: 'rgba(0,0,0,0.6)' }}>

            {loading ? (
              <Skeleton variant="rectangular" height={350} />
            ) : (
              <CompositeChartCard
                title="Vilnius "
                data={vilniusFloors}
                barColor="#4CAF50"
                lineColor="#FF0000"
                height={410}
                animationDuration={1500}
                animationEasing="ease-in-out"
              />
            )}
          </Box>

          {/* 2) Top regions donut */}
          <Box flex="1 1 0" sx={{ border: '2px solid #FFC107', borderRadius: 2, p: 2, background: 'rgba(0,0,0,0.6)' }}>

            {loading ? (
              <Skeleton variant="rectangular" height={350} />
            ) : (
              <PieChartCard
                title="Vienna • Abu Dhabi • Dublin • Rome"
                data={slice1}
                colors={['#4E79A7', '#F28E2B', '#E15759', '#76B7B2']}
                innerRadius={60}
                height={410}
                showZeroSlice
                animationDuration={1500}
                sx={{title:{color:'#FFC107'}}}
              />
            )}
          </Box>

          {/* 3) Other regions donut */}
          <Box flex="1 1 0" sx={{ border: '2px solid #FFC107', borderRadius: 2, p: 2, background: 'rgba(0,0,0,0.6)' }}>

            {loading ? (
              <Skeleton variant="rectangular" height={350} />
            ) : (
              <PieChartCard
                title="Casablanca • Moscow • London • Madrid"
                data={slice2}
                colors={['#59A14F', '#EDC948', '#AF7AA1', '#EFBF04']}
                innerRadius={60}
                height={410}
                showZeroSlice
                animationDuration={1500}
              />
            )}
          </Box>

        </Box>
      </Container>
      
      {/* <Footer /> */}
      
      <footer
        style={{
          backgroundColor: '#000',
          color: '#FFC72C',
          padding: '1.5rem 0',
          textAlign: 'center',
          // marginTop: '1rem',
          borderTop: '2px solid #FFC72C',
          fontSize: '0.95rem',
          lineHeight: '1.6'
        }}
      >
        <div>
          <strong>Global Security Operations Center (GSOC)</strong>

          Live Occupancy dashboard for Western Union Denver — Real-time occupancy, floor activity, and personnel insights.
        </div>
        <div style={{ marginTop: '0.75rem' }}>
          Contact us: <a href="mailto:GSOC-GlobalSecurityOperationCenter.SharedMailbox@westernunion.com" style={{ color: '#FFC72C', textDecoration: 'underline' }}>gsoc@westernunion.com</a> |
          Landline: <span style={{ color: '#FFC72C' }}>+91-020-67632394</span>
        </div>
      </footer>

    </>
  );
}





...................
C:\Users\W0024618\Desktop\apac-occupancy-frontend\src\pages\Dashboard.jsx

import React, { useEffect, useState } from 'react';
import { Container, Box, Typography, Grid } from '@mui/material';
import GroupIcon from '@mui/icons-material/Group';
import TrackChangesIcon from '@mui/icons-material/TrackChanges';
import PeopleIcon from '@mui/icons-material/People';
import BusinessCenterIcon from '@mui/icons-material/BusinessCenter';

import Header from '../components/Header';
import Footer from '../components/Footer';
import SummaryCard from '../components/SummaryCard';
import CompositeChartCard from '../components/CompositeChartCard';
import PieChartCard from '../components/PieChartCard';
import LoadingSpinner from '../components/LoadingSpinner';
import { useLiveOccupancy } from '../hooks/useLiveOccupancy';

import seatCapacities from '../data/buildingCapacities';

// Flags (already imported in Header as well)
import indiaFlag from '../assets/flags/india.png';
import phFlag from '../assets/flags/philippines.png';
import japanFlag from '../assets/flags/japan.png';
import malaysiaFlag from '../assets/flags/malaysia.png';

export default function Dashboard() {
  const { data, loading, error } = useLiveOccupancy(1000);
  const [lastUpdate, setLastUpdate] = useState('');

  useEffect(() => {
    if (data) setLastUpdate(new Date().toLocaleTimeString());
  }, [data]);

  if (error) {
    return (
      <Box py={4}>
        <Typography color="error" align="center">Error loading live data</Typography>
      </Box>
    );
  }

  // APAC partitions
  const partitions = ['Pune', 'Quezon City', 'JP.Tokyo', 'MY.Kuala Lumpur', 'Taguig City'];
  const displayName = {
    Pune: 'Pune',
    'Quezon City': 'Quezon City',
    'JP.Tokyo': 'Tokyo',
    'MY.Kuala Lumpur': 'Kuala Lumpur',
    'Taguig City': 'Taguig'
  };
  const flagMap = {
    Pune: indiaFlag,
    'Quezon City': phFlag,
    'JP.Tokyo': japanFlag,
    'MY.Kuala Lumpur': malaysiaFlag,
    'Taguig City': phFlag
  };
  const colorsMap = {
    Pune: ['#FFD666', '#fcf3cf', '#2ecc71', '#ec7063'],
    'Quezon City': ['#FFE599', '#fcf3cf', '#2ecc71', '#ec7063'],
    'JP.Tokyo': ['#FFF2CC', '#fcf3cf', '#2ecc71', '#ec7063'],
    'MY.Kuala Lumpur': ['#FFD666', '#fcf3cf', '#2ecc71', '#ec7063'],
    'Taguig City': ['#FFE599', '#fcf3cf', '#2ecc71', '#ec7063']
  };

  // Donut chart slices (for example, split APAC sites into two slices)
  const slice1 = partitions.slice(0, 3).map(k => ({
    name: displayName[k],
    value: data?.realtime?.[k]?.total || 0
  }));
  const slice2 = partitions.slice(3).map(k => ({
    name: displayName[k],
    value: data?.realtime?.[k]?.total || 0
  }));

  // Summary cards data (one per site)
  const summaryItems = partitions.map(site => {
    const x = data?.realtime?.[site] || {};
    return {
      label: displayName[site],
      total: x.total || 0,
      emp: x.Employee || 0,
      cont: x.Contractor || 0,
      flag: flagMap[site],
      colors: colorsMap[site]
    };
  });

  // Example of floor breakdown for Pune (if needed on this page or on partition page)
  // const puneFloors = Object.entries(data?.realtime?.Pune?.floors || {}).map(
  //   ([floor, headcount]) => ({
  //     name: floor,
  //     headcount,
  //     capacity: seatCapacities[floor] || 0
  //   })
  // );

  return (
    <Container maxWidth="lg" sx={{ pb: 4 }}>
      <Header />

      {/* Summary Cards */}
      <Grid container spacing={2} sx={{ mb: 4 }}>
        {summaryItems.map(item => (
          <Grid key={item.label} item xs={12} sm={6} md={4} lg={2}>
            <SummaryCard
              title={item.label}
              total={item.total}
              stats={[
                { label: 'Employees', value: item.emp },
                { label: 'Contractors', value: item.cont }
              ]}
              icon={<PeopleIcon />}
              titleColor="#FFC107"
              totalColor="#FFC107"
              statColors={['#4CAF50', '#FF4C4C']}
            >
              {/* Optionally show the flag */}
              <Box display="flex" justifyContent="center">
                <img src={item.flag} alt={`${item.label} flag`} width={30} />
              </Box>
            </SummaryCard>
          </Grid>
        ))}
      </Grid>

      {/* Pie Charts (example) */}
      <Grid container spacing={2} sx={{ mb: 4 }}>
        <Grid item xs={12} md={6}>
          <PieChartCard title="APAC Sites (Group 1)" data={slice1} colors={colorsMap['Pune']} />
        </Grid>
        <Grid item xs={12} md={6}>
          <PieChartCard title="APAC Sites (Group 2)" data={slice2} colors={colorsMap['MY.Kuala Lumpur']} />
        </Grid>
      </Grid>

      {/* Last update time */}
      <Box textAlign="right" mb={2}>
        <Typography variant="caption">Last update: {lastUpdate}</Typography>
      </Box>

      <Footer />
    </Container>
  );
}
