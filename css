


// src/components/SummaryChart.jsx

import React, { useMemo } from 'react';
import {
  PieChart,
  Pie,
  Cell,
  Tooltip,
  ResponsiveContainer,
  Legend
} from 'recharts';
import { Card } from 'react-bootstrap';

// Gradients/solid colors for known zones
const ZONE_GRADIENTS = {
  'Red Zone':               ['#FF0000', '#D22B2B'],
  'Red Zone - Outer Area':  ['#FF0000', '#D22B2B'],
  'Yellow Zone':            ['#FFDE21', '#FFBF00'],
  'Yellow Zone - Outer Area':['#FFDE21', '#FFBF00'],
  '2nd Floor, Pune':        ['#FF6F61', '#FFA28F'],
  'Orange Zone':            ['#E3963E', '#FFC966'],
  'Orange Zone - Outer Area':['#E3963E', '#FFC966'],
  'Green Zone':             ['#009E60', '#50C878'],
  'Reception Area':         ['#E0CCFF', '#F4E6FF'],
  'Assembly Area':          ['#FE6F5E', '#A366FF'],
  'Tower B':                ['#E68FAC', '#99BBFF']
};

const DEFAULT_GRADIENT = ['#3B4CCA', '#D0D8FF'];
const SOLID_COLORS = ['#FFD100', '#009E60', '#FF6F61', '#58595B', '#FFB800', '#C75D00'];

export default function SummaryChart({ summary = [] }) {
  // 1) Build pieData with equal slice widths but carry actual counts
  const pieData = useMemo(
    () =>
      summary.map((z) => ({
        name:  z.zone,
        value: 1,
        count: z.count
      })),
    [summary]
  );

  // 2) Build a zoneLegendItems array
  const zoneLegendItems = useMemo(() => {
    return pieData.map((entry, idx) => {
      const grad = ZONE_GRADIENTS[entry.name];
      const color = grad ? grad[0] : SOLID_COLORS[idx % SOLID_COLORS.length];
      return {
        value: entry.name,
        type: 'circle',
        color
      };
    });
  }, [pieData]);

  if (!summary.length) {
    return <Card body>No zone data available</Card>;
  }

  // 3) Custom tooltip to display the actual count
  const renderTooltip = ({ active, payload }) => {
    if (!active || !payload || !payload.length) return null;
    const { name, count } = payload[0].payload;
    return (
      <div
        style={{
          backgroundColor: '#000',
          border: '1px solid var(--wu-yellow)',
          borderRadius: 4,
          padding: '8px',
          color: '#FFD100',
          fontSize: '0.9rem'
        }}
      >
        <div><strong>Zone:</strong> {name}</div>
        <div style={{ marginTop: 4 }}><strong>Count:</strong> {count}</div>
      </div>
    );
  };

  // 4) Helper: get fill & stroke for a given zone
  const getColorsForZone = (zoneName, idx) => {
    const grad = ZONE_GRADIENTS[zoneName];
    if (grad) {
      return {
        fill: `url(#grad-${zoneName.replace(/\s+/g, '-')})`,
        stroke: grad[0]
      };
    } else {
      const solid = SOLID_COLORS[idx % SOLID_COLORS.length];
      return { fill: solid, stroke: solid };
    }
  };

  return (
    <Card className="mb-4 shadow-sm border" style={{ borderColor: 'var(--wu-yellow)' }}>
      <Card.Header className="bg-dark text-warning text-center fw-bold" style={{ fontSize: '1.2rem', borderBottom: '2px solid var(--wu-yellow)' }}>
        Western Union-Pune Area-wise Headcount
      </Card.Header>

      <Card.Body style={{ height: '50vh', padding: 0 }}>
        <div
          style={{
            position: 'relative',
            height: '100%',
            backgroundColor: 'var(--wu-gray-dark)',
            border: '1px solid var(--wu-yellow)',
            borderRadius: 4,
            overflow: 'hidden'
          }}
        >
          {/* Pie Chart with legend below */}
          <ResponsiveContainer width="100%" height="100%">
            <PieChart>
              {/* Gradient definitions for each slice */}
              <defs>
                {pieData.map((entry) => {
                  const key = entry.name.replace(/\s+/g, '-');
                  const grad = ZONE_GRADIENTS[entry.name] || DEFAULT_GRADIENT;
                  return (
                    <linearGradient
                      id={`grad-${key}`}
                      key={key}
                      x1="0"
                      y1="0"
                      x2="0"
                      y2="1"
                    >
                      <stop offset="0%" stopColor={grad[0]} stopOpacity={1} />
                      <stop offset="100%" stopColor={grad[1]} stopOpacity={1} />
                    </linearGradient>
                  );
                })}
              </defs>

              <Pie
                data={pieData}
                dataKey="value"
                nameKey="name"
                cx="50%"
                cy="45%"
                innerRadius="40%"
                outerRadius="80%"
                paddingAngle={2}
                labelLine={false}
                isAnimationActive={false}
                label={({ cx, cy, midAngle, innerRadius, outerRadius, index }) => {
                  const RADIAN = Math.PI / 180;
                  const radius = innerRadius + (outerRadius - innerRadius) * 0.5;
                  const x = cx + radius * Math.cos(-midAngle * RADIAN);
                  const y = cy + radius * Math.sin(-midAngle * RADIAN);
                  const value = pieData[index].count;
                  return (
                    <text
                      x={x}
                      y={y}
                      fill="#FFFFFF"
                      textAnchor="middle"
                      dominantBaseline="central"
                      fontSize="1rem"
                      fontWeight="bold"
                      style={{ textShadow: '0 0 4px rgba(0,0,0,0.7)' }}
                    >
                      {value}
                    </text>
                  );
                }}
              >
                {pieData.map((entry, idx) => {
                  const { fill, stroke } = getColorsForZone(entry.name, idx);
                  return (
                    <Cell
                      key={`slice-${idx}`}
                      fill={fill}
                      stroke={stroke}
                      strokeWidth={2}
                    />
                  );
                })}
              </Pie>

              <Tooltip content={renderTooltip} />

              {/* Legend positioned below */}
              <Legend
                layout="horizontal"
                verticalAlign="bottom"
                align="center"
                iconType="circle"
                wrapperStyle={{
                   marginTop:-30,
                  padding:0,
                  paddingBottom:0,
                  color: '#FFD100',
                  fontSize: '0.9rem'
                }}
                payload={zoneLegendItems}
              />
            </PieChart>
          </ResponsiveContainer>
        </div>
      </Card.Body>
    </Card>
  );
}

