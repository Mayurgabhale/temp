In table text colour I want black because we do if offline then table row colour light red and online the light green so we don't need text red colour so correct it and gu6me update code


//C:\Users\W0024618\Desktop\NewFrontend\Device Dashboard\summary.js
let deviceUptimeTimers = {};
let deviceDowntimeTimers = {};

// Utility to turn an IP (or any string) into a safe DOMâ€‘ID fragment
function sanitizeId(str) {
    return (str || '').replace(/[^a-zA-Z0-9]/g, '_');
}

function fetchDeviceData() {
    const selectedRegion = document.getElementById('region').value;

    if (selectedRegion === 'All') {
        fetch(`http://localhost/api/regions/all-details`)
            .then(res => res.json())
            .then(allRegionsData => {
                let combinedDetails = { cameras: [], archivers: [], controllers: [], servers: [] };
                Object.values(allRegionsData).forEach(regionData => {
                    if (regionData.details) {
                        ['cameras', 'archivers', 'controllers', 'servers'].forEach(type => {
                            combinedDetails[type].push(...(regionData.details[type] || []));
                        });
                    }
                });
                fetchDeviceHistory(combinedDetails);
            })
            .catch(err => console.error('Error fetching all regions data:', err));
    } else {
        fetch(`http://localhost/api/regions/details/${selectedRegion}`)
            .then(res => res.json())
            .then(regionData => {
                const d = regionData.details;
                const total = (d.cameras?.length || 0) + (d.archivers?.length || 0) + (d.controllers?.length || 0) + (d.servers?.length || 0);
                const online = ([...(d.cameras || []), ...(d.archivers || []), ...(d.controllers || []), ...(d.servers || [])]
                    .filter(dev => dev.status === "Online").length);



                const setWithIcon = (id, iconClass, label, value, colorClass = "") => {
                    const el = document.getElementById(id);
                    if (el) {
                        el.innerHTML = `<i class="${iconClass}"></i> ${label}: <span class="${colorClass}">${value}</span>`;
                    }
                };
                setWithIcon("total-devices", "fas fa-network-wired", "Total Devices", total,"text-green");
                setWithIcon("total-online", "fas fa-signal", "Total Online Devices", online, "text-green");
                setWithIcon("total-cameras", "fas fa-video", "Total Cameras", d.cameras?.length || 0,"text-green");
                setWithIcon("total-controllers", "fas fa-microchip", "Total Controllers", d.controllers?.length || 0,"text-green");
                setWithIcon("total-archivers", "fas fa-database", "Total Archivers", d.archivers?.length || 0,"text-green");
                setWithIcon("total-servers", "fas fa-server", "Total Servers", d.servers?.length || 0,"text-green");

                fetchDeviceHistory(d);
            })
            .catch(err => console.error('Error fetching device data:', err));
    }
}

function fetchDeviceHistory(details) {
    fetch(`http://localhost/api/devices/history`)
        .then(res => res.json())
        .then(historyData => {
            populateDeviceTable(details, historyData);
            window.deviceHistoryData = historyData;
        })
        .catch(err => console.error('Error fetching device history:', err));
}

function populateDeviceTable(details, historyData) {
    const tbody = document.getElementById('device-table').getElementsByTagName('tbody')[0];
    tbody.innerHTML = '';
    let list = [];

    ['cameras', 'archivers', 'controllers', 'servers'].forEach(type => {
        details[type]?.forEach(dev => {
            const ip = dev.ip_address;
            const safe = sanitizeId(ip);
            const name = dev[type.slice(0, -1) + 'name'] || 'Unknown';
            const category = type.slice(0, -1).toUpperCase();
            const region = dev.location || 'Unknown';
            const hist = filterHistoryForDisplay(historyData[ip] || [], category);
            const current = dev.status || (hist.length ? hist[hist.length - 1].status : 'Unknown');
            const downCount = hist.filter(e => e.status === 'Offline').length;

            // Only show offline or >15 downtimes
            if (current === 'Offline' || downCount > 15) {
                list.push({ ip, safe, name, category, region, current, hist, downCount });
            }
        });
    });

    list.sort((a, b) => b.downCount - a.downCount);

    // compute our two new summary counts:
    const downtimeOver15Count = list.filter(d => d.downCount > 15).length;
    const currentlyOfflineCount = list.filter(d => d.current === 'Offline').length;
    const setIf = (id, txt) => { const el = document.getElementById(id); if (el) el.innerText = txt; };
    setIf('count-downtime-over-15', `Devices with >15 downtimes: ${downtimeOver15Count}`);
    setIf('count-currently-offline', `Devices currently Offline: ${currentlyOfflineCount}`);

    if (!list.length) {
        const row = tbody.insertRow();
        const cell = row.insertCell();
        cell.colSpan = 10;
        cell.textContent = "No devices found";
        cell.style.textAlign = "center";
        cell.style.fontWeight = "bold";
        updateDisplayedDeviceCount(0);
        return;
    }

    list.forEach((dev, idx) => {
        const row = tbody.insertRow();

        //  row.classList.add(dev.current === "Online" ? "online-row" : "offline-row");

        if (dev.current === 'Offline') {
  row.classList.add('row-offline');
} else if (dev.current === 'Online') {
  row.classList.add('row-online');
} else {
  row.classList.add('row-repair');
}

        row.style.border = "1px solid black";
        row.innerHTML = `
   <td>${idx + 1}</td>
    <td><span onclick="copyText('${dev.ip}')" style="cursor:pointer; ;">${dev.ip}</span></td>
    <td><span onclick="copyText('${dev.name}')" style="cursor:pointer; ;">${dev.name}</span></td>
    <td>${dev.category}</td>
    <td>${dev.region}</td>
    <td id="uptime-${dev.safe}">0h/0m/0s</td>
    <td id="downtime-count-${dev.safe}">${dev.downCount}</td>
    <td id="downtime-${dev.safe}">0h/0m/0s</td>
    <td><button onclick="openDeviceHistory('${dev.ip}','${dev.name}','${dev.category}')">View History</button></td>
    <td id="remark-${dev.safe}">Device working properly</td>
`;
        row.style.color = dev.current === "Online" ? "green" : "red";
       

        if (dev.current === "Online") {
            startUptime(dev.ip, dev.hist);
        } else {
            startDowntime(dev.ip, dev.hist, dev.category);
        }
        updateRemarks(dev.ip, dev.hist, dev.category);
    });

    filterData();
}

function filterHistoryForDisplay(hist, category) {
    if (category === 'SERVER') return hist.slice(); // show all
    // else: remove any offline entries that resolve within 5 minutes
    const filtered = [];
    let lastOff = null;
    hist.forEach(e => {
        if (e.status === 'Offline') {
            lastOff = e;
        } else if (e.status === 'Online' && lastOff) {
            const diff = (new Date(e.timestamp) - new Date(lastOff.timestamp)) / 1000;
            if (diff >= 300) {
                // keep the offline event and the matching online event
                filtered.push(lastOff, e);
            }
            lastOff = null;
        } else {
            filtered.push(e);
        }
    });
    // If an Offline at end with no Online, and it's >5min ago, keep it
    if (lastOff) {
        const diff = (Date.now() - new Date(lastOff.timestamp)) / 1000;
        if (diff >= 300) filtered.push(lastOff);
    }
    return filtered.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));
}

function startUptime(ip, hist) {
    const safe = sanitizeId(ip);
    clearInterval(deviceDowntimeTimers[safe]);
    const lastOn = hist.filter(e => e.status === 'Online').pop();
    if (!lastOn) return;
    const start = new Date(lastOn.timestamp).getTime();
    deviceUptimeTimers[safe] = setInterval(() => {
        const secs = Math.floor((Date.now() - start) / 1000);
        const el = document.getElementById(`uptime-${safe}`);
        if (el) el.innerText = formatDuration(secs);
    }, 1000);
}

function startDowntime(ip, hist, category) {
    const safe = sanitizeId(ip);
    clearInterval(deviceUptimeTimers[safe]);
    const lastOff = hist.filter(e => e.status === 'Offline').pop();
    if (!lastOff) return;
    const start = new Date(lastOff.timestamp).getTime();
    deviceDowntimeTimers[safe] = setInterval(() => {
        const secs = Math.floor((Date.now() - start) / 1000);
        const el = document.getElementById(`downtime-${safe}`);
        if (el) el.innerText = formatDuration(secs);
        updateDowntimeCount(ip, hist, category);
    }, 1000);
}

function updateDowntimeCount(ip, hist, category) {
    const safe = sanitizeId(ip);
    const offs = filterHistoryForDisplay(hist, category).filter(e => e.status === 'Offline');
    const count = offs.length;
    const el = document.getElementById(`downtime-count-${safe}`);
    if (el) el.innerText = count;
    updateRemarks(ip, hist, category);
}

function updateRemarks(ip, hist, category) {
    const safe = sanitizeId(ip);
    const filteredOffs = filterHistoryForDisplay(hist, category).filter(e => e.status === 'Offline');
    const count = filteredOffs.length;
    const lastStatus = hist.length ? hist[hist.length - 1].status : 'Unknown';
    const el = document.getElementById(`remark-${safe}`);
    if (!el) return;

    if (lastStatus === 'Offline') {
        el.innerText = count >= 10 ? "Device is Offline, needs repair." : "Device is Offline.";
    }
    else if (lastStatus === 'Online') {
        if (count >= 10) el.innerText = "Device is Online, needs repair.";
        else if (count > 0) el.innerText = `Device is Online, it had ${count} downtime occurrences.`;
        else el.innerText = "Device is Online.";
    }
    else {
        el.innerText = "Device status unknown.";
    }
    const dc = document.getElementById(`downtime-count-${safe}`);
    if (dc) dc.innerText = count;
}

function formatDuration(seconds) {
    const d = Math.floor(seconds / 86400);
    const h = Math.floor((seconds % 86400) / 3600);
    const m = Math.floor((seconds % 3600) / 60);
    const s = Math.round(seconds % 60);
    const parts = [];
    if (d) parts.push(`${d}d`);
    if (h) parts.push(`${h}h`);
    if (m) parts.push(`${m}m`);
    if (s || !parts.length) parts.push(`${s}s`);
    return parts.join('/');
}

function openDeviceHistory(ip, name, category) {
    if (!window.deviceHistoryData) return console.error("No history loaded");
    const raw = window.deviceHistoryData[ip] || [];
    const hist = filterHistoryForDisplay(raw, category);
    displayDeviceHistory(ip, name, category, hist);
    const modal = document.getElementById('device-history-modal');
    if (modal) modal.style.display = 'block';
}

function calculateDowntimeDuration(ts, hist) {
    const start = new Date(ts).getTime();
    const nextUp = hist.find(e => e.status === 'Online' && new Date(e.timestamp).getTime() > start);
    if (nextUp) return formatDuration((new Date(nextUp.timestamp).getTime() - start) / 1000);
    return formatDuration((Date.now() - start) / 1000);
}

function displayDeviceHistory(ip, name, category, hist) {
    const header = document.getElementById('device-history-header');
    const container = document.getElementById('device-history');
    if (header) {
        header.innerHTML = `
            <h3>Device History</h3>
            <p><strong>Device Name:</strong> ${name}</p>
            <p><strong>Device IP:</strong> ${ip}</p>
            <hr>`;
    }
    if (!container) return;
    container.innerHTML = '';
    if (!hist.length) {
        container.innerHTML = '<p>No significant history (all brief outages &lt;5â€¯min).</p>';
        return;
    }
    let html = `
        <table border="1" style="width:100%; text-align:center; border-collapse:collapse;">
            <thead><tr>
                <th>Sr. No</th><th>Date</th><th>Day</th><th>Time</th><th>Status</th><th>Downtime Duration</th>
            </tr></thead><tbody>`;
    let lastOff = null;
    hist.forEach((e, i) => {
        const d = new Date(e.timestamp);
        const date = d.toLocaleDateString();
        const day = d.toLocaleString('en-US', { weekday: 'long' });
        const time = d.toLocaleTimeString();
        let dur = '-';
        if (e.status === 'Offline') lastOff = e.timestamp;
        else if (e.status === 'Online' && lastOff) {
            dur = calculateDowntimeDuration(lastOff, hist);
            lastOff = null;
        }
        html += `
            <tr>
                <td>${i + 1}</td><td>${date}</td><td>${day}</td><td>${time}</td>
                <td style="color:${e.status === 'Online' ? '#212529' : '#212529'}">${e.status}</td>
                <td>${dur}</td>
            </tr>`;
    });
    html += `</tbody></table>`;
    container.innerHTML = html;
}

function closeHistoryModal() {
    const modal = document.getElementById('device-history-modal');
    if (modal) modal.style.display = 'none';
}

function filterData() {
    const typeSel = document.getElementById('device-type').value.toUpperCase();
    const remarkSel = document.getElementById('remark-filter').value.toUpperCase();
    const rows = document.getElementById('device-table').getElementsByTagName('tbody')[0].rows;
    let count = 0;
    for (let row of rows) {
        const type = row.cells[3].textContent.toUpperCase();
        const remark = row.cells[9].textContent.trim().toUpperCase();
        const show = (typeSel === 'ALL' || type === typeSel) && (remarkSel === 'ALL' || remark.includes(remarkSel));
        row.style.display = show ? '' : 'none';
        if (show) count++;
    }
    updateDisplayedDeviceCount(count);
}

function updateDisplayedDeviceCount(count) {
    const el = document.getElementById('device-count');
    if (el) el.innerText = `Displayed Devices: ${count}`;
}

document.addEventListener("DOMContentLoaded", () => {
    ['region', 'device-type', 'remark-filter'].forEach(id => {
        const el = document.getElementById(id);
        if (el) el.addEventListener('change', id === 'region' ? fetchDeviceData : filterData);
    });
    fetchDeviceData();
});

function exportDeviceTableToExcel() {
    const tbl = document.getElementById("device-table");
    if (!tbl) return;
    const wb = XLSX.utils.table_to_book(tbl, { sheet: "Device Table" });
    XLSX.writeFile(wb, "Device_Table.xlsx");
}

function exportDeviceHistoryToExcel() {
    const histTbl = document.querySelector("#device-history-modal table");
    if (!histTbl) return alert("Please open a device's history first.");
    const wb = XLSX.utils.table_to_book(histTbl, { sheet: "Device History" });
    XLSX.writeFile(wb, "Device_History.xlsx");
}

function copyText(text) {
    navigator.clipboard.writeText(text)
        .then(() => showToast(`Copied: ${text}`))
        .catch(err => console.error("Copy failed: ", err));
}


function showToast(message) {
    const toast = document.getElementById("toast");
    toast.textContent = message;
    toast.className = "toast show";
    setTimeout(() => {
        toast.className = toast.className.replace("show", "");
    }, 2500); // Hide after 2.5 seconds
}

@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap');

:root {
  --yellow: #ffcc00;
  --black: #000000;
  --white: #f9fafc;
  --blue: #0d6efd;
  --green: #2cb67d;
  --red: #ef4565;
  --gray: #e0e0e0;
  --border-radius: 12px;
  --font-main: 'Poppins', sans-serif;
}

/* Base Reset & Layout */
body {
  margin: 0;
  font-family: var(--font-main);
  background-color: var(--white);
  color: #212529;
  line-height: 1.6;
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}

/* Header */
header {
  /* background-color: var(--yellow); */
    background: #090909;

  border-bottom: 1px solid #000;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
  padding: 15px 20px;
}

.header-container {
  display: flex;
  align-items: center;
  justify-content: space-between;
  flex-wrap: wrap;
  gap: 10px;
}

.header-left {
  display: flex;
  gap: 20px;
  margin-left: 10px;
}

.header-left button {
  background: none;
  border: none;
  padding: 0;
  font-size: 17px;
  color: #1495e5;
  cursor: pointer;
  transition: transform 0.2s ease;
}

.header-left button:hover {
  transform: scale(1.2);
  color: #e9e1e1;
}

header h1 {
  margin: 0;
  font-size: 30px;
  font-weight: 700;
  font-family: Georgia, serif;
  color: #ffcc00;
  display: flex;
  align-items: center;
  gap: 10px;
  flex: 1;
  justify-content: center;
  text-align: center;
}

/* Summary Cards */
.summary-container {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
  gap: 20px;
  padding: 30px 20px;
  background-color: var(--yellow);
}

.summary-card {
  background: #fff;
  border-radius: var(--border-radius);
  padding: 20px;
  text-align: center;
  font-weight: 600;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
  transition: transform 0.2s ease;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 12px;
}

.summary-card:hover {
  transform: scale(1.03);
  background-color: #f8f9fa;
}

.summary-card i {
  font-size: 26px;
  color: var(--blue);
}

/* Device Summary Row */
.device-summary {
  display: flex;
  justify-content: space-around;
  padding: 20px;
  gap: 20px;
  flex-wrap: wrap;
  background-color: #ffffff;
}

.device-card {
  background: #fff;
  border-radius: var(--border-radius);
  padding: 20px;
  min-width: 250px;
  text-align: center;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
  flex: 1;
}

.device-card .icon {
  font-size: 24px;
  color: var(--red);
  margin-bottom: 10px;
}

.device-card .value {
  font-size: 22px;
  font-weight: bold;
  color: var(--black);
}

/* Buttons */
.button-container {
  display: flex;
  justify-content: center;
  gap: 20px;
  padding: 20px;
  flex-wrap: wrap;
}

.action-button {
  padding: 12px 20px;
  font-size: 15px;
  font-weight: 600;
  border-radius: var(--border-radius);
  border: none;
  cursor: pointer;
  transition: all 0.3s ease;
  background-color: var(--blue);
  color: #fff;
}

.action-button.back {
  background-color: #b8d6f1;
  color: #000;
}

.action-button.export {
  background-color: var(--yellow);
  color: #000;
}

.action-button:hover {
  transform: scale(1.03);
  background-color: #e9ecef;
}

/* Filters */
.filter-panel {
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
  padding: 20px;
  background-color: #ffffff;
  border-top: 1px solid var(--gray);
  border-bottom: 1px solid var(--gray);
}

.filter-panel label {
  font-size: 14px;
  font-weight: 600;
  display: block;
  margin-bottom: 6px;
}

.filter-panel select {
  padding: 10px 12px;
  font-size: 14px;
  border-radius: var(--border-radius);
  border: 1px solid #ccc;
  background-color: #fff;
  font-family: var(--font-main);
  transition: border-color 0.3s;
  width: 200px;
}

.filter-panel select:hover {
  border-color: var(--blue);
}


/* Row background based on device status */
.row-online {
  background-color: #e6f9f0 !important; /* Light green */
}

.row-offline {
  background-color: #fdeaea !important; /* Light red */
  color: #212529;
}

.row-repair {
  background-color: #fff7e6 !important; /* Light amber/yellow */
}
#device-table tbody tr:hover {
  background-color: #f0f8ff;
  box-shadow: inset 0 0 0 9999px rgba(0, 123, 255, 0.05);
  cursor: pointer;
}

.status-online,
.status-offline,
.status-repair {
  font-weight: normal;
  color: #212529; /* default text color */
}


/* Table */
.container {
  flex: 1;
  overflow-x: auto;
  padding: 20px;
}

#device-table {
  width: 100%;
  border-collapse: collapse;
  border: 1px solid var(--gray);
  background-color: #f0f8fc;
  border-radius: var(--border-radius);
  overflow: hidden;
}

#device-table th,
#device-table td {
  padding: 12px 10px;
  border: 1px solid var(--gray);
  text-align: center;
  font-size: 14px;
}

#device-table th {
  background-color: var(--yellow);
  font-weight: 700;
  font-size: 15px;
  color: #000;
}

#device-table tr:nth-child(even) {
  background-color: #ffffff;
}

#device-table tr:hover {
  background-color: #e9ecef;
  cursor: pointer;
}

/* Modal */
.modal {
  display: none;
  position: fixed;
  z-index: 2000;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.65);
  justify-content: center;
  align-items: center;
}

.modal-content {
  background-color: #fff;
  padding: 30px;
  border-radius: var(--border-radius);
  width: 90%;
  max-width: 600px;
  font-family: var(--font-main);
  color: #000;
  position: relative;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
}

.modal-content .close {
  position: absolute;
  top: 15px;
  right: 20px;
  font-size: 24px;
  font-weight: bold;
  color: #ff0000;
  cursor: pointer;
}

/* Toast */
.toast {
  position: fixed;
  bottom: 30px;
  right: 30px;
  background-color: var(--blue);
  color: white;
  padding: 12px 20px;
  border-radius: 6px;
  z-index: 3000;
  display: none;
}

/* Footer */
footer {
  background: #272626;
  padding: 20px;
  text-align: center;
  color: #fff;
}

.footer-logo {
  height: 20px;
  margin-bottom: 10px;
}

footer a {
  color: #fff;
  text-decoration: underline;
  font-size: 14px;
}

footer p {
  margin: 5px 0;
  font-size: 14px;
}

/* Responsive */
@media (max-width: 768px) {
  .filter-panel {
    flex-direction: column;
  }

  .device-summary {
    flex-direction: column;
    align-items: center;
  }

  .button-container {
    flex-direction: column;
    gap: 12px;
  }
}


