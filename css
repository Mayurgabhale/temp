import React, { useEffect, useState } from 'react';
import {
  AppBar, Toolbar, Box, Typography,
  Select, MenuItem, IconButton
} from '@mui/material';
import { useNavigate, useLocation } from 'react-router-dom';
import HomeIcon from '@mui/icons-material/Home';
import HistoryIcon from '@mui/icons-material/History';
import ListAltIcon from '@mui/icons-material/ListAlt';

import wuLogo from '../assets/wu-logo.png';
import austriaFlag from '../assets/flags/austria.png';
import uaeFlag from '../assets/flags/uae.png';
import irelandFlag from '../assets/flags/ireland.png';
import italyFlag from '../assets/flags/italy.png';
import lithuaniaFlag from '../assets/flags/lithuania.png';
import moroccoFlag from '../assets/flags/morocco.png';
import russiaFlag from '../assets/flags/russia.png';
import ukFlag from '../assets/flags/uk.png';
import spainFlag from '../assets/flags/spain.png';

import { partitionList } from '../api/occupancy.service';
import { useLiveOccupancy } from '../hooks/useLiveOccupancy';

const displayNameMap = {
  'AUT.Vienna': 'Vienna',
  'DU.Abu Dhab': 'Abu Dhabi',
  'IE.Dublin': 'Dublin',
  'IT.Rome': 'Rome',
  'LT.Vilnius': 'Vilnius',
  'MA.Casablanca': 'Casablanca',
  'RU.Moscow': 'Moscow',
  'UK.London': 'London',
  'ES.Madrid': 'Madrid'
};

const flagMap = {
  'AUT.Vienna': austriaFlag,
  'DU.Abu Dhab': uaeFlag,
  'IE.Dublin': irelandFlag,
  'IT.Rome': italyFlag,
  'LT.Vilnius': lithuaniaFlag,
  'MA.Casablanca': moroccoFlag,
  'RU.Moscow': russiaFlag,
  'UK.London': ukFlag,
  'ES.Madrid': spainFlag
};

export default function Header() {
  const navigate = useNavigate();
  const loc = useLocation();
  const { data } = useLiveOccupancy(1000);
  const [lastUpdate, setLastUpdate] = useState('');

  // ✅ Update time display
  useEffect(() => {
    if (data) {
      setLastUpdate(new Date().toLocaleTimeString());
    }
  }, [data]);

  // ✅ Parse path
  const parts = loc.pathname.split('/').filter(Boolean);
  const isHome = loc.pathname === '/';
  const isPart = parts[0] === 'partition' && !!parts[1];
  const current = isPart ? decodeURIComponent(parts[1]) : '';

  return (
    <AppBar position="static" color="primary" sx={{ mb: 2 }}>
      <Toolbar sx={{ justifyContent: 'space-between' }}>
        <Box display="flex" alignItems="center">
          <Box component="img" src={wuLogo} alt="WU" sx={{ height: 36, mr: 2 }} />

          <Typography variant="h6" sx={{ flexGrow: 1 }}>
            EMEA Occupancy{current && ` • ${displayNameMap[current] || current.split('.').pop()}`}
          </Typography>

          <IconButton color="inherit" onClick={() => navigate('/')}>
            <HomeIcon />
          </IconButton>

          <IconButton color="inherit" onClick={() => navigate('/history')}>
            <HistoryIcon />
          </IconButton>

          {/* ✅ Static Vilnius button on home */}
          {isHome && (
            <IconButton color="inherit" onClick={() => navigate('/partition/LT.Vilnius/details')}>
              <ListAltIcon />
            </IconButton>
          )}

          {/* ✅ Dynamic partition details button */}
          {isPart && (
            <IconButton
              color="inherit"
              onClick={() => navigate(`/partition/${encodeURIComponent(current)}/details`)}>
              <ListAltIcon />
            </IconButton>
          )}
        </Box>

        {/* Right side: Region Selector */}
        <Box display="flex" alignItems="center">
          <Select
            size="small"
            value={current}
            displayEmpty
            onChange={e => {
              const partition = e.target.value;
              navigate(partition ? `/partition/${encodeURIComponent(partition)}` : '/');
            }}
            renderValue={(selected) =>
              selected ? (
                <Box display="flex" alignItems="center">
                  <Box
                    component="img"
                    src={flagMap[selected]}
                    alt={selected}
                    sx={{ width: 24, height: 16, mr: 1 }}
                  />
                  {displayNameMap[selected] || selected}
                </Box>
              ) : "— Select Site —"
            }
            sx={{ bgcolor: 'background.paper', mr: 2, minWidth: 150 }}
          >
            <MenuItem value="">— Select Site —</MenuItem>
            {partitionList.map(p => (
              <MenuItem key={p} value={p}>
                {displayNameMap[p] || p}
              </MenuItem>
            ))}
          </Select>
        </Box>
      </Toolbar>
    </AppBar>
  );
}