// src/pages/Dashboard.jsx
import React, { useMemo } from 'react';
import {
  Container, Box, Typography, Skeleton, Paper
} from '@mui/material';

import Header from '../components/Header';
import Footer from '../components/Footer';

import SummaryCard from '../components/SummaryCard';
import CompositeChartCard from '../components/CompositeChartCard';
import PieChartCard from '../components/PieChartCard';

import { useLiveOccupancy } from '../hooks/useLiveOccupancy';
import { partitionList as rawPartitionList } from '../services/occupancy.service';
import buildingCapacities from '../data/buildingCapacities';

import indiaFlag from '../assets/flags/india.png';
import japanFlag from '../assets/flags/japan.png';
import malaysiaFlag from '../assets/flags/malaysia.png';
import philippinesFlag from '../assets/flags/philippines.png';
import taguigFlag from '../assets/flags/Taguig.png';

const palette15 = [
  '#FFC107', '#E91E63', '#4CAF50', '#FFEB3B', '#FFD666',
  '#D84315', '#3F51B5', '#9C27B0', '#00BCD4', '#8BC34A',
  '#FF9800', '#673AB7', '#009688', '#CDDC39', '#795548'
];

const flagMap = {
  'Pune': indiaFlag,
  'Quezon City': philippinesFlag,
  'JP.Tokyo': japanFlag,
  'MY.Kuala Lumpur': malaysiaFlag,
  'Taguig City': taguigFlag
};

export default function Dashboard() {
  const { data, loading, error } = useLiveOccupancy(1000);

  if (error) {
    return (
      <Box width="100vw" py={4}>
        <Typography color="error" align="center">
          Error loading live data
        </Typography>
      </Box>
    );
  }

  const regions = data?.realtime ?? {};
  const partitionList = Array.isArray(rawPartitionList)
    ? rawPartitionList
    : (console.error("partitionList is not an array:", rawPartitionList), []);

  // Build our “partitions” array safely
  const partitions = useMemo(() => {
    return partitionList
      .map(name => {
        // Find the exact key in regions
        const key = Object.keys(regions).find(k => k.includes(name));
        const p = key && regions[key] ? regions[key] : {};

        return {
          name,
          total:    (p.total    ?? 0),
          Employee: (p.Employee ?? 0),
          Contractor:(p.Contractor ?? 0),
          floors:   (p.floors   ?? {}),
          flag:     (flagMap[name.replace(/^IN\./, '')] ?? null)
        };
      })
      .sort((a, b) => b.total - a.total);
  }, [regions, partitionList]);

  // Guard against missing “today”
  const todayTot  = data?.today?.total      ?? 0;
  const todayEmp  = data?.today?.Employee   ?? 0;
  const todayCont = data?.today?.Contractor ?? 0;

  const realtimeTot  = partitions.reduce((sum, p) => sum + p.total,      0);
  const realtimeEmp  = partitions.reduce((sum, p) => sum + p.Employee,   0);
  const realtimeCont = partitions.reduce((sum, p) => sum + p.Contractor, 0);

  const pune        = partitions.find(p => p.name === 'IN.Pune')          ?? { floors: {} };
  const quezonCity  = partitions.find(p => p.name === 'PH.Quezon')        ?? { Employee:0, Contractor:0 };
  const combinedRegions = partitions.filter(p =>
    ['JP.Tokyo', 'MY.Kuala Lumpur', 'PH.Taguig'].includes(p.name)
  );

  // Turn Pune floors into chart data
  const floors = Object.entries(pune.floors).map(([floor, headcount]) => ({
    name: floor,
    headcount,
    capacity: buildingCapacities[floor] ?? 0
  }));

  const chartConfigs = [
    {
      key: 'pune',
      title: 'Pune',
      body: !floors.length
        ? <Typography color="white" align="center" py={6}>No Pune data</Typography>
        : <CompositeChartCard
            data={floors}
            lineColor={palette15[0]}
            height={250}
            sx={{ border: 'none' }}
          />
    },
    {
      key: 'quezon',
      title: 'Quezon City',
      body: quezonCity.total === 0
        ? <Typography color="white" align="center" py={6}>No Quezon City data</Typography>
        : <PieChartCard
            data={[
              { name: 'Employees', value: quezonCity.Employee },
              { name: 'Contractors', value: quezonCity.Contractor }
            ]}
            colors={['#4CAF50', '#F44336']}
            height={270}
            showZeroSlice
            sx={{ border: 'none' }}
          />
    },
    {
      key: 'combined',
      title: 'Asia-Pacific',
      body: !combinedRegions.length
        ? <Typography color="white" align="center" py={6}>No regional data</Typography>
        : <PieChartCard
            data={combinedRegions.map(r => ({
              name: r.name.replace(/^[^.]+\./,''),  // drop country code
              value: r.total
            }))}
            colors={['#FFBF00','#FFFAA0','#B4C424']}
            height={290}
            showZeroSlice
            sx={{ border: 'none' }}
          />
    }
  ];

  return (
    <>
      <Header title="APAC Live Occupancy" />
      <Container
        maxWidth={false}
        disableGutters
        sx={{
          py: 0,
          px: 2,
          background: 'linear-gradient(135deg, #0f0f0f 0%, #1c1c1c 100%)',
          color: '#f5f5f5'
        }}
      >
        {/* Top summary cards */}
        <Box display="flex" flexWrap="wrap" gap={1} mb={1}>
          {[
            { title: "Today's Total Headcount",        value: todayTot,  icon: 'fa-users', border: '#FFB300' },
            { title: "Today's Employees Count",        value: todayEmp,  icon: 'bi-people', border: '#AED581' },
            { title: "Today's Contractors Count",      value: todayCont, icon: 'fa-circle-user', border: '#E57373' },
            { title: "Realtime Headcount",             value: realtimeTot, icon: 'fa-users', border: '#FFD180' },
            { title: "Realtime Employees Count",       value: realtimeEmp, icon: 'bi-people', border: '#AED581' },
            { title: "Realtime Contractors Count",     value: realtimeCont, icon: 'fa-circle-user', border: '#EF5350' }
          ].map(c => (
            <Box key={c.title} sx={{ flex: '1 1 calc(16.66% - 8px)' }}>
              <SummaryCard
                title={c.title}
                total={c.value}
                stats={[]}
                icon={<i className={`fa-solid ${c.icon}`} style={{ fontSize:25 }} />}
                sx={{ height:140, border:`2px solid ${c.border}` }}
              />
            </Box>
          ))}
        </Box>

        {/* Region cards */}
        <Box display="flex" flexWrap="wrap" gap={1} mb={3}>
          {loading
            ? <Skeleton variant="rectangular" width="90%" height={200} />
            : partitions.map((p,i) => (
                <Box key={p.name} sx={{ flex:'1 1 calc(16.66% - 8px)' }}>
                  <SummaryCard
                    title={
                      <Typography variant="subtitle1" sx={{ fontWeight:'bold', color:'#FFC107', fontSize:'1.3rem' }}>
                        {p.name.replace(/^[^.]+\./,'')}
                      </Typography>
                    }
                    total={p.total}
                    stats={[
                      { label:'Employees',  value:p.Employee,   color:'#40E0D0' },
                      { label:'Contractors', value:p.Contractor, color:'green' }
                    ]}
                    icon={<Box component="img" src={p.flag} sx={{ width:48, height:32 }} />}
                    sx={{ width:'100%', border:`2px solid ${palette15[i%palette15.length]}` }}
                  />
                </Box>
              ))
          }
        </Box>

        {/* Main charts */}
        <Box display="flex" gap={2} flexWrap="wrap" mb={4}>
          {chartConfigs.map(c => (
            <Box key={c.key} sx={{ flex:'1 1 32%', minWidth:280, height:380 }}>
              <Paper sx={{ p:2, height:'100%', background:'rgba(0,0,0,0.4)', border:'1px solid #FFC107' }}>
                <Typography variant="h6" align="center" sx={{ color:'#FFC107', mb:2 }}>
                  {c.title}
                </Typography>
                <Box sx={{ flex:1, overflow:'hidden' }}>
                  {c.body}
                </Box>
              </Paper>
            </Box>
          ))}
        </Box>
      </Container>
      <Footer />
    </>
  );
}