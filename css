function filterData() {
  const searchValue = document.getElementById('searchBox')?.value.toLowerCase() || "";
  const selectedCity = document.getElementById('cityFilter')?.value.toLowerCase().trim();
  const selectedDeviceType = document.getElementById('device-type')?.value.toLowerCase().trim();
  const selectedRemark = document.getElementById('remark-filter')?.value.toLowerCase().trim();

  const rows = document.querySelectorAll('#device-table tbody tr');
  let visibleCount = 0;

  let totalDevices = 0;
  let totalOnline = 0;
  let totalCameras = 0;
  let totalControllers = 0;
  let totalArchivers = 0;
  let totalServers = 0;
  let currentlyOffline = 0;
  let downtimeOver15 = 0;

  rows.forEach(row => {
    const ip = row.cells[1].textContent.trim();
    const name = row.cells[2].textContent.toLowerCase();
    const category = row.cells[3].textContent.toLowerCase().trim();
    const region = row.cells[4].textContent.toLowerCase().trim();
    const city = row.cells[5].textContent.toLowerCase().trim();
    const remark = document.getElementById(`remark-${sanitizeId(ip)}`)?.innerText.toLowerCase().trim() || "";
    const currentStatus = row.classList.contains("row-offline") ? "offline" : "online";
    const downtimeCount = parseInt(row.cells[7].textContent.trim());

    const matchesSearch = [ip, name, category, region, city].some(text =>
      text.includes(searchValue)
    );

    const matchesCity = !selectedCity || selectedCity === "all" || city === selectedCity;
    const matchesType = selectedDeviceType === "all" || category === selectedDeviceType;
    const matchesRemark = selectedRemark === "all" || remark.includes(selectedRemark);

    const shouldDisplay = matchesSearch && matchesCity && matchesType && matchesRemark;
    row.style.display = shouldDisplay ? "" : "none";

    if (shouldDisplay) {
      visibleCount++;
      totalDevices++;
      if (currentStatus === "online") totalOnline++;
      if (currentStatus === "offline") currentlyOffline++;
      if (downtimeCount > 15) downtimeOver15++;

      if (category === "camera") totalCameras++;
      else if (category === "controller") totalControllers++;
      else if (category === "archiver") totalArchivers++;
      else if (category === "server") totalServers++;
    }
  });

  updateDisplayedDeviceCount(visibleCount);

  // Update summary cards based on filtered data
  const setSummary = (id, iconClass, label, value) => {
    const el = document.getElementById(id);
    if (el) {
      el.innerHTML = `<i class="${iconClass}"></i> ${label}: <span style="font-weight:700;">${value}</span>`;
    }
  };

  setSummary("total-devices", "fas fa-network-wired", "Total Devices", totalDevices);
  setSummary("total-online", "fas fa-signal", "Total Online Devices", totalOnline);
  setSummary("total-cameras", "fas fa-video", "Total Cameras", totalCameras);
  setSummary("total-controllers", "fas fa-microchip", "Total Controllers", totalControllers);
  setSummary("total-archivers", "fas fa-database", "Total Archivers", totalArchivers);
  setSummary("total-servers", "fas fa-server", "Total Servers", totalServers);

  const setText = (id, value) => {
    const el = document.getElementById(id);
    if (el) el.innerText = value;
  };

  setText("count-downtime-over-15", `Devices with >15 downtimes: ${downtimeOver15}`);
  setText("count-currently-offline", `Devices currently Offline: ${currentlyOffline}`);
}