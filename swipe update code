
C:\Users\W0024618\Desktop\swipeData\client-denver


// src/components/FloorDetailsTable.jsx
import React from 'react';
import './FloorDetailsTable.css';

export default function FloorDetailsTable({ data = [] }) {
  if (!Array.isArray(data) || data.length === 0 || !data[0].floor) {
    return <p style={{ color: '#fff' }}>No floor detail data available.</p>;
  }

  return (
    <div className="floor-cards">
      {data.map(({ floor, total, occupants }) => (
        <div key={floor} className="floor-card">
          <div className="floor-header">
            <h3>{floor}</h3>
            <span className="floor-badge">{total}</span>
          </div>
          <table className="floor-table">
            <thead>
              <tr>
                <th>Name</th>
                <th>ID</th>
                <th>Swipe Time</th>
                <th>Type</th>
                <th>Door Name</th>
              </tr>
            </thead>
            <tbody>
              {occupants.map((emp, i) => (
                <tr key={`${emp.EmployeeID}-${i}`}>
                  <td>{emp.ObjectName1}</td>
                  <td>{emp.EmployeeID}</td>                 
                  <td>{emp.Swipe_Time}</td>
                  <td>{emp.PersonnelType}</td>
                  <td>{emp.Door}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      ))}
    </div>
  );
}





C:\Users\W0024618\Desktop\swipeData\client-denver\src\components\FloorInOutTable.jsx

// src/components/FloorInOutTable.jsx

import React from 'react';
import { Card, Table } from 'react-bootstrap';

// Accent palette (re-used from FloorOccupancyChart)
const ROW_COLORS = [
  '#FFC72C',
  '#C9A9A6',
  '#FFE680',
  '#FFF5EE',
  '#FFD11A',
  '#96DED1',
  '#FFEB99'
];

export default function FloorInOutTable({ data = [] }) {
  // Compute inconsistency and sort descending
  const sorted = data
    .map(({ floor, inSwipes, outSwipes }) => ({
      floor,
      inSwipes,
      outSwipes,
      inconsistency: inSwipes - outSwipes
    }))
    .sort((a, b) => b.inconsistency - a.inconsistency);

  const top = sorted[0];

  return (
    <Card
      className="mb-4 shadow-sm"
      style={{ background: '#1a1a1a', border: '2px solid #FFC72C' }}
    >
      <Card.Header
        className="text-center fw-bold"
        style={{ background: '#000', color: '#FFC72C' }}
      >
        Floor In/Out Swipe Summary
      </Card.Header>

      <Card.Body style={{ padding: '1rem' }}>
        {top && (
          <div
            className="mb-3"
            style={{ color: '#fff', fontSize: '1rem' }}
          >
            Highest inconsistency:&nbsp;
            <span style={{ color: '#FFC72C', fontWeight: 'bold' }}>
              {top.inconsistency}
            </span>
            &nbsp;on&nbsp;
            <span style={{ color: '#FFC72C', fontWeight: 'bold' }}>
              {top.floor}
            </span>
          </div>
        )}

        <Table striped bordered hover size="sm" variant="dark">
          <thead>
            <tr>
              <th>Floor</th>
              <th>In Swipes</th>
              <th>Out Swipes</th>
              <th>Inconsistency (In &minus; Out)</th>
            </tr>
          </thead>
          <tbody>
            {sorted.map((row, idx) => (
              <tr key={row.floor}>
                <td style={{ color: '#fff' }}>{row.floor}</td>
                <td style={{ color: ROW_COLORS[idx % ROW_COLORS.length] }}>
                  {row.inSwipes}
                </td>
                <td style={{ color: ROW_COLORS[(idx + 1) % ROW_COLORS.length] }}>
                  {row.outSwipes}
                </td>
                <td
                  style={{
                    color: ROW_COLORS[(idx + 2) % ROW_COLORS.length],
                    fontWeight: 'bold'
                  }}
                >
                  {row.inconsistency}
                </td>
              </tr>
            ))}
          </tbody>
        </Table>
      </Card.Body>
    </Card>
  );
}


C:\Users\W0024618\Desktop\swipeData\client-denver\src\components\FloorOccupancyChart.jsx
// src/components/FloorOccupancyChart.jsx

import React, { useMemo } from 'react';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  CartesianGrid,
  LabelList,
  Legend
} from 'recharts';
import { Card } from 'react-bootstrap';
import floorCapacities from '../constants/floorCapacities';

// ─── CUSTOM TOOLTIP ───────────────────────────────────────────────────────────
const CustomTooltip = ({ active, payload, label }) => {
  if (!active || !payload?.length) return null;
  const { capacity, headcount, percentage } = payload[0].payload;
  return (
    <div style={{
      background: '#2f2f2f',
      border: '1px solid #444',
      borderRadius: 4,
      padding: '8px 12px',
      color: '#fff',
      fontSize: 14,
      lineHeight: 1.4
    }}>
      <strong style={{ color: '#FFC72C' }}>{label}</strong><br/>
      Occupancy: <strong>{capacity}</strong><br/>
      Headcount: <strong>{headcount}</strong><br/>
      Usage: <strong>{percentage.toFixed(1)}%</strong>
    </div>
  );
};




// place headcount label just inside the top of the green bar
const HeadcountLabel = ({ x, y, width, value }) => (
  <text
    x={x + width / 2}
    y={y - 6}            // <-- moved above the top edge by 6px
    textAnchor="middle"
    fill="#228B22"
    margin="6"
    fontWeight="bold"
    fontSize={15}
  >
    {value}
  </text>
);





const CapacityLabel = ({ x, y, width, payload }) => {
  if (!payload) return null;
  return (
    <text
      x={x + width / 2}
      y={y - 6}
      textAnchor="middle"
      fill="#000"
      fontWeight="bold"
      fontSize={14}
    >
      {payload.capacity}
    </text>
  );
};

// ─── PERCENTAGE LABEL (Infographic style) ────────────────────────────────────
const PercentageLabel = ({ x, y, width, value }) => (
  <text
    x={x + width / 2}
    y={y - 20}
    textAnchor="middle"
    fill="#FFC72C"
    fontWeight="bold"
    fontSize={14}
  >
    {value.toFixed(1)}%
  </text>
);

export default function FloorOccupancyChart({ data = [] }) {
  // Build per-floor list + aggregate
  const floors = useMemo(() => {
    const list = Object.entries(floorCapacities).map(([floor, capacity]) => {
      const rec = data.find(d =>
        d.floor.replace(/^Floor\s0*/, 'Floor ') === floor
      );
       const headcount = rec ? Number(rec.total) || 0 : 0;

      
     // use totalPersons (not total) from your API
    //  const headcount = rec ? Number(rec.totalPersons) || 0 : 0;
      const percentage = capacity > 0 ? (headcount / capacity) * 100 : 0;
      return { floor, capacity, headcount, free: capacity - headcount, percentage };
    });

    const totalCapacity  = list.reduce((sum, f) => sum + f.capacity, 0);
    const totalHeadcount = list.reduce((sum, f) => sum + f.headcount, 0);
    const totalPct       = totalCapacity > 0 ? (totalHeadcount / totalCapacity) * 100 : 0;
    const aggregate = {
      floor: 'All Floors',
      capacity: totalCapacity,
      headcount: totalHeadcount,
      free: totalCapacity - totalHeadcount,
      percentage: totalPct
    };

    return [aggregate, ...list];
  }, [data]);

  const maxCap = Math.max(...floors.map(f => f.capacity));

  const legendPayload = [
    { value: 'Headcount',          type: 'square', id: 'headcount', color: '#228B22' },
    { value: 'Occupancy', type: 'square', id: 'free',      color: '#FFD700' }
  ];

  return (
    <Card className="mb-4 shadow-sm" style={{ background: '#1a1a1a', border: '2px solid #FFC72C' }}>
      <Card.Header className="text-center" style={{ background: '#000', color: '#FFC72C' }}>
        Western Union – Denver Headcount vs. Occupancy
      </Card.Header>
      <Card.Body style={{ height: 450, padding: 0 }}>
        <ResponsiveContainer width="100%" height="100%">
          <BarChart
            data={floors}
            margin={{ top: 10, right: 10, left: 10, bottom: 0 }}
            barCategoryGap="10%"
            barGap={4}
          >
            <CartesianGrid stroke="#444" strokeDasharray="4 4" />
            <XAxis
              dataKey="floor"
              tick={{ fill: '#fff', fontSize: 15 }}
              label={{ value: 'Floor', fill: '#fff', position: 'bottom', offset: 20 }}
            />
            <YAxis
              allowDecimals={false}
              tick={{ fill: '#fff', fontSize: 15 }}
              domain={[0, maxCap]}
              label={{
                value: 'Headcount',
                fill: '#fff',
                angle: -90,
                position: 'insideLeft',
                offset: 10
              }}
            />
            <Tooltip content={<CustomTooltip />} />
            <Legend
              verticalAlign="top"
              align="center"
              payload={legendPayload}
              wrapperStyle={{ color: '#fff', paddingBottom: 10 }}
            />

            {/* Headcount (green) */}
            {/* <Bar dataKey="headcount" stackId="a" fill="#228B22" fontSize={15} fontWeight={15}> */}

            <Bar
              dataKey="headcount"
              stackId="a"
              fill="#228B22"
              stroke="#000"        // ← add a black border
              strokeWidth={2}
            >



              {/* <LabelList dataKey="headcount" content={HeadcountLabel} /> */}
            </Bar>

            {/* Remaining capacity (yellow) */}
            {/* <Bar dataKey="free" stackId="a" fill="#FFD700" fontSize={15}> */}

            <Bar
              dataKey="free"
              stackId="a"
              fill="#FFD700"
              stroke="#000"        // ← add a black border
              strokeWidth={1}
            >

              <LabelList dataKey="free" content={CapacityLabel} />
              <LabelList dataKey="percentage" content={PercentageLabel} />
               {/* also render headcount here so it appears above the yellow */}
              <LabelList dataKey="headcount" content={HeadcountLabel} fontSize={15} />
            </Bar>
          </BarChart>
        </ResponsiveContainer>
      </Card.Body>
    </Card>
  );
}


C:\Users\W0024618\Desktop\swipeData\client-denver\src\components\PersonnelDonutChart.jsx

// src/components/PersonnelDonutChart.jsx

import React from 'react';
import {
  PieChart, Pie, Cell, Tooltip,
  ResponsiveContainer, Legend, Label
} from 'recharts';
import { Card } from 'react-bootstrap';

// Western Union accent palette
const SLICE_COLORS = [
  '#FFC72C', // yellow
  '#228B22',
  '#FFE680', // light yellow
  '#FFD11A', // gold
  '#FFEB99'  // pale gold
];

export default function PersonnelDonutChart({ data = [] }) {
  const total = data.reduce((sum, e) => sum + e.count, 0);
  if (!data.length || total === 0) {
    return (
      <Card body className="bg-dark text-warning">
        No personnel data
      </Card>
    );
  }

  const sorted = [...data].sort((a, b) => b.count - a.count);

  return (
    <Card
      className="mb-4 shadow-sm"
      style={{ background: '#1a1a1a', border: '2px solid #FFC72C' }}
    >
      <Card.Header
        className="text-center fw-bold"
        style={{ background: '#000', color: '#FFC72C' }}
      >
        Personnel Type Occupancy
      </Card.Header>
      <Card.Body style={{ height: 400, padding: '1rem' }}>
        <ResponsiveContainer>
          <PieChart>
            <Pie
              data={sorted}
              dataKey="count"
              nameKey="personnelType"
              cx="50%" cy="50%"
              innerRadius={70} outerRadius={110}
              paddingAngle={4}
              labelLine={false}
              label={({ percent, name }) => (
                <tspan fill="#fff">{`${name}: ${(percent * 100).toFixed(0)}%`}</tspan>
              )}
              stroke="#333"
              strokeWidth={1.5}
            >
              {sorted.map((entry, idx) => (
                <Cell
                  key={entry.personnelType}
                  fill={SLICE_COLORS[idx % SLICE_COLORS.length]}
                />
              ))}
              <Label
                value={total}
                position="center"
                style={{ fill: '#fff', fontSize: '1.5rem', fontWeight: 'bold' }}
              />
            </Pie>
            <Tooltip
              wrapperStyle={{
                backgroundColor: '#2f2f2f',
                border: '1px solid #444',
                borderRadius: '4px',
                color: '#fff'
              }}
            />
            <Legend
              verticalAlign="bottom"
              wrapperStyle={{ color: '#fff', paddingTop: 10 }}
            />
          </PieChart>
        </ResponsiveContainer>
      </Card.Body>
    </Card>
  );
}


C:\Users\W0024618\Desktop\swipeData\client-denver\src\components\PersonnelTypeBreakdownTable.jsx

// src/components/PersonnelTypeBreakdownTable.jsx
import React from 'react';
import { Table, Badge } from 'react-bootstrap';

export default function PersonnelTypeBreakdownTable({ data = [] }) {
  if (!data.length) {
    return <p style={{ color: '#fff' }}>No data available for personnel types.</p>;
  }

  // cycle through a few WU-style badges
  const badgeColors = ['warning', 'success', 'info', 'secondary'];

  return (
    <Table
      striped
      bordered
      hover
      responsive
      variant="dark"
      className="mb-4"
      style={{ borderColor: '#444' }}
    >
      <thead>
        <tr>
          <th>Personnel Type</th>
          <th>Count</th>
        </tr>
      </thead>
      <tbody>
        {data.map((entry, idx) => (
          <tr key={idx}>
            <td>
              <Badge bg={badgeColors[idx % badgeColors.length]}>
                {entry.type}
              </Badge>
            </td>
            <td style={{ color: '#fff' }}>{entry.count}</td>
          </tr>
        ))}
      </tbody>
    </Table>
  );
}


C:\Users\W0024618\Desktop\swipeData\client-denver\src\components\SummaryCards.jsx

// src/components/SummaryCards.jsx

import React from 'react';
import { Card, Row, Col } from 'react-bootstrap';
import { FaUsers, FaUserTie, FaHardHat } from 'react-icons/fa';

export default function SummaryCards({
  totalVisitedToday,
  employeesVisitedToday,
  contractorsVisitedToday,
  totalOccupancy,
  employeeCount,
  contractorCount
}) {
  // keep your existing border/accent colors here:
  const BORDER_COLORS = [
    '#FFC72C',
    '#FFD666',
    '#FFE599',
    '#FFF2CC',
    '#FFD666',
    '#FFE599'
  ];

  // a richer palette for the icons
  const ICON_COLORS = [
    '#E57373', // soft red
    '#81C784', // mint green
    '#64B5F6', // sky blue
    '#BA68C8', // orchid purple
    '#FFB74D', // amber
    '#4DB6AC'  // teal
  ];

  const cards = [
    { title: 'Todays Total Headcount',     value: totalVisitedToday,    icon: <FaUsers /> },
    { title: 'Todays Employees Count',      value: employeesVisitedToday,icon: <FaUserTie /> },
    { title: 'Todays Contractors Count',    value: contractorsVisitedToday, icon: <FaHardHat /> },
    { title: 'Realtime Headcount',     value: totalOccupancy,       icon: <FaUsers /> },
    { title: 'Realtime Employees Count',     value: employeeCount,        icon: <FaUserTie /> },
    { title: 'Realtime Contractors Count',   value: contractorCount,      icon: <FaHardHat /> },
  ];

  return (
    <Row className="mb-4">
      {cards.map((c, i) => (
        <Col key={i} sm={6} md={4} lg={2} className="mb-3">
          <Card
            className="shadow-sm"
            style={{
              background: '#2f2f2f',
              border: `2px solid ${BORDER_COLORS[i % BORDER_COLORS.length]}`,
              borderRadius: '8px'
            }}
          >
            <Card.Body className="text-center">
              <div
                style={{
                  color: ICON_COLORS[i % ICON_COLORS.length],
                  fontSize: '1.5rem'
                }}
                className="mb-2"
              >
                {c.icon}
              </div>
              <Card.Title style={{ color: '#fff' }}>{c.title}</Card.Title>
              <Card.Text
                style={{
                  fontSize: '1.6rem',
                  fontWeight: 'bold',
                  color: '#fff'
                }}
              >
                {c.value}
              </Card.Text>
            </Card.Body>
          </Card>
        </Col>
      ))}
    </Row>
  );
}


C:\Users\W0024618\Desktop\swipeData\client-denver\src\components\SummaryChart.jsx


// src/components/SummaryChart.jsx
import React from 'react';
import {
  BarChart, Bar, XAxis, YAxis,
  Tooltip, CartesianGrid, ResponsiveContainer, Legend, defs, linearGradient, stop
} from 'recharts';
import { Card } from 'react-bootstrap';

export default function SummaryChart({ summary = [] }) {
  return (
    <Card className="mb-4 infographic-card">
      <Card.Header>Zone Occupancy Overview</Card.Header>
      <Card.Body style={{ height: 300 }}>
        <ResponsiveContainer>
          <BarChart data={summary} margin={{ left: 0, right: 20, top: 20, bottom: 5 }}>
            <defs>
              <linearGradient id="zoneGrad" x1="0" y1="0" x2="0" y2="1">
                <stop offset="5%" stopColor="#00c9ff" stopOpacity={0.8}/>
                <stop offset="95%" stopColor="#00c9ff" stopOpacity={0.2}/>
              </linearGradient>
            </defs>
            <CartesianGrid strokeDasharray="4 4" />
            <XAxis dataKey="zone" tick={{ fontSize: 12 }} />
            <YAxis allowDecimals={false} tick={{ fontSize: 12 }} />
            <Tooltip />
            <Legend verticalAlign="bottom" />
            <Bar
              dataKey="count"
              name="Occupancy"
              fill="url(#zoneGrad)"
              radius={[6, 6, 0, 0]}
            />
          </BarChart>
        </ResponsiveContainer>
      </Card.Body>
    </Card>
  );
} 


C:\Users\W0024618\Desktop\swipeData\client-denver\src\pages\DashboardHome.jsx

// src/pages/DashboardHome.jsx

import React from 'react';
import { Container, Row, Col } from 'react-bootstrap';

import SummaryCards from '../components/SummaryCards';
import FloorOccupancyChart from '../components/FloorOccupancyChart';
import PersonnelDonutChart from '../components/PersonnelDonutChart';
import FloorInOutTable from '../components/FloorInOutTable';

export default function DashboardHome({
  personnelSummary,
  totalVisitedToday,
  visitedToday,
  floorData,
  personnelBreakdown,
  floorInOutSummary
}) {
  const employees = personnelSummary?.employees ?? 0;
  const contractors = personnelSummary?.contractors ?? 0;
  const totalOccupancy = employees + contractors;

  const chartData = personnelBreakdown.map(({ personnelType, count }) => ({
    personnelType,
    count
  }));

  return (
    <Container fluid className="py-4">
      <SummaryCards
        totalOccupancy={totalOccupancy}
        employeeCount={employees}
        contractorCount={contractors}
        totalVisitedToday={totalVisitedToday}
        employeesVisitedToday={visitedToday?.employees ?? 0}
        contractorsVisitedToday={visitedToday?.contractors ?? 0}
      />

      {/* Dashboard Charts + In/Out Table in one row */}
      <Row className="g-4">
        <Col md={4}>
          <FloorOccupancyChart data={floorData} />
        </Col>
        <Col md={4}>
          <PersonnelDonutChart data={chartData} />
        </Col>

         {/* <Row className="g-4"> */}
        <Col md={4}>
          <FloorInOutTable data={floorInOutSummary} />
        </Col>
      </Row>

      {/* Footer */}
      <footer
        style={{
          backgroundColor: '#000',
          color: '#FFC72C',
          padding: '1.5rem 0',
          textAlign: 'center',
          marginTop: '2rem',
          borderTop: '2px solid #FFC72C',
          fontSize: '0.95rem',
          lineHeight: '1.6'
        }}
      >
        <div>
          <strong>Global Security Operations Center (GSOC)</strong><br />
          Live Occupancy dashboard for Western Union Denver — Real-time occupancy, floor activity, and personnel insights.
        </div>
        <div style={{ marginTop: '0.75rem' }}>
          Contact us: <a href="mailto:GSOC-GlobalSecurityOperationCenter.SharedMailbox@westernunion.com" style={{ color: '#FFC72C', textDecoration: 'underline' }}>gsoc@westernunion.com</a> |
          Landline: <span style={{ color: '#FFC72C' }}>+91-020-67632394</span>
        </div>
      </footer>
    </Container>
  );
}







C:\Users\W0024618\Desktop\swipeData\client-denver\src\pages\DenverInOutInconsistency.jsx

// src/pages/DenverInOutInconsistency.jsx

import React from 'react';

export default function DenverInOutInconsistencyPage({ data, loading, error }) {
  console.log('Inconsistency Data:', data);

  if (loading) {
    return <p>Loading...</p>;
  }

  if (error) {
    return <p style={{ color: 'red' }}>Error: {error}</p>;
  }

  // The API returns an object { asOf: "...", dailyFloorStats: [ ... ] }
  // So we grab the array out of data.dailyFloorStats
  const stats = Array.isArray(data?.dailyFloorStats) ? data.dailyFloorStats : [];

  if (stats.length === 0) {
    return <p>No inconsistency data available.</p>;
  }

  return (
    <div>
      <h2>Denver In/Out Inconsistency</h2>
      <table className="table table-striped">
        <thead>
          <tr>
            <th>Date</th>
            <th>Floor</th>
            <th>Total Persons</th>
            <th>Inconsistent Count</th>
            <th>Inconsistency %</th>
          </tr>
        </thead>
        <tbody>
          {stats.map((row) => (
            <tr key={`${row.date}-${row.floor}`}>
              <td>{row.date}</td>
              <td>{row.floor}</td>
              <td>{row.totalPersons}</td>
              <td>{row.inconsistentCount}</td>
              <td>{row.inconsistencyPercentage}%</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

C:\Users\W0024618\Desktop\swipeData\client-denver\src\pages\FloorDetailsPage.jsx


// src/pages/FloorDetailsPage.jsx
import React from 'react';
import { Container, Row, Col, Card, Table } from 'react-bootstrap';
import FloorDetailsTable from '../components/FloorDetailsTable';

export default function FloorDetailsPage({ floorData = [] }) {
  if (!floorData.length) {
    return <p className="text-center mt-4">No floor details available.</p>;
  }

  return (
    <Container fluid className="py-4">
      <h2 className="mb-4">Floor Details</h2>
      <Row xs={1} md={2} lg={3} className="g-4">
        {floorData.map(({ floor, total, occupants }) => (
          <Col key={floor}>
            <Card border="primary" className="h-100">
              <Card.Header>
                <strong>{floor}</strong> — Total: {total}
              </Card.Header>
              <Card.Body style={{ overflowY: 'auto', maxHeight: 300 }}>
                <Table striped bordered hover size="sm" className="mb-0">
                  <thead>
                    <tr>
                      <th>Name</th>
                      <th>Swipe Time</th>
                      <th>Type</th>
                      <th>Door Name</th>
                    </tr>
                  </thead>
                  <tbody>
                    {occupants.map((emp, idx) => (
                      <tr key={`${emp.EmployeeID}-${idx}`}>
                        <td>{emp.ObjectName1}</td>
                        <td>{emp.Swipe_Time}</td>
                        <td>{emp.PersonnelType}</td>
                        <td>{emp.Door}</td>
                      </tr>
                    ))}
                  </tbody>
                </Table>
              </Card.Body>
            </Card>
          </Col>
        ))}
      </Row>
    </Container>
  );
}


C:\Users\W0024618\Desktop\swipeData\client-denver\src\services\app.js

import React, { useEffect, useState } from 'react';
import { fetchOccupancyData } from './services/api';
import SummaryChart from './components/SummaryChart';
import ZoneDetailsTable from './components/ZoneDetailsTable';
import 'bootstrap/dist/css/bootstrap.min.css';

function App() {
  const [data, setData] = useState(null);

  useEffect(() => {
    const interval = setInterval(async () => {
      const newData = await fetchOccupancyData();
      setData(newData);
    }, 5000);

    return () => clearInterval(interval);
  }, []);

  if (!data) return <div className="text-center mt-5">Loading...</div>;

  return (
    <div className="container mt-4">
      <h2 className="text-center mb-4">Live Employee Occupancy Dashboard</h2>
      <SummaryChart summary={data.summary} />
      <ZoneDetailsTable details={data.details} />
    </div>
  );
}

export default App;




C:\Users\W0024618\Desktop\swipeData\client-denver\src\App.js



//C:\Users\W0024618\Desktop\swipeData\client-denver\src\App.js

import React, { useEffect, useState } from 'react';
import { Container, Navbar, Nav } from 'react-bootstrap';
import { BrowserRouter, Routes, Route, Link } from 'react-router-dom';
import { FaSun } from 'react-icons/fa';

import DashboardHome    from './pages/DashboardHome';
import FloorDetailsPage from './pages/FloorDetailsPage';

import './App.css';

export default function App() {
  // live data states
  // const [summaryData, setSummaryData]               = useState([]);
  const [floorData, setFloorData]                   = useState([]);
  const [personnelBreakdown, setPersonnelBreakdown] = useState([]);
  const [totalVisitedToday, setTotalVisitedToday]   = useState(0);
  const [personnelSummary, setPersonnelSummary]     = useState({ employees: 0, contractors: 0 });
  const [visitedToday, setVisitedToday]             = useState({ employees: 0, contractors: 0, total: 0 });
  const [floorInOutSummary, setFloorInOutSummary]   = useState([]); // ← NEW

  useEffect(() => {
    const es = new EventSource('http://localhost:5000/api/live-occupancy-denver');
    es.onmessage = e => {
      try {
        const p = JSON.parse(e.data);
        // setSummaryData(p.summary || []);
        setFloorData(p.floorBreakdown || []);
        setPersonnelBreakdown(p.personnelBreakdown || []);
        setTotalVisitedToday(p.totalVisitedToday || 0);
        setPersonnelSummary(p.personnelSummary || { employees: 0, contractors: 0 });
        setVisitedToday(p.visitedToday || { employees: 0, contractors: 0, total: 0 });
        setFloorInOutSummary(p.floorInOutSummary || []); // ← NEW
      } catch (err) {
        console.error('SSE parse error:', err);
      }
    };
    es.onerror = err => {
      console.error('SSE error:', err);
      es.close();
    };
    return () => es.close();
  }, []);

  return (
    <BrowserRouter>
      <div className="dark-theme">
        <Navbar bg="dark" variant="dark" expand="lg" className="px-4 navbar-infographic">
          <Navbar.Brand as={Link} to="/" className="wu-brand">
            Live Occupancy — Western Union Denver
          </Navbar.Brand>
          <Nav className="ms-auto align-items-center">
            <Nav.Link as={Link} to="/" className="nav-item-infographic">
              Dashboard
            </Nav.Link>
            <Nav.Link as={Link} to="/floor-details" className="nav-item-infographic">
              Floor Details
            </Nav.Link>
            <Nav.Link className="theme-toggle-icon" title="Dark mode only">
              <FaSun color="#FFC72C" />
            </Nav.Link>
          </Nav>
        </Navbar>

        <Container fluid className="mt-4">
          <Routes>
            <Route
              path="/"
              element={
                <DashboardHome
                  personnelSummary={personnelSummary}
                  totalVisitedToday={totalVisitedToday}
                  visitedToday={visitedToday}
                  floorData={floorData}
                  personnelBreakdown={personnelBreakdown}
                  floorInOutSummary={floorInOutSummary}  // ← PASS DOWN
                />
              }
            />
            <Route
              path="/floor-details"
              element={
                <FloorDetailsPage
                  floorData={floorData}
                  floorInOutSummary={floorInOutSummary}  // ← PASS DOWN
                />
              }
            />
          </Routes>
        </Container>
      </div>
    </BrowserRouter>
  );
}

