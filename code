useEffect(() => {
  if (data && !pickedDate && data.summaryByDate?.length > 0) {
    const latestDate = data.summaryByDate[data.summaryByDate.length - 1].date;
    setPickedDate(new Date(latestDate));
  }
}, [data, pickedDate]);







const summaryEntry = useMemo(() => {
  if (!data || !pickedDate) return null;

  const dateStr = format(pickedDate, 'yyyy-MM-dd');

  const match = data.summaryByDate.find(r =>
    r.date === dateStr || r.date.startsWith(dateStr)
  );

  return match || null;
}, [data, pickedDate]);







const partitionRows = useMemo(() => {
  if (!summaryEntry) return [];

  return Object.entries(summaryEntry.partitions)
    .filter(([key]) => {
      if (!backendFilterKey) return true;
      return key === backendFilterKey;
    })
    .map(([key, vals]) => {
      const feCode = apacReverseKey[key];
      const display = feCode && apacPartitionDisplay[feCode];

      return {
        country: display?.country ?? 'Unknown',
        city: display?.city ?? key,
        employee: vals.Employee ?? vals.EmployeeCount ?? 0,
        contractor: vals.Contractor ?? vals.ContractorCount ?? 0,
        total: vals.total ?? 0,
      };
    });
}, [summaryEntry, backendFilterKey]);