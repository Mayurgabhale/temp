if (tab === 0) {
  // First validate the dates
  if (!from || !to) {
    alert('Please select both From and To dates');
    return;
  }

  // Ensure from date is before to date
  if (from > to) {
    alert('From date must be before To date');
    return;
  }

  // Create UTC dates for accurate comparison
  const startDate = new Date(Date.UTC(from.getFullYear(), from.getMonth(), from.getDate(), 0, 0, 0));
  const endDate = new Date(Date.UTC(to.getFullYear(), to.getMonth(), to.getDate(), 23, 59, 59));

  // Format dates for API request (YYYY-MM-DD format)
  const formatForAPI = (date) => {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
  };

  const params = {
    ...baseParams,
    from: formatForAPI(from),
    to: formatForAPI(to),
    employees: selectedEmps.join(',')
  };

  try {
    const resp = await axios.get('/api/reports/daily-access', { params });
    
    // Additional client-side filtering to ensure accuracy
    const filteredData = resp.data.data.filter(record => {
      if (!record.LocaleMessageTime) return false;
      
      // Parse record date as UTC to avoid timezone issues
      const recordDate = new Date(record.LocaleMessageTime);
      const recordUTCDate = new Date(Date.UTC(
        recordDate.getFullYear(),
        recordDate.getMonth(),
        recordDate.getDate(),
        recordDate.getHours(),
        recordDate.getMinutes(),
        recordDate.getSeconds()
      ));

      return recordUTCDate >= startDate && recordUTCDate <= endDate;
    });

    // Group data by employee for verification
    const employeeDateRanges = {};
    filteredData.forEach(record => {
      const empName = record.ObjectName1;
      const recordDate = new Date(record.LocaleMessageTime).toISOString().split('T')[0];
      
      if (!employeeDateRanges[empName]) {
        employeeDateRanges[empName] = new Set();
      }
      employeeDateRanges[empName].add(recordDate);
    });

    // Verify all employees have data within the requested range
    for (const emp of selectedEmps) {
      if (!employeeDateRanges[emp] || employeeDateRanges[emp].size === 0) {
        console.warn(`No data found for employee ${emp} within the selected date range`);
      } else {
        console.log(`Employee ${emp} has data for dates:`, [...employeeDateRanges[emp]].join(', '));
      }
    }

    await generateDailyAccessExcel(filteredData);
  } catch (error) {
    console.error('Error generating report:', error);
    alert('Failed to generate report. Please check console for details.');
  }
}