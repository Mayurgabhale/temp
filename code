
import React, { useEffect, useState, useMemo } from 'react';
import { useParams } from 'react-router-dom';
import {
  Container, Box, Typography, Paper, Table, TableHead, TableBody,
  TableRow, TableCell, Button, TextField
} from '@mui/material';
import { DatePicker, LocalizationProvider } from '@mui/x-date-pickers';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { format }       from 'date-fns';
import * as XLSX         from 'xlsx';
import { saveAs }       from 'file-saver';

import Header         from '../components/Header';
import Footer         from '../components/Footer';
import LoadingSpinner from '../components/LoadingSpinner';
import { fetchHistory } from '../api/occupancy.service';

const codeToCountry = {
  AUT:'Austria', DU:'UAE', IE:'Ireland', IT:'Italy',
  LT:'Lithuania', MA:'Morocco', RU:'Russia', UK:'UK', ES:'Spain'
};

export default function History() {
  const { partition } = useParams();
  const decoded     = partition ? decodeURIComponent(partition) : null;
  const filterCode  = decoded?.split('.')[0] || null;

  const [data, setData]       = useState(null);
  const [loading, setLoading] = useState(true);
  const [date, setDate]       = useState(null);
  const [showDetails, setShowDetails] = useState(false);

  useEffect(() => {
    fetchHistory(partition).then(json => {
      setData(json);
      setLoading(false);
    });
  }, [partition]);

  const summary = useMemo(() => {
    if (!data || !date) return null;
    const ds = format(date,'yyyy-MM-dd');
    return data.summaryByDate.find(r=>r.date===ds) || null;
  }, [data, date]);

  const rows = useMemo(() => {
    if (!summary) return [];
    return Object.entries(summary.partitions)
      .filter(([k]) => !filterCode || k.startsWith(filterCode + '.'))
      .map(([k,v])=>{
        const [code, site] = k.split('.');
        return {
          country: codeToCountry[code]||code,
          site,
          employee:   v.Employee  ?? v.EmployeeCount   ?? 0,
          contractor: v.Contractor ?? v.ContractorCount ?? 0,
          total:      v.total      ?? 0
        };
      });
  }, [summary, filterCode]);

  const details = useMemo(() => {
    if (!data || !date || !showDetails) return [];
    const ds = format(date,'yyyy-MM-dd');
    return data.details.filter(r=>r.SwipeDate.startsWith(ds))
      .filter(r => !filterCode || r.PartitionName2.startsWith(filterCode + '.'));
  }, [data, date, filterCode, showDetails]);

  const exportExcel = () => {
    const ws = XLSX.utils.json_to_sheet(details.map((r,i)=>({
      Sr: i+1, Date: r.SwipeDate.slice(0,10),
      Time: r.LocaleMessageTime.slice(11,19),
      EmployeeID: r.EmployeeID, Name: r.ObjectName1,
      Type: r.PersonnelType, Door: r.Door,
      Partition: r.PartitionName2
    })));
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb,ws,'Details');
    saveAs(new Blob([XLSX.write(wb,{bookType:'xlsx',type:'array'})]),
           `history_${format(date,'yyyyMMdd')}.xlsx`);
  };

  if (loading) return <LoadingSpinner />;

  return (
    <>
      <Header/>
      <Container maxWidth={false} disableGutters sx={{ px:2, py:2 }}>
        <Box mb={2} sx={{ px:'20px' }}>
          <LocalizationProvider dateAdapter={AdapterDateFns}>
            <DatePicker
              label="Select date"
              value={date}
              onChange={d=>{setDate(d); setShowDetails(false);}}
              renderInput={params=> <TextField fullWidth {...params}/>}
            />
          </LocalizationProvider>
        </Box>

        {date && summary ? (
          <>
            <Paper sx={{ mb:2, mx:'20px', p:2, border:'3px solid #000', borderRadius:2 }}>
              <Table size='small'>
            
                <TableHead>
                  <TableRow>
                    <TableCell colSpan={5} align="center"
                      sx={{ bgcolor:'#000', color:'#fff', border:'2px solid #000', fontSize:16 }}>
                      {format(date,'EEEE, d MMMM, yyyy')}
                    </TableCell>
                  </TableRow>
                  <TableRow sx={{ bgcolor:'#FFC107' }}>
                    {['Country','Site','Employees','Contractors','Total'].map(h=>(
                      <TableCell key={h}
                        sx={{ border:'2px solid #000', color:'#000', fontWeight:'bold' }}>
                        {h}
                      </TableCell>
                    ))}
                  </TableRow>
                </TableHead>
                <TableBody>
                  {rows.map((r,i)=>(
                    <TableRow key={i}>
                      <TableCell sx={{ border:'2px solid #000' }}>{r.country}</TableCell>
                      <TableCell sx={{ border:'2px solid #000' }}>{r.site}</TableCell>
                      <TableCell sx={{ border:'2px solid #000' }} align="right">{r.employee}</TableCell>
                      <TableCell sx={{ border:'2px solid #000' }} align="right">{r.contractor}</TableCell>
                      <TableCell sx={{ border:'2px solid #000', bgcolor:'#FFC107', fontWeight:'bold' }} align="right">{r.total}</TableCell>
                    </TableRow>
                  ))}
                  <TableRow sx={{ bgcolor:'#666' }}>
                    <TableCell colSpan={2} align="right" sx={{ border:'2px solid #000', color:'#fff', fontWeight:'bold' }}>Total</TableCell>
                    <TableCell sx={{ border:'2px solid #000', color:'#fff', fontWeight:'bold' }} align="right">
                      {rows.reduce((s,r)=>s+r.employee,0)}
                    </TableCell>
                    <TableCell sx={{ border:'2px solid #000', color:'#fff', fontWeight:'bold' }} align="right">
                      {rows.reduce((s,r)=>s+r.contractor,0)}
                    </TableCell>
                    <TableCell sx={{ border:'2px solid #000', color:'#fff', fontWeight:'bold' }} align="right">
                      {rows.reduce((s,r)=>s+r.total,0)}
                    </TableCell>
                  </TableRow>
                </TableBody>
              </Table>

              <Box textAlign="center" mt={1}>
                <Button variant="contained" sx={{ bgcolor:'#FFC107', color:'#000' }}
                        onClick={()=>setShowDetails(v=>!v)}>
                  {showDetails?'Hide Details':'See Details'}
                </Button>
                {showDetails && (
                  <Button variant="outlined" sx={{ ml:2, borderColor:'#FFC107', color:'#FFC107' }}
                          onClick={exportExcel}>
                    Export to Excel
                  </Button>
                )}
              </Box>
            </Paper>

            {showDetails && (
              <Paper sx={{ mx:'20px', p:2, border:'3px solid #000', borderRadius:2 }}>
                <Table size="small">
                  <TableHead>
                    <TableRow sx={{ bgcolor:'#000' }}>
                      {['Sr','Time','ID','Name','Type','Door','Partition'].map(h=>(
                        <TableCell key={h} align="center"
                          sx={{ border:'2px solid #000', color:'#FFC107', fontWeight:'bold' }}>
                          {h}
                        </TableCell>
                      ))}
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {details.map((r,i)=>(
                      <TableRow key={i}>
                        <TableCell sx={{ border:'2px solid #000' }}>{i+1}</TableCell>
                        <TableCell sx={{ border:'2px solid #000' }}>{r.LocaleMessageTime.slice(11,19)}</TableCell>
                        <TableCell sx={{ border:'2px solid #000' }}>{r.EmployeeID}</TableCell>
                        <TableCell sx={{ border:'2px solid #000' }}>{r.ObjectName1}</TableCell>
                        <TableCell sx={{ border:'2px solid #000' }}>{r.PersonnelType}</TableCell>
                        <TableCell sx={{ border:'2px solid #000' }}>{r.Door}</TableCell>
                        <TableCell sx={{ border:'2px solid #000' }}>{r.PartitionName2}</TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </Paper>
            )}
          </>
        ) : (
          <Typography color="textSecondary" align="center" sx={{ mt:2 }}>
            Please select a date to view history.
          </Typography>
        )}
      </Container>
      <Footer />
    </>
  );
}

