

// src/components/CompositeChartCard.jsx

import React from 'react';
import { Card, CardContent, Typography, Box } from '@mui/material';
import {
  ComposedChart,
  Bar,
  Line,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  CartesianGrid,
  Legend,
  LabelList,
  Cell
} from 'recharts';



const DARK_TO_LIGHT = [
  '#FFD666', '#FFE599', '#FFF2CC', '#FFE599', '#E0E1DD',
  '#FFD666', '#FFEE8C', '#F8DE7E', ' #FBEC5D', '#F0E68C',
  ' #FFEE8C', '#21325E', '#415A77', '#6A7F9A', '#B0C4DE',
  '#1A1F36', '#2B3353', '#4C6482', '#7B90B2', '#CAD3E9'
];

export default function CompositeChartCard({
  title,
  data,
  lineColor = '#fff',
  height = 300,
  animationDuration = 1500,
  animationEasing = 'ease-in-out'
}) {
  if (!Array.isArray(data) || data.length === 0) {
    return (
      <Card sx={{ border: `1px solid #fff`, bgcolor: 'rgba(0,0,0,0.4)' }}>
        <CardContent>
          <Typography variant="subtitle1" align="center" color="text.secondary">
            {title}
          </Typography>
          <Typography variant="body2" align="center" sx={{ mt: 4 }}>
            No realtime employee data
          </Typography>
        </CardContent>
      </Card>
    );
  }
 // Enrich each datum with its usage percentage
  const enriched = data.map((d, i) => ({
    ...d,
    percentage: d.capacity ? Math.round(d.headcount / d.capacity * 100) : 0,
    _color: DARK_TO_LIGHT[i % DARK_TO_LIGHT.length]
  }));
  
  return (
    <Card
      sx={{
        border: `1px solid ${lineColor}`,
        borderRadius: 2,
        overflow: 'hidden',
        bgcolor: 'rgba(0,0,0,0.4)',
        transition: 'transform 0.3s, box-shadow 0.3s',
        '&:hover': {
          transform: 'scale(1.02)',
          boxShadow: '0 4px 12px rgba(0,0,0,0.7)'
        }
      }}
    >
      <CardContent sx={{ p: 1 }}>
        <Typography
          variant="subtitle1"
          align="center"
          gutterBottom
          color="text.primary"
        >
          {title}
        </Typography>
        <Box sx={{ width: '100%', height }}>
          <ResponsiveContainer>
            <ComposedChart
              data={enriched}
              margin={{ top: 10, right: 20, left: 0, bottom: 20 }}
            >
              <CartesianGrid strokeDasharray="3 3" stroke="rgba(255,255,255,0.1)" />

    
              <XAxis
                dataKey="name"
                tickLine={false}
                axisLine={false}
                stroke="rgba(255,255,255,0.6)"
                tickFormatter={label => 
                  // strip any leading word(s) and space, e.g. "Building A1" → "A1"
                  label.replace(/^[^\s]*\s*/, '')
                }
              />


              <YAxis
                yAxisId="left"
                tickLine={false}
                axisLine={false}
                stroke="rgba(255,255,255,0.6)"
              />

              <YAxis
                yAxisId="right"
                orientation="right"
                tickLine={false}
                axisLine={false}
                stroke="rgba(255,255,255,0.6)"
                domain={[0, 100]}
                tickFormatter={val => `${val}%`}
              />

              {/* <Tooltip
                contentStyle={{ backgroundColor: '#FFD666', borderColor: lineColor }}
                formatter={(value, name) => 
                  name === 'percentage' ? `${value}%` : value
                }
              /> */}

              <Tooltip
                contentStyle={{ backgroundColor: '#FFD666', borderColor: lineColor, padding: 8 }}
                // custom content so we can show capacity only on hover
                content={({ active, payload, label }) => {
                  if (!active || !payload || !payload.length) return null;
                  const datum = payload[0].payload;
                  return (
                    <div style={{
                      backgroundColor: '#FFD666',
                      border: `1px solid ${lineColor}`,
                      borderRadius: 4,
                      padding: 8,
                    }}>
                      <div style={{ fontWeight: 700, marginBottom: 4 }}>{label}</div>
                     <div>Headcount: {datum.headcount}</div>
                      <div>Usage %: {datum.percentage}%</div>
                      <div>Seat Capacity: {datum.capacity}</div>
                    </div>
                  );
                }}
              />
              
              <Legend
                verticalAlign="top"
                wrapperStyle={{ color: 'rgba(255,255,255,0.8)' }}
              />

              {/* Headcount bars with per-bar colors & percentage labels */}
              <Bar
                yAxisId="left"
                dataKey="headcount"
                name="Headcount"
                barSize={700}
                isAnimationActive
                animationDuration={animationDuration}
                animationEasing={animationEasing}
              >
                {enriched.map((entry, idx) => (
                  <Cell key={`cell-${idx}`} fill={entry._color} />
                ))}

    
                {/* Show % on top of each bar */}
                <LabelList
                  dataKey="headcount"
                 position="top"
                  formatter={val => `${val}`}
                  style={{ fill: '#fff', fontSize: 15, fontWeight: 700 }}
                />

          {/* Percentage centered inside each bar */}
                <LabelList
                  dataKey="percentage"
                  position="inside"
                  formatter={val => `${val}%`}
                  style={{ fill: '#EE4B2B', fontSize: 14, fontWeight: 700 }}
                />
              </Bar>


              {/* Seat Capacity line */}
              <Line
                yAxisId="right"
                type="monotone"
                dataKey="percentage"
                name="Usage %"
                stroke={lineColor}
                strokeWidth={2}
                dot={false}
                isAnimationActive
                animationDuration={animationDuration}
                animationEasing={animationEasing}
              />

              {/* Optional: draw capacity as second line */}
              <Line
                yAxisId="left"
                type="monotone"
             
                //  dataKey="capacity"
                 name="Total Seats"
                stroke="#81C784"
                strokeDasharray="5 5"
                dot={false}
                isAnimationActive
                animationDuration={animationDuration}
                animationEasing={animationEasing}
              />
            </ComposedChart>
          </ResponsiveContainer>
        </Box>
      </CardContent>
    </Card>
  );
}

Uncaught runtime errors:
×
ERROR
label.replace is not a function
TypeError: label.replace is not a function
    at tickFormatter (http://localhost:3000/static/js/src_pages_Dashboard_jsx.chunk.js:150:21)
    at getTickSize (http://localhost:3000/static/js/vendors-node_modules_recharts_es6_cartesian_CartesianGrid_js-node_modules_recharts_es6_cartes-ba3606.chunk.js:20510:55)
    at getSize (http://localhost:3000/static/js/vendors-node_modules_recharts_es6_cartesian_CartesianGrid_js-node_modules_recharts_es6_cartes-ba3606.chunk.js:20397:16)
    at _loop (http://localhost:3000/static/js/vendors-node_modules_recharts_es6_cartesian_CartesianGrid_js-node_modules_recharts_es6_cartes-ba3606.chunk.js:20402:51)
    at getTicksEnd (http://localhost:3000/static/js/vendors-node_modules_recharts_es6_cartesian_CartesianGrid_js-node_modules_recharts_es6_cartes-ba3606.chunk.js:20420:5)
    at getTicks (http://localhost:3000/static/js/vendors-node_modules_recharts_es6_cartesian_CartesianGrid_js-node_modules_recharts_es6_cartes-ba3606.chunk.js:20528:18)
    at CartesianAxis.renderTicks (http://localhost:3000/static/js/vendors-node_modules_recharts_es6_cartesian_CartesianGrid_js-node_modules_recharts_es6_cartes-ba3606.chunk.js:19183:73)
    at CartesianAxis.render (http://localhost:3000/static/js/vendors-node_modules_recharts_es6_cartesian_CartesianGrid_js-node_modules_recharts_es6_cartes-ba3606.chunk.js:19262:48)
    at react-stack-bottom-frame (http://localhost:3000/static/js/bundle.js:27746:27)
    at updateClassComponent (http://localhost:3000/static/js/bundle.js:19802:21)
