const rows = useMemo(() => {
  if (!summary || !summary.partitions) return [];
  return Object.entries(summary.partitions)
    .filter(([k]) => !filterCode || k.startsWith(filterCode + '.'))
    .map(([k, v]) => {
      const [code, site] = k.split('.');
      const employee = v.Employee ?? v.EmployeeCount ?? 0;
      const contractor = v.Contractor ?? v.ContractorCount ?? 0;
      return {
        country: codeToCountry[code] || code,
        site,
        employee,
        contractor,
        total: employee + contractor
      };
    });
}, [summary, filterCode]);









return data?.summaryByDate?.find(r => r.date === ds) || null;





return (data?.details || []).filter(r => r.SwipeDate?.startsWith(ds))











......m
Wednesday, 23 July, 2025
Country	Site	Employees	Contractors	Total
Total	0	0	0





ok work
but in table are not show total 
see this, count not show only 0 are visible so fix this and give me update code 
Wednesday, 23 July, 2025
Country	Site	Employees	Contractors	Total
Total	0	0	 0

import React, { useEffect, useState, useMemo } from 'react';
import { useParams } from 'react-router-dom';
import {
  Container, Box, Typography, Paper, Table, TableHead, TableBody,
  TableRow, TableCell, Button, TextField
} from '@mui/material';
import { DatePicker, LocalizationProvider } from '@mui/x-date-pickers';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { format } from 'date-fns';
import * as XLSX from 'xlsx';
import { saveAs } from 'file-saver';

import Header from '../components/Header';
import Footer from '../components/Footer';
import LoadingSpinner from '../components/LoadingSpinner';
import { fetchHistory } from '../api/occupancy.service';

const codeToCountry = {
  AUT: 'Austria', DU: 'UAE', IE: 'Ireland', IT: 'Italy',
  LT: 'Lithuania', MA: 'Morocco', RU: 'Russia', UK: 'UK', ES: 'Spain'
};

export default function History() {
  const { partition } = useParams();
  const decoded = partition ? decodeURIComponent(partition) : null;
  const filterCode = decoded?.split('.')[0] || null;

  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [date, setDate] = useState(null);
  const [showDetails, setShowDetails] = useState(false);

  useEffect(() => {
    fetchHistory(partition).then(json => {
      setData(json);
      setLoading(false);
    });
  }, [partition]);

  const summary = useMemo(() => {
    if (!data || !date) return null;
    const ds = format(date, 'yyyy-MM-dd');
    return data.summaryByDate.find(r => r.date === ds) || null;
  }, [data, date]);

  // const rows = useMemo(() => {
  //   if (!summary) return [];
  //   return Object.entries(summary.partitions)
  //     .filter(([k]) => !filterCode || k.startsWith(filterCode + '.'))
  //     .map(([k, v]) => {
  //       const [code, site] = k.split('.');
  //       return {
  //         country: codeToCountry[code] || code,
  //         site,
  //         employee: v.Employee ?? v.EmployeeCount ?? 0,
  //         contractor: v.Contractor ?? v.ContractorCount ?? 0,
  //         total: v.total ?? 0
  //       };
  //     });
  // }, [summary, filterCode]);

const rows = useMemo(() => {
  if (!summary || !summary.partitions) return [];
  return Object.entries(summary.partitions)
    .filter(([k]) => !filterCode || k.startsWith(filterCode + '.'))
    .map(([k, v]) => {
      const [code, site] = k.split('.');
      return {
        country: codeToCountry[code] || code,
        site,
        employee: v.Employee ?? v.EmployeeCount ?? 0,
        contractor: v.Contractor ?? v.ContractorCount ?? 0,
        total: v.total ?? 0
      };
    });
}, [summary, filterCode]);

  const details = useMemo(() => {
    if (!data || !date || !showDetails) return [];
    const ds = format(date, 'yyyy-MM-dd');
    return data.details.filter(r => r.SwipeDate.startsWith(ds))
      .filter(r => !filterCode || r.PartitionName2.startsWith(filterCode + '.'));
  }, [data, date, filterCode, showDetails]);

  const exportExcel = () => {
    const ws = XLSX.utils.json_to_sheet(details.map((r, i) => ({
      Sr: i + 1, Date: r.SwipeDate.slice(0, 10),
      Time: r.LocaleMessageTime.slice(11, 19),
      EmployeeID: r.EmployeeID, Name: r.ObjectName1,
      Type: r.PersonnelType, Door: r.Door,
      Partition: r.PartitionName2
    })));
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Details');
    saveAs(new Blob([XLSX.write(wb, { bookType: 'xlsx', type: 'array' })]),
      `history_${format(date, 'yyyyMMdd')}.xlsx`);
  };

  if (loading) return <LoadingSpinner />;

  return (
    <>
      <Header />

    

      <Container maxWidth={false} disableGutters sx={{ pt: 2, pb: 4 }}>
        {/* Flex row: DatePicker + Summary Table */}
        <Box display="flex" alignItems="flex-start" sx={{ px: '20px', mb: 1, gap: '10px' }}>

          {/* Left: Date Picker */}
          <Box sx={{ flex: '0 0 200px' }}>
            <LocalizationProvider dateAdapter={AdapterDateFns}>
              <DatePicker
                label="Select date"
                value={date}
                onChange={d => { setDate(d); setShowDetails(false); }}
                renderInput={params => <TextField fullWidth {...params} />}
              />
            </LocalizationProvider>
          </Box>

          {/* Right: Summary table */}
          {date && summary && (
            <Box sx={{ flex: 1, maxWidth: 800, display: 'flex', flexDirection: 'column', gap: 2 }}>
              <Paper elevation={3} sx={{ px: 2, py: 1, border: '3px solid #000', borderRadius: 2 }}>
                <Table size='small' sx={{ border: '2px solid #000' }}>
                  <TableHead>
                    <TableRow>
                      <TableCell colSpan={5} align="center"
                        sx={{ fontWeight: 'bold', fontSize: 16, bgcolor: '#000', color: '#fff', border: '2px solid #000' }}>
                        {format(date, 'EEEE, d MMMM, yyyy')}
                      </TableCell>
                    </TableRow>
                    <TableRow sx={{ bgcolor: '#FFC107' }}>
                      {['Country', 'Site', 'Employees', 'Contractors', 'Total'].map(h => (
                        <TableCell key={h} align={['Country', 'Site'].includes(h) ? 'left' : 'right'}
                          sx={{ color: '#000', fontWeight: 'bold', fontSize: 14, border: '2px solid #000' }}>
                          {h}
                        </TableCell>
                      ))}
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {rows.map((r, i) => (
                      <TableRow key={i}>
                        <TableCell sx={{ border: '2px solid #000' }}>{r.country}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{r.site}</TableCell>
                        <TableCell align="right" sx={{ border: '2px solid #000' }}>{r.employee}</TableCell>
                        <TableCell align="right" sx={{ border: '2px solid #000' }}>{r.contractor}</TableCell>
                        <TableCell align="right" sx={{ backgroundColor: '#FFC107', fontWeight: 'bold', border: '2px solid #000' }}>{r.total}</TableCell>
                      </TableRow>
                    ))}
                    <TableRow sx={{ bgcolor: '#666' }}>
                      <TableCell colSpan={2} align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                        Total
                      </TableCell>
                      <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                        {rows.reduce((s, r) => s + r.employee, 0)}
                      </TableCell>
                      <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                        {rows.reduce((s, r) => s + r.contractor, 0)}
                      </TableCell>
                      <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', bgcolor: '#333', border: '2px solid #000' }}>
                        {rows.reduce((s, r) => s + r.total, 0)}
                      </TableCell>
                    </TableRow>
                  </TableBody>
                </Table>
              </Paper>

              {/* Buttons */}
              <Box display="flex" justifyContent="center" sx={{ mt: 1 }}>
                <Button
                  variant="contained"
                  sx={{ bgcolor: '#FFC107', color: '#000' }}
                  onClick={() => setShowDetails(v => !v)}
                >
                  {showDetails ? 'Hide Details' : 'See Details'}
                </Button>
                {showDetails && (
                  <Button
                    variant="outlined"
                    sx={{ ml: 2, borderColor: '#FFC107', color: '#FFC107' }}
                    onClick={exportExcel}
                  >
                    Export to Excel
                  </Button>
                )}
              </Box>
            </Box>
          )}
        </Box>

        {/* Details Table: Still below, only if toggled */}
        {showDetails && (
          <Box display="flex" justifyContent="center" mb={2} sx={{ width: '100%' }}>
            <Paper elevation={1} sx={{ px: '40px', py: 1, width: '100%', border: '3px solid #000', borderRadius: 2 }}>
              {details.length > 0 ? (
                <Table sx={{ border: '2px solid #000', borderCollapse: 'collapse' }}>
                  <TableHead>
                    <TableRow sx={{ bgcolor: '#000' }}>
                      {['Sr', 'Date', 'Time', 'Employee ID', 'Name', 'Personnel Type', 'Door', 'Partition'].map(h => (
                        <TableCell key={h} align="center"
                          sx={{ color: '#FFC107', fontWeight: 'bold', fontSize: 14, border: '2px solid #000' }}>
                          {h}
                        </TableCell>
                      ))}
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {details.map((r, i) => (
                      <TableRow key={`${r.PersonGUID}-${i}`}>
                        <TableCell sx={{ border: '2px solid #000' }}>{i + 1}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{r.SwipeDate.slice(0, 10)}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{r.LocaleMessageTime.slice(11, 19)}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{r.EmployeeID}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{r.ObjectName1}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{r.PersonnelType}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{r.Door}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{r.PartitionName2}</TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              ) : (
                <Typography variant="body2" sx={{ color: '#666', textAlign: 'center', mt: 2, fontStyle: 'italic' }}>
                  No swipe records found for this date.
                </Typography>
              )}
            </Paper>
          </Box>
        )}
      </Container>
      
      <Footer />
    </>
  );
}








import React, { useEffect, useState, useMemo } from 'react';
import {
  Container,
  Box,
  Typography,
  Button,
  TextField,
  TableContainer,
  Paper,
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
} from '@mui/material';
import { useParams, useNavigate } from 'react-router-dom';
import Header from '../components/Header';
import Footer from '../components/Footer';
import LoadingSpinner from '../components/LoadingSpinner';
import DataTable from '../components/DataTable';
import { fetchLiveSummary } from '../api/occupancy.service';
import { lookupFloor } from '../utils/floorLookup';

export default function PartitionDetailDetails() {
  const { partition } = useParams();
  const navigate = useNavigate();

  const [details, setDetails] = useState([]);
  const [liveCounts, setLiveCounts] = useState({});
  const [loading, setLoading] = useState(false);
  const [lastUpdate, setLastUpdate] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  const [expandedFloor, setExpandedFloor] = useState(null);

  const term = searchTerm.trim().toLowerCase();

  useEffect(() => {
    let isMounted = true;
    setLoading(true);

    const load = async () => {
      const json = await fetchLiveSummary();
      if (!isMounted) return;

      const counts = json.realtime[partition]?.floors || {};
      setLiveCounts(counts);

      const det = json.details
        .filter(r => r.PartitionName2 === partition && r.Direction === 'InDirection')
        .map(r => ({
          ...r,
          floor: lookupFloor(r.PartitionName2, r.Door, r.Direction),
        }));
      setDetails(det);
      setLastUpdate(new Date().toLocaleTimeString());
      setLoading(false);
    };

    load();

    const interval = setInterval(load, 1000);

    return () => {
      isMounted = false;
      clearInterval(interval);
    };
  }, [partition]);

  const floorMap = useMemo(() => {
    const m = {};
    Object.keys(liveCounts).forEach(floorName => {
      m[floorName] = [];
    });
    details.forEach(r => {
      if (!(r.floor in m)) m[r.floor] = [];
      m[r.floor].push(r);
    });
    return m;
  }, [details, liveCounts]);

  const displayed = useMemo(() => {
    return Object.entries(floorMap)
      .filter(([floor, emps]) => {
        if (!term) return true;
        if (floor.toLowerCase().includes(term)) return true;
        return emps.some(r => {
          const empId = String(r.EmployeeID).toLowerCase();
          const name = String(r.ObjectName1).toLowerCase();
          const card = r.CardNumber ? String(r.CardNumber).toLowerCase() : '';
          return (
            empId.includes(term) ||
            name.includes(term) ||
            card.includes(term)
          );
        });
      })
      .sort(
        ([aFloor], [bFloor]) =>
          (liveCounts[bFloor] || 0) - (liveCounts[aFloor] || 0)
      );
  }, [floorMap, liveCounts, term]);

  const columns = [
    { field: 'EmployeeID', headerName: 'Emp ID' },
    { field: 'ObjectName1', headerName: 'Name' },
    { field: 'LocaleMessageTime', headerName: 'Swipe Time' },
    { field: 'PersonnelType', headerName: 'Type' },
    { field: 'CardNumber', headerName: 'Card' },
    { field: 'Door', headerName: 'Door' },
  ];

  return (
    <>
      <Header />

      <Box component="main" sx={{ pt: 1, pb: 1 }}>
        <Container maxWidth={false} disableGutters>
          <Box display="flex" alignItems="center" mb={2} sx={{ px: 2 }}>
            <Button size="small" onClick={() => navigate(-1)}>
              ← Back to Overview
            </Button>
          </Box>

          <Box display="flex" alignItems="center" gap={2} mb={2} sx={{ px: 2 }}>
            <Typography variant="h6">Floor Details</Typography>
            <Typography variant="body2" color="textSecondary">
              Last updated: {lastUpdate}
            </Typography>
            <TextField
              size="small"
              placeholder="Search floor / emp…"
              value={searchTerm}
              onChange={e => setSearchTerm(e.target.value)}
            />
          </Box>

          {loading ? (
            <Box sx={{ px: 2, py: 8 }}>
              <LoadingSpinner />
            </Box>
          ) : (
            <>
              <Box
                component="section"
                sx={{
                  display: 'flex',
                  flexWrap: 'wrap',
                  width: '100%',
                  m: 0,
                  p: 0,
                }}
              >
                {displayed.map(([floor, emps]) => {
                  const isSearching = term.length > 0;
                  const rowsToShow = isSearching
                    ? emps.filter(r => {
                        const empId = String(r.EmployeeID).toLowerCase();
                        const name = String(r.ObjectName1).toLowerCase();
                        const card = r.CardNumber
                          ? String(r.CardNumber).toLowerCase()
                          : '';
                        return (
                          empId.includes(term) ||
                          name.includes(term) ||
                          card.includes(term)
                        );
                      })
                    : emps.slice(0, 15);

                  return (
                    <Box
                      key={floor}
                      sx={{ width: '50%', boxSizing: 'border-box', p: 2 }}
                    >
                      <Box
                        sx={{
                          border: '1px solid #FFC107',
                          borderRadius: 2,
                          height: '100%',
                        }}
                      >
                        <Typography
                          variant="subtitle1"
                          fontWeight={600}
                          gutterBottom
                        >
                          {floor} (Total {liveCounts[floor] ?? 0})
                        </Typography>

                        <TableContainer
                          component={Paper}
                          variant="outlined"
                          sx={{ mb: 1 }}
                        >
                          <Table size="small">
                            <TableHead>
                              <TableRow>
                                {columns.map(col => (
                                  <TableCell
                                    key={col.field}
                                    sx={{ fontWeight: 'bold' }}
                                  >
                                    {col.headerName}
                                  </TableCell>
                                ))}
                              </TableRow>
                            </TableHead>
                            <TableBody>
                              {rowsToShow.map((r, i) => (
                                <TableRow
                                  key={`${r.PersonGUID}-${i}`}
                                  sx={
                                    isSearching
                                      ? {
                                          backgroundColor:
                                            'rgba(255, 235, 59, 0.3)',
                                        }
                                      : {}
                                  }
                                >
                                  <TableCell>{r.EmployeeID}</TableCell>
                                  <TableCell>{r.ObjectName1}</TableCell>
                                  <TableCell>
                                    {new Date(r.LocaleMessageTime).toLocaleTimeString()}
                                  </TableCell>
                                  <TableCell>{r.PersonnelType}</TableCell>
                                  <TableCell>{r.CardNumber}</TableCell>
                                  <TableCell>{r.Door}</TableCell>
                                </TableRow>
                              ))}
                            </TableBody>
                          </Table>
                        </TableContainer>

                        <Button
                          size="small"
                          onClick={() =>
                            setExpandedFloor(
                              expandedFloor === floor ? null : floor
                            )
                          }
                        >
                          {expandedFloor === floor ? 'Hide' : 'See more…'}
                        </Button>
                      </Box>
                    </Box>
                  );
                })}
              </Box>

              {expandedFloor && (
                <Box sx={{ px: 2, mt: 2 }}>
                  <Typography variant="h6" gutterBottom>
                    {expandedFloor} — All Entries
                  </Typography>
                  <DataTable
                    columns={columns}
                    rows={(floorMap[expandedFloor] || []).map(r => ({
                      ...r,
                      LocaleMessageTime: new Date(
                        r.LocaleMessageTime
                      ).toLocaleTimeString(),
                    }))}
                  />
                </Box>
              )}
            </>
          )}
        </Container>
      </Box>

      <Footer />
    </>
  );
}
