


const vilniusBuildings = { GAMA: 0, Delta: 0 };

(data?.details || []).forEach(r => {
  if (r.PartitionName2 === 'LT.Vilnius' && r.Direction === 'InDirection') {
    const building = vilniusMap[r.Door];
    if (building) vilniusBuildings[building]++;
  }
});

const vilniusFloors = Object.entries(vilniusBuildings).map(([name, headcount]) => ({
  name,
  headcount,
  capacity: name === 'GAMA' ? 500 : 600  // update with real values
}));




....
const vilniusBuildings = { GAMA: 0, Delta: 0 };

(data?.details || []).forEach(r => {
  if (r.PartitionName2 === 'LT.Vilnius' && r.Direction === 'InDirection') {
    const building = vilniusMap[r.Door];
    if (building) vilniusBuildings[building]++;
  }
});

const vilniusFloors = Object.entries(vilniusBuildings).map(([name, headcount]) => ({
  name,
  headcount,
  capacity: name === 'GAMA' ? 500 : 600  // update with real values
}));




......

const vilniusFloors = Object.entries(vilniusRealtimeFloors).map(([floor, headcount]) => ({
  name: floor,
  headcount,
  capacity: floorCapacities[floor] || 0
}));

...




// Vilnius door → building
const vilniusMap = doorMapRaw.reduce((acc, { partition, door }) => {
  if (partition === 'LT.Vilnius') {
    acc[door] = door.toUpperCase().includes('GAMA') ? 'GAMA' : 'Delta';
  }
  return acc;
}, {});







....
// Vilnius door → building
const vilniusMap = doorMapRaw.reduce((acc, { partition, door }) => {
  if (partition === 'LT.Vilnius') {
    acc[door] = door.toUpperCase().includes('GAMA') ? 'GAMA' : 'Delta';
  }
  return acc;
}, {});