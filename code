 <Box display="flex" flexWrap="wrap">
          {[...displayed]
            .sort((a, b) => b[1].length - a[1].length) // Priority: most rows first
            .map(([floor, emps]) => {
              const isExpanded = expanded === floor;
              const visibleEmps = isExpanded ? emps : emps.slice(0, 10);

              return (
                <Box
                  key={floor}
                  sx={{
                    width: { xs: '100%', sm: '50%' },
                    p: 1,
                    boxSizing: 'border-box',
                    // my: 2, // Equal vertical gap
                  }}
                >
                  <Typography
                    variant="subtitle1"
                    gutterBottom
                    sx={{ fontWeight: 'bold' }}
                  >
                    {floor} (Total {emps.length})
                  </Typography>

                  {/* Smart height layout */}
                  <Box
                    sx={{
                      border: '2px solid #FFC107',
                      borderRadius: 1,
                      p: 1,
                      display: 'flex',
                      flexDirection: 'column',
                      minHeight: 120,
                      maxHeight: isExpanded ? 600 : 'auto', // Expand gracefully
                    }}
                  >
                    <TableContainer
                      component={Paper}
                      variant="outlined"
                      sx={{
                        overflowY: 'auto',
                        flexGrow: 1,
                      }}
                    >
                      <Table size="small" stickyHeader>

                        <TableHead>
                          <TableRow>
                            {['ID', 'Name', 'Time', 'Type', 'Card', 'Door'].map(h => (
                              <TableCell
                                key={h}
                                sx={{
                                  fontWeight: 'bold',
                                  py: 0.5,
                                  whiteSpace: 'nowrap',
                                }}
                              >
                                {h}
                              </TableCell>
                            ))}
                          </TableRow>
                        </TableHead>
                        <TableBody>
                          {visibleEmps.map((r, i) => (
                            <TableRow key={i}>
                              <TableCell sx={{ py: 0.5, minWidth: 50, whiteSpace: 'nowrap' }}>{r.EmployeeID}</TableCell>
                              <TableCell sx={{ py: 0.5, minWidth: 120, whiteSpace: 'nowrap' }}>{r.ObjectName1}</TableCell>
                              <TableCell sx={{ py: 0.5, minWidth: 100, whiteSpace: 'nowrap' }}>
                                {new Date(r.LocaleMessageTime).toLocaleTimeString()}
                              </TableCell>
                              <TableCell sx={{ py: 0.5, minWidth: 80 }}>{r.PersonnelType}</TableCell>
                              <TableCell sx={{ py: 0.5, minWidth: 100 }}>{r.CardNumber}</TableCell>
                              <TableCell sx={{ py: 0.5, minWidth: 100 }}>{r.Door}</TableCell>
                            </TableRow>
                          ))}
                        </TableBody>

                      </Table>
                    </TableContainer>

                    {emps.length > 10 && (
                      <Box textAlign="right" mt={1}>
                        <Button
                          size="small"
                          onClick={() => setExpanded(isExpanded ? null : floor)}
                        >
                          {isExpanded ? 'Hide' : 'See moreâ€¦'}
                        </Button>
                      </Box>
                    )}
                  </Box>
                </Box>
              );
            })}
        </Box>
