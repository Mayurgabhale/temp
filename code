// src/App.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import SearchBar from './components/SearchBar';
import EmployeeCard from './components/EmployeeCard';
import './App.css';

function App() {
  const [searchTerm, setSearchTerm] = useState('');
  const [allEmployees, setAllEmployees] = useState([]);
  const [selected, setSelected] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [suggestions, setSuggestions] = useState([]);
  const [history, setHistory] = useState([]);
  const [stats, setStats] = useState(null);

  // Load all employees once
  useEffect(() => {
    setLoading(true);
    axios.get('http://localhost:5001/api/employees')
      .then(res => setAllEmployees(res.data))
      .catch(() => setError('Failed to load employees'))
      .finally(() => setLoading(false));
  }, []);



  useEffect(() => {
    axios.get('http://localhost:5001/api/stats')
      .then(res => setStats(res.data))
      .catch(err => console.error('❌ Stats load failed', err));
  }, []);


  // Live suggestions as you type
  useEffect(() => {
    const term = searchTerm.trim().toLowerCase();
    if (!term) {
      setSuggestions([]);
      return;
    }
    const matches = allEmployees.filter(emp =>
      (emp.EmployeeID || '').toLowerCase().includes(term) ||
      (emp.EmpName || '').toLowerCase().includes(term)
    );
    setSuggestions(matches.slice(0, 10));
  }, [searchTerm, allEmployees]);

  // When user submits exact search
  const handleSearch = () => {
    setError('');
    const term = searchTerm.trim().toLowerCase();
    if (!term) return setError('Please enter name or ID');

    const found = allEmployees.find(emp =>
      (emp.EmployeeID || '').toLowerCase() === term ||
      (emp.EmpName || '').toLowerCase().includes(term)
    );

    if (!found) {
      setSelected(null);
      setError('No matching employee');
    } else {
      selectEmployee(found);
      setSuggestions([]); // clear suggestions
    }
  };

  // Common logic when selecting an employee from search or history
  const selectEmployee = emp => {
    setSelected(emp);
    setSearchTerm(emp.EmpName);
    setHistory(prev => {
      if (prev.find(e => e.id === emp.id)) return prev;
      return [emp, ...prev];
    });
  };

  // Click a suggestion
  const pickSuggestion = emp => {
    selectEmployee(emp);
  };

  // Click a history item
  const pickHistory = emp => {
    selectEmployee(emp);
  };

  return (
    <div>
      <header className="header">
        <h1>Associate Verification Tool — Western Union</h1>
        <p>Welcome to Pune Technology Engineering Center • Mon–Fri, 9:00–18:00</p>
      </header>

      <div className="main-container">

        {stats && (
          <div className="stats-grid">
            {[
              ['Total Profiles', stats.TotalProfiles],
              ['Active Profiles', stats.ActiveProfiles],
              ['Active Employees', stats.ActiveEmployees],
              ['Active Contractors', stats.ActiveContractors],
              ['Terminated Profiles', stats.TerminatedProfiles],
              ['Terminated Employees', stats.TerminatedEmployees],
              ['Terminated Contractors', stats.TerminatedContractors],
            ].map(([label, val]) => (
              <div key={label} className="stat-box">
                <h3>{label}</h3>
                <p>{val}</p>
              </div>
            ))}
          </div>
        )}

        <div className="left-panel">
          <div className="search-bar">
            <SearchBar
              value={searchTerm}
              onChange={setSearchTerm}
              onSearch={handleSearch}
            />
          </div>
          {loading && <p>Loading…</p>}
          {error && <p className="error">{error}</p>}
          {selected && <EmployeeCard emp={selected} />}
        </div>


        <div className="right-panel">
          <div className="lists-container">
            <div className="history-list">
              <h3>Related Results</h3>
              <ul>
                {suggestions.map(emp => (
                  <li key={emp.id} onClick={() => pickSuggestion(emp)}>
                    {emp.EmpName}{emp.EmployeeID && ` (${emp.EmployeeID})`}
                  </li>
                ))}
              </ul>
            </div>

            <div className="history-list">
              <h3>Search History</h3>
              <ul>
                {history.map(emp => (
                  <li key={emp.id} onClick={() => pickHistory(emp)}>
                    {emp.EmpName}{emp.EmployeeID && ` (${emp.EmployeeID})`}
                  </li>
                ))}
              </ul>
            </div>
          </div>
        </div>
      </div>


      <footer
        style={{
          backgroundColor: '#000',
          color: '#FFC72C',
          padding: '1.5rem 0',
          textAlign: 'center',
          marginTop: '0rem',
          borderTop: '2px solid #FFC72C',
          fontSize: '0.95rem',
          lineHeight: '1.6'
        }}
      >
        <div>
          <strong>Global Security Operations Center</strong>
          <br />
          Associate Verification Tool — Western Union
        </div>
        <div style={{ marginTop: '0.75rem' }}>
          Contact us:&nbsp;
          <a
            href="mailto:GSOC-GlobalSecurityOperationCenter.SharedMailbox@westernunion.com"
            style={{ color: '#FFC72C', textDecoration: 'underline' }}
          >
            GSOC Mail
          </a>
          &nbsp;|&nbsp;
          Landline:&nbsp;
          <span style={{ color: '#FFC72C' }}>+91-020-67632394</span>
        </div>
      </footer>

    </div>

  );
}
export default App;
C:\Users\W0024618\Desktop\employee-verification\frontend\src\components\EmployeeCard.jsx
import React from 'react';

export default function EmployeeCard({ emp }) {
  if (!emp) return null;

  const rawStatus = emp.Employee_Status || 'Deactive';
  const normalizedStatus = rawStatus.trim().toLowerCase();
  const isTerminated = normalizedStatus === 'terminated';

  return (
    <div
      className={`employee-card ${isTerminated ? 'terminated' : ''}`}
      data-status={normalizedStatus}
    >
      {/* Profile Image */}
      <div className="card-photo-section">
        <div className="photo-wrapper">
          <img
            src={`http://localhost:5001${emp.imageUrl}`}
            alt={emp.EmpName}
            onError={(e) => {
              e.target.onerror = null;
              e.target.src = '/images/no-photo.jpg';
            }}
          />
          <span className={`status-badge ${normalizedStatus === 'active' ? 'active' : 'deactive'}`}>
            {rawStatus}
          </span>
        </div>
      </div>

      {/* Employee Info */}
      <div className="card-details">
        <h2 className="emp-name">{emp.EmpName}</h2>

        <div className="card-info">
          <label><i className="bi bi-person-badge id-icon"></i> Employee ID</label>
          <span>{emp.EmployeeID || '—'}</span>
        </div>
        <div className="card-info">
          <label><i className="bi bi-people type-icon"></i> Personnel Type</label>
          <span>{emp.PersonnelType}</span>
        </div>
        <div className="card-info">
          <label><i className="bi bi-person-lines-fill manager-icon"></i> Manager</label>
          <span>{emp.Manager_Name || '—'}</span>
        </div>
        <div className="card-info">
          <label><i className="bi bi-credit-card-2-front wu-icon"></i> Manager WU ID</label>
          <span>{emp.Manager_WU_ID || '—'}</span>
        </div>
        <div className="card-info">
          <label><i className="bi bi-lightning-fill status-icon"></i> Status</label>
          <span>{rawStatus}</span>
        </div>
        <div className="card-info">
          <label><i className="bi bi-card-list card-icon"></i> Total Cards</label>
          <span>{emp.Total_Cards}</span>
        </div>
        <div className="card-info">
          <label><i className="bi bi-check2-square active-icon"></i> Active Cards</label>
          <span>{emp.Active_Cards}</span>
        </div>
      </div>
    </div>
  );
}
C:\Users\W0024618\Desktop\employee-verification\frontend\src\components\SearchBar.jsx

import React from 'react';

export default function SearchBar({ value, onChange, onSearch }) {
  return (
    <form onSubmit={e => { e.preventDefault(); onSearch(); }}>
      <input
        type="text"
        placeholder="Search by Name or EmpID"
        value={value}
        onChange={e => onChange(e.target.value)}
      />
      <button type="submit">Search</button>
    </form>
  );
}

C:\Users\W0024618\Desktop\employee-verification\frontend\src\App.css


/* App.css */

/* Western Union palette */
:root {
  --wu-yellow: #FFCC00;
  --wu-black:  #000000;
  --wu-gray:   #f5f5f5;
}

/* Reset & base */
body {
  margin: 0;
  font-family: Arial, sans-serif;
  background-color: var(--wu-gray);
  color: var(--wu-black);
}

/* Header */
.header {
  background-color: var(--wu-black);
  color: var(--wu-yellow);
  padding: 20px 0;
  text-align: center;
  position: relative;
}
.header::after {
  content: '';
  display: block;
  height: 4px;
  background: var(--wu-yellow);
  width: 100%;
  position: absolute;
  bottom: 0;
  left: 0;
}
.header h1 {
  margin: 0;
  font-size: 2rem;
}
.header p {
  margin: 4px 0 0;
  font-size: 1rem;
  opacity: 0.85;
}

/* Main split container */
.main-container {
  display: flex;
  flex-wrap: wrap;
  min-height: calc(95vh - 160px); /* header + footer */
}

/* Left panel */
.left-panel {
  flex: 1 1 400px;
  background: #fff;
  padding: 20px;
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  align-items: center;
}

/* Right panel */
.right-panel {
  flex: 1 1 400px;
  background-color: var(--wu-yellow);
  padding: 0;
   /* background-image: url('/images/u-shape.png');  */
  background-repeat: no-repeat;
  background-position: center;
  background-size: contain;
}

/* SearchBar centered */
.search-bar {
  margin-bottom: 20px;
  width: 100%;
  max-width: 400px;
  align-items: center;
  display: flex;
  justify-content: center;
}
.search-bar input {
  flex: 1;
  border: 2px solid var(--wu-black);
  border-radius: 4px;
  padding: 8px;
  font-size: 1rem;
}
.search-bar button {
  background-color: var(--wu-yellow);
  border: none;
  padding: 8px 12px;
  margin-left: 8px;
  cursor: pointer;
  font-size: 1rem;
}
.search-bar button:hover {
  background-color: #e6b800;
}

/* Infographic Employee Panel */
.employee-infographic {
  display: grid;
  grid-template-columns: 1fr 1.5fr;
  background-color: #fff;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 6px 12px rgba(0,0,0,0.1);
  width: 100%;
  max-width: 100%;
  margin-top: 20px;
}
.employee-infographic .infographic-image {
  position: relative;
}
.employee-infographic .infographic-image img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}
.employee-infographic .infographic-image::after {
  content: '';
  position: absolute;
  bottom: 0; left: 0;
  width: 100%; height: 8px;
  background-color: var(--wu-yellow);
}
.employee-infographic .infographic-details {
  display: grid;
  grid-template-rows: auto repeat(4, 1fr);
}
.employee-infographic .infographic-details h2 {
  margin: 16px;
  text-align: center;
  font-size: 1.6rem;
}
.employee-infographic .infographic-details .info-block {
  display: flex;
  justify-content: space-between;
  padding: 12px 16px;
  border-top: 1px solid #eee;
}
.employee-infographic .infographic-details .info-block:nth-child(even) {
  background-color: #fafafa;
}

/* Footer */
.footer {
  background-color: var(--wu-black);
  color: var(--wu-yellow);
  padding: 10px 0;
  text-align: center;
  font-size: 0.9rem;
  position: relative;
}
.footer::before {
  content: '';
  display: block;
  height: 4px;
  background: var(--wu-yellow);
  width: 100%;
  position: absolute;
  top: 0;
  left: 0;
}




/* ---- Conditional Photo Border ---- */
.employee-infographic .infographic-image {
  border: 4px solid transparent; /* default */
}
.employee-infographic[data-status="Active"] .infographic-image {
  border-color: #28a745; /* green */
}
.employee-infographic[data-status="Deactive"] .infographic-image {
  border-color: #dc3545; /* red */
}



/* ---- Conditional Details-Side Gradient ---- */
.employee-infographic .infographic-details {
  /* ensure default stays white */
  background-color: #fff;
  position: relative; /* for pseudo-element overlay */
  overflow: hidden;
}

/* Active = green gradient on details side */
.employee-infographic[data-status="Active"] .infographic-details::before {
  content: '';
  position: absolute;
  top: 0; left: 0; right: 0; bottom: 0;
  background: linear-gradient(
    to right,
    rgba(40, 167, 69, 1) 0%,
    rgba(40, 167, 69, 0.1) 100%
  );
  z-index: 0;
}

/* Deactive = red gradient on details side */
.employee-infographic[data-status="Deactive"] .infographic-details::before {
  content: '';
  position: absolute;
  top: 0; left: 0; right: 0; bottom: 0;
  background: linear-gradient(
    to right,
    rgba(220, 53, 69, 1) 0%,
    rgba(220, 53, 69, 0.1) 100%
  );
  z-index: 0;
}

/* Keep all your inner text & blocks on top of the gradient */
.employee-infographic .infographic-details > * {
  position: relative;
  z-index: 1;
}


/* ---- Icons in info-block ---- */
.info-label::before {
  display: inline-block;
  width: 1em;
  margin-right: 0.5em;
  text-align: center;
}
/* Use emojis or replace with real icons */
.info-label.employee-id::before       { content: "👤"; }
.info-label.personnel-type::before    { content: "🗂️"; }
.info-label.manager::before           { content: "👥"; }
.info-label.manager-wu-id::before     { content: "🆔"; }
.info-label.employee-status::before   { content: "⚡"; }
.info-label.profile-disabled::before  { content: "🚫"; }
.info-label.total-cards::before       { content: "💳"; }
.info-label.active-cards::before      { content: "✅"; }

/* ---- Search History List ---- */
.history-list {
  width: 100%;
  max-width: 300px;
  background: #fff;
  border-radius: 8px;
  box-shadow: 0 4px 8px rgba(0,0,0,0.1);
  margin: 20px;
  padding: 10px;
}
.history-list h3 {
  margin: 0 0 10px;
  font-size: 1rem;
  text-align: center;
}
.history-list ul {
  list-style: none;
  margin: 0;
  padding: 0;
}
.history-list li {
  padding: 0px 0px;
  cursor: pointer;
  border-bottom: 1px solid #eee;
}
.history-list li:last-child {
  border-bottom: none;
}
.history-list li:hover {
  background-color: #f0f0f0;
}

/* Suggestions / Related Results */
.history-list {
  background: #fff;
  border-radius: 8px;
  box-shadow: 0 4px 8px rgba(0,0,0,0.1);
  padding: 1px;
  max-width: 400px;
  margin: 0px auto;
}
.history-list h3 {
  margin: 0 0 10px;
  font-size: 1.1rem;
  text-align: center;
  color: var(--wu-black);
}
.history-list ul {
  list-style: none;
  margin: 0;
  padding: 0;
}
.history-list li {
  padding: 6px 8px;
  cursor: pointer;
  border-bottom: 1px solid #eee;
}
.history-list li:last-child {
  border-bottom: none;
}
.history-list li:hover {
  background-color: #f0f0f0;
}



/* Right-panel lists wrapper (updated) */
.lists-container {
  display: flex;
  /* gap: 10px;           reduced gap */
  padding: 10px;       /* reduced padding */
}

.lists-container {
  gap: 15px;    /* tighter gap */
}


/* Each list takes half the width */
.lists-container .history-list {
  flex: 1;
  background: #fff;
  border-radius: 8px;
  box-shadow: 0 4px 8px rgba(0,0,0,0.1);
  padding: 15px;
  margin: 0;
  margin-top: 0;
  max-height: 60vh;
  overflow-y: auto;
}

/* Headings */
.lists-container .history-list h3 {
  margin: 0 0 10px;
  font-size: 1.1rem;
  text-align: center;
}

/* List items */
.lists-container .history-list ul {
  list-style: none;
  margin: 0;
  padding: 0;
}
.lists-container .history-list li {
  padding: 6px 8px;
  cursor: pointer;
  border-bottom: 1px solid #eee;
}
.lists-container .history-list li:last-child {
  border-bottom: none;
}
.lists-container .history-list li:hover {
  background-color: #f0f0f0;
}


/* ............... */


.stats-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
  gap: 1rem;
  margin-bottom: 1.5rem;
}
.stat-box {
  background: #000;
  color: #FFC72C;
  border: 1px solid #FFC72C;
  border-radius: 8px;
  padding: 1rem;
  text-align: center;
}
.stat-box h3 {
  margin: 0;
  font-size: 1.1rem;
}
.stat-box p {
  margin: 0.5rem 0 0;
  font-size: 1.5rem;
  font-weight: bold;
}


/* ==========================
   Employee Card - Combined CSS
   ========================== */

/* --- Card Container --- */

.employee-card[data-status="deactive"] {
  background-color: #EE4B2B; /* dark red for deactive */
  border-left: 6px solid #dc3545;
  color: #fff;
}

.employee-card {
  background-color: #000;
  color: #FFC72C;
  border: 2px solid #FFC72C;
  border-radius: 16px;
  overflow: hidden;
  display: flex;
  flex-direction: row;
  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.4);
  max-width: 100%;
  margin-top: 20px;
  transition: transform 0.3s ease;
}

.employee-card:hover {
  transform: scale(1.01);
}

/* Border Left Based on Status */
.employee-card[data-status="active"] {
  border-left: 6px solid #28a745;
}

.employee-card[data-status="deactive"] {
  border-left: 6px solid #040404;
}

/* Terminated Card Styling */
.employee-card.terminated {
  background-color: #8b0000;
  color: #fff;
  /* border-left: 6px solid #ff0000; */
}

/* --- Photo Section --- */
.card-photo-section {
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 24px;
  /* background: radial-gradient(circle, #1a1a1a, #000000); */
  flex: 1;
  min-width: 280px;
  max-width: 320px;
}

.photo-wrapper {
  position: relative;
  width: 290px;
  height: 290px;
  border-radius: 50%;
  /* background: #000; */
  overflow: hidden;
  border: 5px solid #FFC72C;
  box-shadow: 0 0 25px rgba(255, 199, 44, 0.5), 0 0 5px rgba(255, 255, 255, 0.1);
  transition: transform 0.4s ease;
}

.photo-wrapper:hover {
  transform: scale(1.05);
}

.photo-wrapper img {
  width: 100%;
  height: 100%;
  object-fit: contain;
  border-radius: 50%;
  background-color: #111;
}

/* --- Status Badge --- */
.status-badge {
  position: absolute;
  bottom: -2px;
  left: 50%;
  transform: translateX(-50%);
  padding: 6px 16px;
  font-size: 0.8rem;
  font-weight: 600;
  color: #fff;
  border-radius: 20px;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.4);
  z-index: 10;
}

.status-badge.active {
  background-color: #28a745;
}

.status-badge.deactive {
  background-color: #dc3545;
}

/* --- Card Details Section --- */
.card-details {
  flex: 2;
  padding: 16px;
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.card-details .emp-name {
  font-size: 1.6rem;
  margin: 0 0 8px;
  font-weight: bold;
  border-bottom: 1px solid #FFC72C;
  padding-bottom: 4px;
}

/* --- Info Rows --- */
.card-info {
  display: flex;
  justify-content: space-between;
  font-size: 1rem;
  padding: 6px 0;
  border-bottom: 1px dashed #444;
}

.card-info label {
  color: #FFD700;
  font-weight: 500;
  display: flex;
  align-items: center;
}

.card-info span {
  color: #FFF;
  font-weight: 600;
}

/* --- Colored Icons --- */
.card-info label .id-icon {
  color: #1abc9c;
  margin-right: 8px;
}

.card-info label .type-icon {
  color: #3498db;
  margin-right: 8px;
}

.card-info label .manager-icon {
  color: #9b59b6;
  margin-right: 8px;
}

.card-info label .wu-icon {
  color: #f39c12;
  margin-right: 8px;
}

.card-info label .status-icon {
  color: #e74c3c;
  margin-right: 8px;
}

.card-info label .card-icon {
  color: #00b894;
  margin-right: 8px;
}

.card-info label .active-icon {
  color: #2ecc71;
  margin-right: 8px;
}

/* --- Responsive --- */
@media (max-width: 768px) {
  .employee-card {
    flex-direction: column;
  }

  .card-photo-section {
    max-width: 100%;
    padding: 16px;
  }

  .photo-wrapper {
    width: 160px;
    height: 160px;
  }

  .card-details {
    padding: 12px;
  }

  .photo-wrapper {
    width: 290px;
  height: 290px;
  }
}

