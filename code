const detailRows = useMemo(() => {
  if (!data || !pickedDate || !data.details) return [];

  const dateStr = format(pickedDate, 'yyyy-MM-dd');

  // First filter by date and partition
  const filtered = data.details
    .filter(r => {
      const recordDate = format(new Date(r.LocaleMessageTime), 'yyyy-MM-dd');
      return recordDate === dateStr;
    })
    .filter(r => {
      if (!backendFilterKey) return true;
      const recordPartition = (r.PartitionName2 || r.PartitionNameFriendly || '').replace('MY.', '');
      if (!recordPartition) return false;
      const normalizedRecord = recordPartition.replace(' City', '').trim();
      const normalizedFilter = backendFilterKey.replace('MY.', '').replace(' City', '').trim();
      return normalizedRecord === normalizedFilter;
    });

  // Then reduce to get most recent entry per person
  const uniqueEntries = filtered.reduce((acc, row) => {
    const key = row.PersonGUID;
    if (!acc[key] || new Date(row.LocaleMessageTime) > new Date(acc[key].LocaleMessageTime)) {
      acc[key] = row;
    }
    return acc;
  }, {});

  // Convert object to array and filter for InDirection
  return Object.values(uniqueEntries)
    .filter(r => r.Direction === "InDirection");
}, [data, pickedDate, backendFilterKey]);