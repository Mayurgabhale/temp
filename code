<div class="container">
                <table id="device-table">
                    <thead>
                        <tr>
                            <th>Sr . No</th>
                            <th>Device IP</th>
                            <th>Device Name</th>
                            <th>Device Type</th>
                            <th>Device Region</th>
                            <!-- <th>Device Status</th> -->
                            <th>Uptime Duration</th>
                            <th>Downtime Count</th>
                            <th>Downtime Duration</th>
                            <th>Details</th>
                            <th>Remark</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>

function populateDeviceTable(details, historyData) {
    const tbody = document.getElementById('device-table').getElementsByTagName('tbody')[0];
    tbody.innerHTML = '';
    let list = [];

    ['cameras', 'archivers', 'controllers', 'servers'].forEach(type => {
        details[type]?.forEach(dev => {
            const ip = dev.ip_address;
            const safe = sanitizeId(ip);
            const name = dev[type.slice(0, -1) + 'name'] || 'Unknown';
            const category = type.slice(0, -1).toUpperCase();
            const region = dev.location || 'Unknown';
            const hist = filterHistoryForDisplay(historyData[ip] || [], category);
            const current = dev.status || (hist.length ? hist[hist.length - 1].status : 'Unknown');
            const downCount = hist.filter(e => e.status === 'Offline').length;

            // Only show offline or >15 downtimes
            if (current === 'Offline' || downCount > 15) {
                list.push({ ip, safe, name, category, region, current, hist, downCount });
            }
        });
    });

    list.sort((a, b) => b.downCount - a.downCount);

    // compute our two new summary counts:
    const downtimeOver15Count = list.filter(d => d.downCount > 15).length;
    const currentlyOfflineCount = list.filter(d => d.current === 'Offline').length;
    const setIf = (id, txt) => { const el = document.getElementById(id); if (el) el.innerText = txt; };
    setIf('count-downtime-over-15', `Devices with >15 downtimes: ${downtimeOver15Count}`);
    setIf('count-currently-offline', `Devices currently Offline: ${currentlyOfflineCount}`);

    if (!list.length) {
        const row = tbody.insertRow();
        const cell = row.insertCell();
        cell.colSpan = 10;
        cell.textContent = "No devices found";
        cell.style.textAlign = "center";
        cell.style.fontWeight = "bold";
        updateDisplayedDeviceCount(0);
        return;
    }

    list.forEach((dev, idx) => {
        const row = tbody.insertRow();
         row.classList.add(dev.current === "Online" ? "online-row" : "offline-row");
        row.style.border = "1px solid black";
        row.innerHTML = `
            <td>${idx + 1}</td>
            <td>${dev.ip}</td>
            <td>${dev.name}</td>
            <td>${dev.category}</td>
            <td>${dev.region}</td>
            <td id="uptime-${dev.safe}">0h/0m/0s</td>
            <td id="downtime-count-${dev.safe}">${dev.downCount}</td>
            <td id="downtime-${dev.safe}">0h/0m/0s</td>
            <td><button onclick="openDeviceHistory('${dev.ip}','${dev.name}','${dev.category}')">View History</button></td>
            <td id="remark-${dev.safe}">Device working properly</td>
        `;
        row.style.color = dev.current === "Online" ? "green" : "red";
       

        if (dev.current === "Online") {
            startUptime(dev.ip, dev.hist);
        } else {
            startDowntime(dev.ip, dev.hist, dev.category);
        }
        updateRemarks(dev.ip, dev.hist, dev.category);
    });

    filterData();
}
