import React from 'react';
import React, { useRef, useEffect } from 'react';

export default function SearchBar({ value, onChange, onSearch, suggestions, onSelectSuggestion }) {
  return (
    <div className="search-bar-container">
      <form
        onSubmit={e => {
          e.preventDefault();
          onSearch();
        }}
      >
        <input
          type="text"
          placeholder="Search by Name or EmpID"
          value={value}
          onChange={e => onChange(e.target.value)}
          autoComplete="off"
        />
        <button type="submit">Search</button>
      </form>

      {suggestions.length > 0 && (
        <ul className="suggestions-dropdown">
          {suggestions.map(emp => (
            <li key={emp.id} onClick={() => onSelectSuggestion(emp)}>
              {emp.EmpName} {emp.EmployeeID && `(${emp.EmployeeID})`}
            </li>
          ))}
        </ul>
      )}
    </div>
  );

  
}

const wrapperRef = useRef();

useEffect(() => {
  function handleClickOutside(event) {
    if (wrapperRef.current && !wrapperRef.current.contains(event.target)) {
      onSelectSuggestion(null); // pass null to clear suggestions
    }
  }
  document.addEventListener("mousedown", handleClickOutside);
  return () => {
    document.removeEventListener("mousedown", handleClickOutside);
  };
}, [onSelectSuggestion]);






....
import React, { useRef, useEffect } from 'react';






.....

.search-bar-container form {
  display: flex;
  gap: 10px;
  align-items: center;
}

.search-bar-container input {
  flex: 1;
  padding: 10px;
  border: 2px solid #FFC72C;
  border-radius: 6px;
  font-size: 1rem;
  outline: none;
}

.search-bar-container button {
  padding: 10px 18px;
  background-color: #FFC72C;
  color: #000;
  font-weight: bold;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  transition: background-color 0.2s ease;
  height: 100%; /* align with input height */
}

...

const handleSearch = () => {
  setError('');
  const term = searchTerm.trim().toLowerCase();
  if (!term) return setError('Please enter name or ID');

  const found = allEmployees.find(emp =>
    (emp.EmployeeID || '').toLowerCase() === term ||
    (emp.EmpName || '').toLowerCase().includes(term)
  );

  setSuggestions([]); // ⬅️ Clear suggestions here

  if (!found) {
    setSelected(null);
    setError('No matching employee');
  } else {
    selectEmployee(found);
  }
};
