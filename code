

let deviceUptimeTimers = {};
let deviceDowntimeTimers = {};

// Utility to turn an IP (or any string) into a safe DOM-ID fragment
function sanitizeId(str) {
  return (str || '').replace(/[^a-zA-Z0-9]/g, '_');
}

function fetchDeviceData() {
  const region = document.getElementById('region').value;
  fetch(`http://localhost/api/regions/details/${region}`)
    .then(r => r.json())
    .then(d => fetchDeviceHistory(d.details))
    .catch(console.error);
}

function fetchDeviceHistory(details) {
  fetch(`http://localhost/api/devices/history`)
    .then(r => r.json())
    .then(historyData => {
      populateDeviceTable(details, historyData);
      window.deviceHistoryData = historyData;
    })
    .catch(console.error);
}

function populateDeviceTable(details, historyData) {
  const Devices = [];
  const tbody = document.querySelector('#device-table tbody');
  tbody.innerHTML = '';

  const devices = [];
  ['cameras','archivers','controllers','servers'].forEach(type => {
    (details[type] || []).forEach(dev => {
      const ip        = dev.ip_address;
      const safe      = sanitizeId(ip);
      const name      = dev[type.slice(0,-1) + 'name'] || 'Unknown';
      const category  = type.slice(0,-1).toUpperCase();
      const rawHist   = historyData[ip] || [];
      const city      = dev.city || 'Unknown';
      const hist      = filterHistoryForDisplay(rawHist, category);
      const lastRaw   = rawHist[rawHist.length-1]?.status || 'Unknown';
      // if last raw Offline but <5min, treat Online
      let status = lastRaw;
      if (lastRaw === 'Offline' && ((Date.now() - new Date(rawHist[rawHist.length-1].timestamp)) / 1000) < 300) {
        status = 'Online';
      }
      const downCount = hist.filter(e => e.status === 'Offline').length;

      devices.push({ ip, safe, name, category, rawHist, hist, status, downCount,city  });
    });
  });

  // sort by ongoing ≥5min offline first, then by downCount desc
  devices.sort((a,b) => {
    const now = Date.now();
    const aLast = a.hist[a.hist.length-1], bLast = b.hist[b.hist.length-1];
    const aOff  = aLast?.status==='Offline' ? (now-new Date(aLast.timestamp))/1000 : 0;
    const bOff  = bLast?.status==='Offline' ? (now-new Date(bLast.timestamp))/1000 : 0;
    if ((aOff>=300) !== (bOff>=300)) return aOff>=300 ? -1 : 1;
    return b.downCount - a.downCount;
  });

  devices.forEach((d,i) => {
    const row = tbody.insertRow();

    // row.classList.add(d.status==='Online' ? 'status-online' : 'status-offline');

if (d.status === 'Offline') {
  row.classList.add('row-offline');
} else if (d.status === 'Online') {
  row.classList.add('row-online');
} else {
  // Optional: handle unknown or other cases
  row.classList.add('row-repair');
}


//     row.innerHTML = `
// <td>${i+1}</td>
// <td><span id="ip-${d.safe}" class="copy-text" onclick="copyToClipboard('ip-${d.safe}')">${d.ip}</span></td>
// <td><span id="name-${d.safe}" class="copy-text" onclick="copyToClipboard('name-${d.safe}')">${d.name}</span></td>
// <td>${d.category}</td>
// <td id="uptime-${d.safe}">0h/0m/0s</td>
// <td id="downtime-count-${d.safe}">${d.downCount}</td>
// <td id="downtime-${d.safe}">0h/0m/0s</td>
// <td><button class="history-btn" onclick="openDeviceHistory('${d.ip}','${d.name}','${d.category}')">View History</button></td>
// <td id="remark-${d.safe}">–</td>
// `;


row.innerHTML = `
<td>${i+1}</td>
<td><span id="ip-${d.safe}" class="copy-text" onclick="copyToClipboard('ip-${d.safe}')">${d.ip}</span></td>
<td><span id="name-${d.safe}" class="copy-text" onclick="copyToClipboard('name-${d.safe}')">${d.name}</span></td>
<td>${d.category}</td>
<td>${d.city}</td>
<td id="uptime-${d.safe}">0h/0m/0s</td>
<td id="downtime-count-${d.safe}">${d.downCount}</td>
<td id="downtime-${d.safe}">0h/0m/0s</td>
<td><button class="history-btn" onclick="openDeviceHistory('${d.ip}','${d.name}','${d.category}')">View History</button></td>
<td id="remark-${d.safe}" data-city="${d.city}">–</td>
`;


    if (d.status === 'Online') startUptime(d.ip, d.hist);
    else startDowntime(d.ip, d.hist);

    updateRemarks(d.ip, d.hist, d.status, d.downCount);
  });



  // ✅ Add this block AFTER `devices.forEach(...)` inside populateDeviceTable
  const cityFilter = document.getElementById('cityFilter');
if (cityFilter) {
  const uniqueCities = [...new Set(devices.map(dev => dev.city).filter(Boolean))].sort();
  cityFilter.innerHTML = '<option value="all">All Cities</option>';
  uniqueCities.forEach(city => {
    const option = document.createElement('option');
    option.value = city;
    option.textContent = city;
    cityFilter.appendChild(option);
  });
}

  filterData();


}

function filterHistoryForDisplay(hist, category) {
  if (category === 'SERVER') return hist.slice();

  const out = [];
  
  let lastOff = null;
  hist.forEach(e => {
    if (e.status === 'Offline') lastOff = e;
    else if (e.status === 'Online' && lastOff) {
      const diff = (new Date(e.timestamp) - new Date(lastOff.timestamp)) / 1000;
      if (diff >= 300) out.push(lastOff, e);
      lastOff = null;
    }
  });

  if (lastOff) {

    const diff = (Date.now() - new Date(lastOff.timestamp)) / 1000;
    if (diff >= 300) out.push(lastOff);
  }
  
  return out.sort((a,b) => new Date(a.timestamp) - new Date(b.timestamp));
}

function startUptime(ip, hist) {
  const safe = sanitizeId(ip);
  clearInterval(deviceDowntimeTimers[safe]);
  const on = hist.filter(e => e.status==='Online').pop();
  if (!on) return;
  const t0 = new Date(on.timestamp).getTime();
  deviceUptimeTimers[safe] = setInterval(() => {
    document.getElementById(`uptime-${safe}`).innerText = formatDuration(Math.floor((Date.now()-t0)/1000));
  }, 1000);
}

function startDowntime(ip, hist) {
  const safe = sanitizeId(ip);
  clearInterval(deviceUptimeTimers[safe]);
  const off = hist.filter(e => e.status==='Offline').pop();
  if (!off) return;
  const t0 = new Date(off.timestamp).getTime();
  deviceDowntimeTimers[safe] = setInterval(() => {
    const secs = Math.floor((Date.now()-t0)/1000);
    document.getElementById(`downtime-${safe}`).innerText = formatDuration(secs);
    document.getElementById(`downtime-count-${safe}`).innerText = hist.filter(e => e.status==='Offline').length;
    updateRemarks(ip, hist, null, null);
  }, 1000);
}

function updateRemarks(ip, hist, forcedStatus, forcedCount) {
  const safe = sanitizeId(ip);
  // Determine status
  let status = forcedStatus;
  if (!status) {
    const last = hist[hist.length-1]?.status || 'Unknown';
    status = last==='Offline' && ((Date.now()-new Date(hist[hist.length-1].timestamp))/1000)<300
      ? 'Online' : last;
  }
  const count = forcedCount ?? hist.filter(e => e.status==='Offline').length;
  const el = document.getElementById(`remark-${safe}`);
  if (!el) return;
  if (status === 'Offline') {
    el.innerText = count>0 ? 'Device is Offline, needs check.' : 'Device is Offline.';
  } else if (status === 'Online') {
    el.innerText = count>0
      ? `Device is Online, had ${count} downtime events ≥5 min.`
      : 'Device is Online.';
  } else {
    el.innerText = 'Device status unknown.';
  }
}

function formatDuration(sec) {
  const d = Math.floor(sec/86400), h = Math.floor((sec%86400)/3600),
        m = Math.floor((sec%3600)/60), s = Math.round(sec%60);
  const parts = [];
  if (d) parts.push(`${d}d`);
  if (h) parts.push(`${h}h`);
  if (m) parts.push(`${m}m`);
  if (s||!parts.length) parts.push(`${s}s`);
  return parts.join('/');
}

function openDeviceHistory(ip, name, category) {
  const raw = window.deviceHistoryData[ip] || [];
  const hist = filterHistoryForDisplay(raw, category);
  displayDeviceHistory(ip, name, category, hist);
  document.getElementById('device-history-modal').style.display = 'block';
}

// function displayDeviceHistory(ip, name, category, hist) {
//   const header = document.getElementById('device-history-header');
//   const container = document.getElementById('device-history');
//   header.innerHTML = `<h3>${name} (${ip})</h3><hr>`;

//   if (!hist.length) {
//     container.innerHTML = '<p>No downtime ≥5 min in history.</p>';
//     return;
//   }

//   let html = `<table border="1" style="width:100%;text-align:center;border-collapse:collapse;">
//     <thead><tr>
//       <th>Sr.No</th><th>Date</th><th>Day</th><th>Time</th><th>Status</th><th>Duration</th>
//     </tr></thead><tbody>`;

//   let idx = 1;
//   let lastOff = null;

//   hist.forEach(e => {
//     const t = new Date(e.timestamp);
//     const date = t.toLocaleDateString();
//     const day = t.toLocaleString('en-US', { weekday: 'long' });
//     const time = t.toLocaleTimeString();
//     let dur = '-';

//     if (e.status === 'Offline') {
//       // Only set lastOff if it's null (start of a new Offline period)
//       if (!lastOff) {
//         lastOff = e.timestamp;
//         html += `<tr>
//           <td>${idx++}</td><td>${date}</td><td>${day}</td><td>${time}</td>
//           <td style="color:red">${e.status}</td><td>${dur}</td>
//         </tr>`;
//       }
//       // If already Offline, ignore duplicate entries until Online appears
//     } else if (e.status === 'Online') {
//       if (lastOff) {
//         const diff = (new Date(e.timestamp) - new Date(lastOff)) / 1000;
//         dur = formatDuration(diff);
//         const offTime = new Date(lastOff);
//         const offDate = offTime.toLocaleDateString();
//         const offDay = offTime.toLocaleString('en-US', { weekday: 'long' });
//         const offClock = offTime.toLocaleTimeString();

//         // Output Offline row with calculated duration
//         html += `<tr>
//           <td>${idx++}</td><td>${offDate}</td><td>${offDay}</td><td>${offClock}</td>
//           <td style="color:red">Offline</td><td>${dur}</td>
//         </tr>`;

//         // Output Online row
//         html += `<tr>
//           <td>${idx++}</td><td>${date}</td><td>${day}</td><td>${time}</td>
//           <td style="color:green">${e.status}</td><td>${formatDuration(0)}</td>
//         </tr>`;

//         lastOff = null; // Reset after pairing
//       } else {
//         // Online entry without a preceding Offline
//         html += `<tr>
//           <td>${idx++}</td><td>${date}</td><td>${day}</td><td>${time}</td>
//           <td style="color:green">${e.status}</td><td>${dur}</td>
//         </tr>`;
//       }
//     }
//   });

//   // If history ends with unmatched Offline (ongoing)
//   if (lastOff) {
//     const t = new Date(lastOff);
//     const date = t.toLocaleDateString();
//     const day = t.toLocaleString('en-US', { weekday: 'long' });
//     const time = t.toLocaleTimeString();
//     const now = Date.now();
//     const dur = formatDuration((now - new Date(lastOff)) / 1000);

//     html += `<tr>
//       <td>${idx++}</td><td>${date}</td><td>${day}</td><td>${time}</td>
//       <td style="color:red">Offline</td><td>${dur}</td>
//     </tr>`;
//   }

//   html += `</tbody></table>`;
//   container.innerHTML = `<div class="scrollable-history-table">${html}</div>`;
// }


function displayDeviceHistory(ip, name, category, hist) {
  const header = document.getElementById('device-history-header');
  const container = document.getElementById('device-history');
  header.innerHTML = `
    <h2 style="color: var(--yellow); font-size: 24px;">${name} <span style="font-size:16px;">(${ip})</span></h2>
    <hr style="margin: 10px 0; border-color: var(--gray);">
  `;

  if (!hist.length) {
    container.innerHTML = `<p style="font-style: italic; color: #777;">No downtime ≥5 min in history.</p>`;
    return;
  }

  let html = `
    <div class="scrollable-history-table">
      <table class="history-table">
        <thead>
          <tr>
            <th>Sr.No</th><th>Date</th><th>Day</th><th>Time</th><th>Status</th><th>Duration</th>
          </tr>
        </thead>
        <tbody>
  `;

  let idx = 1;
  let lastOff = null;

  hist.forEach(e => {
    const t = new Date(e.timestamp);
    const date = t.toLocaleDateString();
    const day = t.toLocaleString('en-US', { weekday: 'long' });
    const time = t.toLocaleTimeString();
    let dur = '-';

    if (e.status === 'Offline') {
      if (!lastOff) {
        lastOff = e.timestamp;
        html += `
          <tr>
            <td>${idx++}</td><td>${date}</td><td>${day}</td><td>${time}</td>
            <td class="status-offline">${e.status}</td><td>${dur}</td>
          </tr>`;
      }
    } else if (e.status === 'Online') {
      if (lastOff) {
        const diff = (new Date(e.timestamp) - new Date(lastOff)) / 1000;
        dur = formatDuration(diff);
        const offTime = new Date(lastOff);
        const offDate = offTime.toLocaleDateString();
        const offDay = offTime.toLocaleString('en-US', { weekday: 'long' });
        const offClock = offTime.toLocaleTimeString();

        html += `
          <tr>
            <td>${idx++}</td><td>${offDate}</td><td>${offDay}</td><td>${offClock}</td>
            <td class="status-offline">Offline</td><td>${dur}</td>
          </tr>
          <tr>
            <td>${idx++}</td><td>${date}</td><td>${day}</td><td>${time}</td>
            <td class="status-online">${e.status}</td><td>${formatDuration(0)}</td>
          </tr>`;

        lastOff = null;
      } else {
        html += `
          <tr>
            <td>${idx++}</td><td>${date}</td><td>${day}</td><td>${time}</td>
            <td class="status-online">${e.status}</td><td>${dur}</td>
          </tr>`;
      }
    }
  });

  if (lastOff) {
    const t = new Date(lastOff);
    const date = t.toLocaleDateString();
    const day = t.toLocaleString('en-US', { weekday: 'long' });
    const time = t.toLocaleTimeString();
    const now = Date.now();
    const dur = formatDuration((now - new Date(lastOff)) / 1000);

    html += `
      <tr>
        <td>${idx++}</td><td>${date}</td><td>${day}</td><td>${time}</td>
        <td class="status-offline">Offline</td><td>${dur}</td>
      </tr>`;
  }

  html += `</tbody></table></div>`;
  container.innerHTML = html;
}




function closeHistoryModal() {
  document.getElementById('device-history-modal').style.display = 'none';
}

function exportDeviceTableToExcel() {
    const table = document.getElementById("device-table");
    const workbook = XLSX.utils.table_to_book(table, { sheet: "Device Table" });
    XLSX.writeFile(workbook, "Device_Table.xlsx");
}


function exportDeviceHistoryToExcel() {
    const historyTable = document.querySelector("#device-history-modal table");
    if (!historyTable) {
        alert("Please open a device's history first.");
        return;
    }
    const workbook = XLSX.utils.table_to_book(historyTable, { sheet: "Device History" });
    XLSX.writeFile(workbook, "Device_History.xlsx");
}


// Collect unique cities for filter


// Populate city filter dropdown
// Populate city filter dropdown based on available devices

// Populate city filter dropdown after devices are prepared
// const cityFilter = document.getElementById('cityFilter');
// const devices = []
// if (cityFilter) {
//   const uniqueCities = [...new Set(devices.map(dev => dev.city).filter(Boolean))].sort();
//   cityFilter.innerHTML = '<option value="all">All Cities</option>';
//   uniqueCities.forEach(city => {
//     const option = document.createElement('option');
//     option.value = city;
//     option.textContent = city;
//     cityFilter.appendChild(option);
//   });
// }



// function filterData() {
//   const typeSel   = document.getElementById('device-type').value.toUpperCase();
//   const remarkSel = document.getElementById('remark-filter').value.toUpperCase();
//   const searchTxt = document.getElementById('search-input').value.toUpperCase();
//   document.querySelectorAll('#device-table tbody tr').forEach(r => {
//     const type   = r.cells[3].textContent.toUpperCase();
//     const remark = r.cells[8].textContent.toUpperCase();
//     const ip     = r.cells[1].textContent.toUpperCase();
//     const name   = r.cells[2].textContent.toUpperCase();
//     const show   = (typeSel==='ALL'||type===typeSel)
//                  && (remarkSel==='ALL'||remark.includes(remarkSel))
//                  && (ip.includes(searchTxt)||name.includes(searchTxt));
//     r.style.display = show ? '' : 'none';
//   });
// }



function filterData() {
  const typeSel     = document.getElementById('device-type').value.toUpperCase();
  const remarkSel   = document.getElementById('remark-filter').value.toUpperCase();
  const citySel     = document.getElementById('cityFilter')?.value.toUpperCase() || "ALL";
  const searchTxt   = document.getElementById('search-input').value.toUpperCase();

  document.querySelectorAll('#device-table tbody tr').forEach(r => {
    const ip     = r.cells[1].textContent.toUpperCase();
    const name   = r.cells[2].textContent.toUpperCase();
    const type   = r.cells[3].textContent.toUpperCase();
    const city   = r.cells[8]?.dataset?.city?.toUpperCase() || r.cells[4].textContent.toUpperCase(); // fallback
    const remark = r.cells[8]?.textContent.toUpperCase();

    const matchesType   = (typeSel === 'ALL' || type === typeSel);
    const matchesRemark = (remarkSel === 'ALL' || remark.includes(remarkSel));
    const matchesCity   = (citySel === 'ALL' || city === citySel);
    const matchesSearch = (ip.includes(searchTxt) || name.includes(searchTxt));

    r.style.display = matchesType && matchesRemark && matchesCity && matchesSearch ? '' : 'none';
  });
}

function copyToClipboard(id) {
  const t = document.getElementById(id)?.innerText;
  if (t) navigator.clipboard.writeText(t);
}

// document.addEventListener('DOMContentLoaded', () => {
//   ['region','device-type','remark-filter'].forEach(id => {
//     document.getElementById(id)?.addEventListener('change', id==='region'?fetchDeviceData:filterData);
//   });
//   document.getElementById('search-input')?.addEventListener('input', filterData);
//   fetchDeviceData();
// });


document.addEventListener('DOMContentLoaded', () => {
  ['region', 'device-type', 'remark-filter'].forEach(id => {
    document.getElementById(id)?.addEventListener('change', id === 'region' ? fetchDeviceData : filterData);
  });

  document.getElementById('search-input')?.addEventListener('input', filterData);

  // ✅ Add cityFilter event
  document.getElementById('cityFilter')?.addEventListener('change', filterData);

  fetchDeviceData();
});


function showToast(message) {
    const toast = document.getElementById("toast");
    toast.textContent = message;
    toast.className = "toast show";
    setTimeout(() => {
        toast.className = toast.className.replace("show", "");
    }, 2500);
}

function copyToClipboard(elementId) {
    const text = document.getElementById(elementId)?.innerText;
    if (text) {
        navigator.clipboard.writeText(text)
            .then(() => showToast(`Copied: ${text}`))
            .catch(err => console.error("Failed to copy:", err));
    }
}

read above select city, filter datea
mens if is select pune in select box then in table i got only pune data like that , 
apply same logic for below code
and give me update code carefuly



//C:\Users\W0024618\Desktop\NewFrontend\Device Dashboard\summary.js
let deviceUptimeTimers = {};
let deviceDowntimeTimers = {};

// Utility to turn an IP (or any string) into a safe DOM‑ID fragment
function sanitizeId(str) {
    return (str || '').replace(/[^a-zA-Z0-9]/g, '_');
}

function fetchDeviceData() {
    const selectedRegion = document.getElementById('region').value;

    if (selectedRegion === 'All') {
        fetch(`http://localhost/api/regions/all-details`)
            .then(res => res.json())
            .then(allRegionsData => {
                let combinedDetails = { cameras: [], archivers: [], controllers: [], servers: [] };
                Object.values(allRegionsData).forEach(regionData => {
                    if (regionData.details) {
                        ['cameras', 'archivers', 'controllers', 'servers'].forEach(type => {
                            combinedDetails[type].push(...(regionData.details[type] || []));
                        });
                    }
                });
                fetchDeviceHistory(combinedDetails);
            })
            .catch(err => console.error('Error fetching all regions data:', err));
    } else {
        fetch(`http://localhost/api/regions/details/${selectedRegion}`)
            .then(res => res.json())
            .then(regionData => {
                const d = regionData.details;
                const total = (d.cameras?.length || 0) + (d.archivers?.length || 0) + (d.controllers?.length || 0) + (d.servers?.length || 0);
                const online = ([...(d.cameras || []), ...(d.archivers || []), ...(d.controllers || []), ...(d.servers || [])]
                    .filter(dev => dev.status === "Online").length);



                const setWithIcon = (id, iconClass, label, value, colorClass = "") => {
                    const el = document.getElementById(id);
                    if (el) {
                        el.innerHTML = `<i class="${iconClass}"></i> ${label}: <span class="${colorClass}" style="font-weight: 700;">${value}</span>`;
                    }
                };
                setWithIcon("total-devices", "fas fa-network-wired", "Total Devices", total,"text-green");
                setWithIcon("total-online", "fas fa-signal", "Total Online Devices", online, "text-green");
                setWithIcon("total-cameras", "fas fa-video", "Total Cameras", d.cameras?.length || 0,"text-green");
                setWithIcon("total-controllers", "fas fa-microchip", "Total Controllers", d.controllers?.length || 0,"text-green");
                setWithIcon("total-archivers", "fas fa-database", "Total Archivers", d.archivers?.length || 0,"text-green");
                setWithIcon("total-servers", "fas fa-server", "Total Servers", d.servers?.length || 0,"text-green");

                fetchDeviceHistory(d);
            })
            .catch(err => console.error('Error fetching device data:', err));
    }
}

function fetchDeviceHistory(details) {
    fetch(`http://localhost/api/devices/history`)
        .then(res => res.json())
        .then(historyData => {
            populateDeviceTable(details, historyData);
            window.deviceHistoryData = historyData;
        })
        .catch(err => console.error('Error fetching device history:', err));
}

function populateDeviceTable(details, historyData) {
    const tbody = document.getElementById('device-table').getElementsByTagName('tbody')[0];
    tbody.innerHTML = '';
    let list = [];

    ['cameras', 'archivers', 'controllers', 'servers'].forEach(type => {
        details[type]?.forEach(dev => {
            const ip = dev.ip_address;
            const safe = sanitizeId(ip);
            const name = dev[type.slice(0, -1) + 'name'] || 'Unknown';
            const category = type.slice(0, -1).toUpperCase();
            const region = dev.location || 'Unknown';
            const city = dev.city || 'Unknown';
            const hist = filterHistoryForDisplay(historyData[ip] || [], category);
            const current = dev.status || (hist.length ? hist[hist.length - 1].status : 'Unknown');
            const downCount = hist.filter(e => e.status === 'Offline').length;

            // Only show offline or >15 downtimes
            if (current === 'Offline' || downCount > 15) {
                list.push({ ip, safe, name, category, region,city, current, hist, downCount });
                
            }
        });
    });


    // Collect cities from devices
const citySet = new Set();
list.forEach(dev => {
    if (dev.region) {
        citySet.add(dev.region);
    }
});


// // Populate the City filter
// const cityFilter = document.getElementById("city-filter");
// if (cityFilter) {
//   const cities = [...new Set(list.map(dev => dev.region).filter(Boolean))].sort();
//   cityFilter.innerHTML = '<option value="all">All Cities</option>';
//   cities.forEach(city => {
//     const option = document.createElement("option");
//     option.value = city;
//     option.textContent = city;
//     cityFilter.appendChild(option);
//   });
// }


const cities = [...new Set(list.map(dev => dev.city).filter(Boolean))].sort();

// Clear existing options first
const cityFilter = document.getElementById('cityFilter');
// const locationFilter = document.getElementById('locationFilter');
cityFilter.innerHTML = '<option value="">All Cities</option>';
// locationFilter.innerHTML = '<option value="">All Locations</option>';

// Extract unique cities and locations
const uniqueCities = [...new Set(list.map(dev => dev.city).filter(Boolean))].sort();
// const uniqueLocations = [...new Set(list.map(dev => dev.location).filter(Boolean))].sort();

// Populate city select box
uniqueCities.forEach(city => {
  const option = document.createElement('option');
  option.value = city;
  option.textContent = city;
  cityFilter.appendChild(option);
});

// Populate location select box
// uniqueLocations.forEach(loc => {
//   const option = document.createElement('option');
//   option.value = loc;
//   option.textContent = loc;
//   locationFilter.appendChild(option);
// });





    list.sort((a, b) => b.downCount - a.downCount);

    // compute our two new summary counts:
    const downtimeOver15Count = list.filter(d => d.downCount > 15).length;
    const currentlyOfflineCount = list.filter(d => d.current === 'Offline').length;
    const setIf = (id, txt) => { const el = document.getElementById(id); if (el) el.innerText = txt; };
    setIf('count-downtime-over-15', `Devices with >15 downtimes: ${downtimeOver15Count}`);
    setIf('count-currently-offline', `Devices currently Offline: ${currentlyOfflineCount}`);

    if (!list.length) {
        const row = tbody.insertRow();
        const cell = row.insertCell();
        cell.colSpan = 10;
        cell.textContent = "No devices found";
        cell.style.textAlign = "center";
        cell.style.fontWeight = "bold";
        updateDisplayedDeviceCount(0);
        return;
    }

    list.forEach((dev, idx) => {
        const row = tbody.insertRow();

        //  row.classList.add(dev.current === "Online" ? "online-row" : "offline-row");

        if (dev.current === 'Offline') {
  row.classList.add('row-offline');
} else if (dev.current === 'Online') {
  row.classList.add('row-online');
} else {
  row.classList.add('row-repair');
}

        row.style.border = "1px solid black";
        row.innerHTML = `
   <td>${idx + 1}</td>
    <td><span onclick="copyText('${dev.ip}')" style="cursor:pointer; ;">${dev.ip}</span></td>
    <td><span onclick="copyText('${dev.name}')" style="cursor:pointer; ;">${dev.name}</span></td>
    <td>${dev.category}</td>
    <td>${dev.region}</td>
     <td>${dev.city}</td>
    <td id="uptime-${dev.safe}">0h/0m/0s</td>
    <td id="downtime-count-${dev.safe}">${dev.downCount}</td>
    <td id="downtime-${dev.safe}">0h/0m/0s</td>
    <td><button  class="history-btn" onclick="openDeviceHistory('${dev.ip}','${dev.name}','${dev.category}')">View History</button></td>
    <td id="remark-${dev.safe}">Device working properly</td>
`;
        row.style.color = dev.current === "Online" ? "#000" : "#000";


        if (dev.current === "Online") {
            startUptime(dev.ip, dev.hist);
        } else {
            startDowntime(dev.ip, dev.hist, dev.category);
        }
        updateRemarks(dev.ip, dev.hist, dev.category);
    });

    filterData();
}

function filterHistoryForDisplay(hist, category) {
    if (category === 'SERVER') return hist.slice(); // show all
    // else: remove any offline entries that resolve within 5 minutes
    const filtered = [];
    let lastOff = null;
    hist.forEach(e => {
        if (e.status === 'Offline') {
            lastOff = e;
        } else if (e.status === 'Online' && lastOff) {
            const diff = (new Date(e.timestamp) - new Date(lastOff.timestamp)) / 1000;
            if (diff >= 300) {
                // keep the offline event and the matching online event
                filtered.push(lastOff, e);
            }
            lastOff = null;
        } else {
            filtered.push(e);
        }
    });
    // If an Offline at end with no Online, and it's >5min ago, keep it
    if (lastOff) {
        const diff = (Date.now() - new Date(lastOff.timestamp)) / 1000;
        if (diff >= 300) filtered.push(lastOff);
    }
    return filtered.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));
}

function startUptime(ip, hist) {
    const safe = sanitizeId(ip);
    clearInterval(deviceDowntimeTimers[safe]);
    const lastOn = hist.filter(e => e.status === 'Online').pop();
    if (!lastOn) return;
    const start = new Date(lastOn.timestamp).getTime();
    deviceUptimeTimers[safe] = setInterval(() => {
        const secs = Math.floor((Date.now() - start) / 1000);
        const el = document.getElementById(`uptime-${safe}`);
        if (el) el.innerText = formatDuration(secs);
    }, 1000);
}

function startDowntime(ip, hist, category) {
    const safe = sanitizeId(ip);
    clearInterval(deviceUptimeTimers[safe]);
    const lastOff = hist.filter(e => e.status === 'Offline').pop();
    if (!lastOff) return;
    const start = new Date(lastOff.timestamp).getTime();
    deviceDowntimeTimers[safe] = setInterval(() => {
        const secs = Math.floor((Date.now() - start) / 1000);
        const el = document.getElementById(`downtime-${safe}`);
        if (el) el.innerText = formatDuration(secs);
        updateDowntimeCount(ip, hist, category);
    }, 1000);
}

function updateDowntimeCount(ip, hist, category) {
    const safe = sanitizeId(ip);
    const offs = filterHistoryForDisplay(hist, category).filter(e => e.status === 'Offline');
    const count = offs.length;
    const el = document.getElementById(`downtime-count-${safe}`);
    if (el) el.innerText = count;
    updateRemarks(ip, hist, category);
}

function updateRemarks(ip, hist, category) {
    const safe = sanitizeId(ip);
    const filteredOffs = filterHistoryForDisplay(hist, category).filter(e => e.status === 'Offline');
    const count = filteredOffs.length;
    const lastStatus = hist.length ? hist[hist.length - 1].status : 'Unknown';
    const el = document.getElementById(`remark-${safe}`);
    if (!el) return;

    if (lastStatus === 'Offline') {
        el.innerText = count >= 10 ? "Device is Offline, needs repair." : "Device is Offline.";
    }
    else if (lastStatus === 'Online') {
        if (count >= 10) el.innerText = "Device is Online, needs repair.";
        else if (count > 0) el.innerText = `Device is Online, it had ${count} downtime occurrences.`;
        else el.innerText = "Device is Online.";
    }
    else {
        el.innerText = "Device status unknown.";
    }
    const dc = document.getElementById(`downtime-count-${safe}`);
    if (dc) dc.innerText = count;
}

function formatDuration(seconds) {
    const d = Math.floor(seconds / 86400);
    const h = Math.floor((seconds % 86400) / 3600);
    const m = Math.floor((seconds % 3600) / 60);
    const s = Math.round(seconds % 60);
    const parts = [];
    if (d) parts.push(`${d}d`);
    if (h) parts.push(`${h}h`);
    if (m) parts.push(`${m}m`);
    if (s || !parts.length) parts.push(`${s}s`);
    return parts.join('/');
}

function openDeviceHistory(ip, name, category) {
    if (!window.deviceHistoryData) return console.error("No history loaded");
    const raw = window.deviceHistoryData[ip] || [];
    const hist = filterHistoryForDisplay(raw, category);
    displayDeviceHistory(ip, name, category, hist);
    const modal = document.getElementById('device-history-modal');
    if (modal) modal.style.display = 'block';
}

function calculateDowntimeDuration(ts, hist) {
    const start = new Date(ts).getTime();
    const nextUp = hist.find(e => e.status === 'Online' && new Date(e.timestamp).getTime() > start);
    if (nextUp) return formatDuration((new Date(nextUp.timestamp).getTime() - start) / 1000);
    return formatDuration((Date.now() - start) / 1000);
}

// function displayDeviceHistory(ip, name, category, hist) {
//     const header = document.getElementById('device-history-header');
//     const container = document.getElementById('device-history');
//     if (header) {
//         header.innerHTML = `
//             <h3>Device History</h3>
//             <p><strong>Device Name:</strong> ${name}</p>
//             <p><strong>Device IP:</strong> ${ip}</p>
//             <hr>`;
//     }
//     if (!container) return;
//     container.innerHTML = '';
//     if (!hist.length) {
//         container.innerHTML = '<p>No significant history (all brief outages &lt;5 min).</p>';
//         return;
//     }
//     let html = `
//         <table border="1" style="width:100%; text-align:center; border-collapse:collapse;">
//             <thead><tr>
//                 <th>Sr. No</th><th>Date</th><th>Day</th><th>Time</th><th>Status</th><th>Downtime Duration</th>
//             </tr></thead><tbody>`;
//     let lastOff = null;
//     hist.forEach((e, i) => {
//         const d = new Date(e.timestamp);
//         const date = d.toLocaleDateString();
//         const day = d.toLocaleString('en-US', { weekday: 'long' });
//         const time = d.toLocaleTimeString();
//         let dur = '-';
//         if (e.status === 'Offline') lastOff = e.timestamp;
//         else if (e.status === 'Online' && lastOff) {
//             dur = calculateDowntimeDuration(lastOff, hist);
//             lastOff = null;
//         }
//         html += `
//             <tr>
//                 <td>${i + 1}</td><td>${date}</td><td>${day}</td><td>${time}</td>
//                 <td style="color:${e.status === 'Online' ? '#212529' : '#212529'}">${e.status}</td>
//                 <td>${dur}</td>
//             </tr>`;
//     });
//     html += `</tbody></table>`;
//     container.innerHTML = html;
// }


function displayDeviceHistory(ip, name, category, hist) {
    const header = document.getElementById('device-history-header');
    const container = document.getElementById('device-history');

    if (header) {
        header.innerHTML = `
            <h2 style="color: var(--yellow); font-size: 24px; margin-bottom: 10px;">Device History</h2>
            <p><strong>Device Name:</strong> ${name}</p>
            <p><strong>Device IP:</strong> ${ip}</p>
            <hr style="margin: 15px 0; border-color: var(--gray);">`;
    }

    if (!container) return;

    container.innerHTML = '';

    if (!hist.length) {
        container.innerHTML = `<p style="font-style: italic; color: #555;">No significant history (all brief outages &lt; 5 min).</p>`;
        return;
    }

    let html = `
        <div class="history-table-wrapper">
          <table class="history-table">
            <thead>
              <tr>
                <th>Sr. No</th>
                <th>Date</th>
                <th>Day</th>
                <th>Time</th>
                <th>Status</th>
                <th>Downtime Duration</th>
              </tr>
            </thead>
            <tbody>
    `;

    let lastOff = null;
    hist.forEach((e, i) => {
        const d = new Date(e.timestamp);
        const date = d.toLocaleDateString();
        const day = d.toLocaleString('en-US', { weekday: 'long' });
        const time = d.toLocaleTimeString();
        let dur = '-';
        if (e.status === 'Offline') lastOff = e.timestamp;
        else if (e.status === 'Online' && lastOff) {
            dur = calculateDowntimeDuration(lastOff, hist);
            lastOff = null;
        }

        html += `
          <tr>
            <td>${i + 1}</td>
            <td>${date}</td>
            <td>${day}</td>
            <td>${time}</td>
            <td class="${e.status === 'Offline' ? 'status-offline' : 'status-online'}">${e.status}</td>
            <td>${dur}</td>
          </tr>`;
    });

    html += `</tbody></table></div>`;
    container.innerHTML = html;
}


function closeHistoryModal() {
    const modal = document.getElementById('device-history-modal');
    if (modal) modal.style.display = 'none';
}







// function filterData() {

// document.getElementById('cityFilter').addEventListener('change', filterData);
// document.getElementById('searchBox').addEventListener('input', filterData);

//   const searchValue = document.getElementById('searchBox').value.toLowerCase();
//   const selectedCity = document.getElementById('cityFilter').value.toLowerCase();

//   const rows = document.querySelectorAll('#deviceTable tbody tr');
//   rows.forEach(row => {
//     const text = row.textContent.toLowerCase();
//     const city = row.cells[4].textContent.toLowerCase();     // Adjust index if needed

//     const matchesSearch = text.includes(searchValue);
//     const matchesCity = !selectedCity || city === selectedCity;

//     row.style.display = (matchesSearch && matchesCity) ? '' : 'none';
//   });
 
// }

// function filterData() {
//   const searchValue = document.getElementById('searchBox').value.toLowerCase();
//   const selectedCity = document.getElementById('cityFilter').value.toLowerCase();
//   const selectedLocation = document.getElementById('locationFilter').value.toLowerCase();

//   const rows = document.querySelectorAll('#deviceTable tbody tr');
//   rows.forEach(row => {
//     const name = row.cells[0].textContent.toLowerCase();
//     const category = row.cells[1].textContent.toLowerCase();
//     const safe = row.cells[2].textContent.toLowerCase();
//     const current = row.cells[3].textContent.toLowerCase();
//     const city = row.cells[4].textContent.toLowerCase();
//     const location = row.cells[5].textContent.toLowerCase();

//     const matchesSearch = [name, category, safe, current, city, location].some(text =>
//       text.includes(searchValue)
//     );
//     const matchesCity = !selectedCity || city === selectedCity;
//     const matchesLocation = !selectedLocation || location === selectedLocation;

//     row.style.display = (matchesSearch && matchesCity && matchesLocation) ? '' : 'none';
//   });
// }



// function filterData() {
//   const searchValue = document.getElementById('searchBox')?.value.toLowerCase() || "";
//   const selectedCity = document.getElementById('cityFilter')?.value.toLowerCase() || "";
//   const selectedDeviceType = document.getElementById('device-type')?.value.toLowerCase() || "all";
//   const selectedRemark = document.getElementById('remark-filter')?.value.toLowerCase() || "all";

//   const rows = document.querySelectorAll('#device-table tbody tr');
//   let visibleCount = 0;

//   rows.forEach(row => {
//     const ip = row.cells[1].textContent.trim(); // IP column
//     const name = row.cells[2].textContent.toLowerCase();
//     const category = row.cells[3].textContent.toLowerCase(); // Device Type
//     const region = row.cells[4].textContent.toLowerCase();
//     const city = row.cells[5].textContent.toLowerCase();
//     const remark = document.getElementById(`remark-${sanitizeId(ip)}`)?.innerText.toLowerCase() || "";

//     const matchesSearch = [ip, name, category, region, city].some(text =>
//       text.toLowerCase().includes(searchValue)
//     );

//     const matchesCity = !selectedCity || city === selectedCity;
//     const matchesType = selectedDeviceType === "all" || category === selectedDeviceType.toLowerCase();
//     const matchesRemark = selectedRemark === "all" || remark.includes(selectedRemark);

//     const shouldDisplay = matchesSearch && matchesCity && matchesType && matchesRemark;
//     row.style.display = shouldDisplay ? "" : "none";
//     if (shouldDisplay) visibleCount++;
//   });

//   updateDisplayedDeviceCount(visibleCount);
// }

// ,,,,,,,,,,,,,

function filterData() {
  const searchValue = document.getElementById('searchBox')?.value.toLowerCase() || "";
  const selectedCity = document.getElementById('cityFilter')?.value.toLowerCase().trim();
  const selectedDeviceType = document.getElementById('device-type')?.value.toLowerCase().trim();
  const selectedRemark = document.getElementById('remark-filter')?.value.toLowerCase().trim();

  const rows = document.querySelectorAll('#device-table tbody tr');
  let visibleCount = 0;

  rows.forEach(row => {
    const ip = row.cells[1].textContent.trim();
    const name = row.cells[2].textContent.toLowerCase();
    const category = row.cells[3].textContent.toLowerCase().trim();
    const region = row.cells[4].textContent.toLowerCase().trim();
    const city = row.cells[5].textContent.toLowerCase().trim();
    const remark = document.getElementById(`remark-${sanitizeId(ip)}`)?.innerText.toLowerCase().trim() || "";

    const matchesSearch = [ip, name, category, region, city].some(text =>
      text.includes(searchValue)
    );

    const matchesCity = !selectedCity || selectedCity === "all" || city === selectedCity;
    const matchesType = selectedDeviceType === "all" || category === selectedDeviceType;
    const matchesRemark = selectedRemark === "all" || remark.includes(selectedRemark);

    const shouldDisplay = matchesSearch && matchesCity && matchesType && matchesRemark;
    row.style.display = shouldDisplay ? "" : "none";
    if (shouldDisplay) visibleCount++;
  });

  updateDisplayedDeviceCount(visibleCount);
}


function updateDisplayedDeviceCount(count) {
    const el = document.getElementById('device-count');
    if (el) el.innerText = `Displayed Devices: ${count}`;
}

// document.addEventListener("DOMContentLoaded", () => {
//     ['region', 'device-type', 'remark-filter'].forEach(id => {
//         const el = document.getElementById(id);
//         if (el) el.addEventListener('change', id === 'region' ? fetchDeviceData : filterData);
//     });
//     fetchDeviceData();
// });



document.addEventListener("DOMContentLoaded", () => {
    ['region', 'device-type', 'remark-filter'].forEach(id => {
        const el = document.getElementById(id);
        if (el) el.addEventListener('change', id === 'region' ? fetchDeviceData : filterData);
    });

    const cityFilter = document.getElementById('city-filter');
    if (cityFilter) {
        cityFilter.addEventListener('change', filterData);
    }

    fetchDeviceData();
});


function exportDeviceTableToExcel() {
    const tbl = document.getElementById("device-table");
    if (!tbl) return;
    const wb = XLSX.utils.table_to_book(tbl, { sheet: "Device Table" });
    XLSX.writeFile(wb, "Device_Table.xlsx");
}

function exportDeviceHistoryToExcel() {
    const histTbl = document.querySelector("#device-history-modal table");
    if (!histTbl) return alert("Please open a device's history first.");
    const wb = XLSX.utils.table_to_book(histTbl, { sheet: "Device History" });
    XLSX.writeFile(wb, "Device_History.xlsx");
}

function copyText(text) {
    navigator.clipboard.writeText(text)
        .then(() => showToast(`Copied: ${text}`))
        .catch(err => console.error("Copy failed: ", err));
}



function showToast(message) {
    const toast = document.getElementById("toast");
    toast.textContent = message;
    toast.className = "toast show";
    setTimeout(() => {
        toast.className = toast.className.replace("show", "");
    }, 2500);
}

function copyToClipboard(elementId) {
    const text = document.getElementById(elementId)?.innerText;
    if (text) {
        navigator.clipboard.writeText(text)
            .then(() => showToast(`Copied: ${text}`))
            .catch(err => console.error("Failed to copy:", err));
    }
}
