// src/pages/Dashboard.jsx
import React, { useEffect, useState } from 'react';
import { Container, Box, Typography, Skeleton } from '@mui/material';
import GroupIcon from '@mui/icons-material/Group';
import TrackChangesIcon from '@mui/icons-material/TrackChanges';
import PeopleIcon from '@mui/icons-material/People';
import BusinessCenterIcon from '@mui/icons-material/BusinessCenter';

import Header from '../components/Header';
import Footer from '../components/Footer';
import SummaryCard from '../components/SummaryCard';
import CompositeChartCard from '../components/CompositeChartCard';
import PieChartCard from '../components/PieChartCard';
import LoadingSpinner from '../components/LoadingSpinner';
import { useLiveOccupancy } from '../hooks/useLiveOccupancy';

import doorMapRaw from '../utils/doorMap';

import austriaFlag from '../assets/flags/austria.png';
import uaeFlag from '../assets/flags/uae.png';
import irelandFlag from '../assets/flags/ireland.png';
import italyFlag from '../assets/flags/italy.png';
import lithuaniaFlag from '../assets/flags/lithuania.png';
import moroccoFlag from '../assets/flags/morocco.png';
import russiaFlag from '../assets/flags/russia.png';
import ukFlag from '../assets/flags/uk.png';
import spainFlag from '../assets/flags/spain.png';

const partitions = [
  'AUT.Vienna', 'DU.Abu Dhab', 'IE.Dublin', 'IT.Rome',
  'LT.Vilnius', 'MA.Casablanca', 'RU.Moscow', 'UK.London', 'ES.Madrid'
];

const displayName = {
  'AUT.Vienna': 'Vienna',
  'DU.Abu Dhab': 'Abu Dhabi',
  'IE.Dublin': 'Dublin',
  'IT.Rome': 'Rome',
  'LT.Vilnius': 'Vilnius',
  'MA.Casablanca': 'Casablanca',
  'RU.Moscow': 'Moscow',
  'UK.London': 'London',
  'ES.Madrid': 'Madrid'
};

const flagMap = {
  'AUT.Vienna': austriaFlag,
  'DU.Abu Dhab': uaeFlag,
  'IE.Dublin': irelandFlag,
  'IT.Rome': italyFlag,
  'LT.Vilnius': lithuaniaFlag,
  'MA.Casablanca': moroccoFlag,
  'RU.Moscow': russiaFlag,
  'UK.London': ukFlag,
  'ES.Madrid': spainFlag
};

const colorsMap = {
  'AUT.Vienna': ['#FFD666', '#fcf3cf', '#2ecc71', '#ec7063'],
  'DU.Abu Dhab': ['#FFE599', '#fcf3cf', '#2ecc71', '#ec7063'],
  'IE.Dublin': ['#FFF2CC', '#fcf3cf', '#2ecc71', '#ec7063'],
  'IT.Rome': ['#FFD666', '#fcf3cf', '#2ecc71', '#ec7063'],
  'LT.Vilnius': ['#FFE599', '#fcf3cf', '#2ecc71', '#ec7063'],
  'MA.Casablanca': ['#FFF2CC', '#fcf3cf', '#2ecc71', '#ec7063'],
  'RU.Moscow': ['#FFD666', '#fcf3cf', '#2ecc71', '#ec7063'],
  'UK.London': ['#FFE599', '#fcf3cf', '#2ecc71', '#ec7063'],
  'ES.Madrid': ['#FFC0CB', '#fcf3cf', '#2ecc71', '#ec7063']
};

export default function Dashboard() {
  const { data, loading, error } = useLiveOccupancy(1000);
  const [lastUpdate, setLastUpdate] = useState('');

  useEffect(() => {
    if (data) {
      setLastUpdate(new Date().toLocaleTimeString());
    }
  }, [data]);

  if (error) {
    return <Box py={4}><Typography color="error" align="center">Error loading live data</Typography></Box>;
  }

  // Build vilniusMap inside component
  const vilniusMap = doorMapRaw.reduce((acc, { partition, door }) => {
    if (partition === 'LT.Vilnius') {
      acc[door] = door.toUpperCase().includes('GAMA') ? 'GAMA' : 'Delta';
    }
    return acc;
  }, {});

  // Vilnius building-level headcount
  const vilniusBuildings = { GAMA: 0, Delta: 0 };
  (data?.details || []).forEach(r => {
    if (r.PartitionName2 === 'LT.Vilnius' && r.Direction === 'InDirection') {
      const building = vilniusMap[r.Door];
      if (building) vilniusBuildings[building]++;
    }
  });

  const vilniusFloors = Object.entries(vilniusBuildings).map(([name, headcount]) => ({
    name,
    headcount,
    capacity: name === 'GAMA' ? 500 : 600 // Update if needed
  }));

  // Prepare pie chart data
  const slice1 = partitions.slice(0, 4).map(k => ({
    name: displayName[k],
    value: data?.realtime?.[k]?.total || 0
  }));

  const slice2 = partitions.slice(5).map(k => ({
    name: displayName[k],
    value: data?.realtime?.[k]?.total || 0
  }));

  // Summary data
  const todayTot = data?.today.total || 0;
  const todayEmp = data?.today.Employee || 0;
  const todayCon = data?.today.Contractor || 0;
  const realtimeTot = Object.values(data?.realtime || {}).reduce((sum, x) => sum + (x.total || 0), 0);
  const realtimeEmp = Object.values(data?.realtime || {}).reduce((sum, x) => sum + (x.Employee || 0), 0);
  const realtimeCon = Object.values(data?.realtime || {}).reduce((sum, x) => sum + (x.Contractor || 0), 0);

  // Summary cards per site
  const summaryItems = [];

  summaryItems.push({
    label: 'Vilnius',
    total: data?.realtime['LT.Vilnius']?.total || 0,
    emp: data?.realtime['LT.Vilnius']?.Employee || 0,
    cont: data?.realtime['LT.Vilnius']?.Contractor || 0,
    flag: flagMap['LT.Vilnius'],
    colors: colorsMap['LT.Vilnius']
  });

  partitions.filter(k => k !== 'LT.Vilnius').forEach(k => {
    const x = data?.realtime[k] || {};
    summaryItems.push({
      label: displayName[k],
      total: x.total || 0,
      emp: x.Employee || 0,
      cont: x.Contractor || 0,
      flag: flagMap[k],
      colors: colorsMap[k]
    });
  });

  return (
    <>
      <Header />
      <Container maxWidth={false} disableGutters sx={{ px: 2, py: 1 }}>
        {/* Summary Cards */}
        <Box display="flex" flexWrap="wrap" gap={1} mb={2}>
          {[
            { title: "Today's Total Headcount", value: todayTot, icon: <GroupIcon sx={{ color: '#E57373' }} />, border: '#FFD666' },
            { title: "Today's Employees Count", value: todayEmp, icon: <PeopleIcon sx={{ color: '#81C784' }} />, border: '#81C784' },
            { title: "Today's Contractors Count", value: todayCon, icon: <BusinessCenterIcon sx={{ color: '#64B5F6' }} />, border: '#FFE599' },
            { title: "Realtime Headcount", value: realtimeTot, icon: <TrackChangesIcon sx={{ color: '#BA68C8' }} />, border: '#FFF2CC' },
            { title: "Realtime Employees Count", value: realtimeEmp, icon: <PeopleIcon sx={{ color: '#FFB74D' }} />, border: '#FFD666' },
            { title: "Realtime Contractors Count", value: realtimeCon, icon: <BusinessCenterIcon sx={{ color: '#4DB6AC' }} />, border: '#FFE599' }
          ].map((c, i) => (
            <Box key={i} sx={{ flex: '1 1 calc(16.66% - 8px)' }}>
              <SummaryCard title={c.title} total={c.value} stats={[]} icon={c.icon} sx={{ height: 140, border: `2px solid ${c.border}` }} />
            </Box>
          ))}
        </Box>

        {/* Site Summary Cards */}
        <Box display="flex" flexWrap="wrap" gap={1} mb={4}>
          {loading ? <LoadingSpinner /> : summaryItems.map(item => {
            const [tc, totc, ec, cc] = item.colors;
            return (
              <Box key={item.label} sx={{ flex: '1 1 calc(10.66% - 1px)' }}>
                <SummaryCard
                  title={item.label}
                  total={item.total}
                  stats={[{ label: 'Employees', value: item.emp }, { label: 'Contractors', value: item.cont }]}
                  icon={<Box component="img" src={item.flag} alt={item.label} sx={{ width: 50, height: 30, border: '1px solid #fff' }} />}
                  titleColor={tc}
                  totalColor={totc}
                  statColors={[ec, cc]}
                  sx={{
                    height: 180,
                    border: `2px solid ${tc}`,
                    '& .MuiTypography-subtitle1': { fontSize: '1.3rem' },
                    '& .MuiTypography-h4': { fontSize: '1.7rem' },
                    '& .MuiTypography-caption': { fontSize: '0.875rem' }
                  }}
                />
              </Box>
            );
          })}
        </Box>

        {/* Charts */}
        <Box display="flex" gap={2} mb={4} flexWrap="wrap">
          {/* Composite Chart */}
          <Box flex="1 1 0" sx={{ border: '2px solid #FFC107', borderRadius: 2, p: 2, background: 'rgba(0,0,0,0.6)' }}>
            {loading ? <Skeleton variant="rectangular" height={350} /> : (
              <CompositeChartCard
                title="Vilnius"
                data={vilniusFloors}
                barColor="#4CAF50"
                lineColor="#FF0000"
                height={410}
                animationDuration={1500}
                animationEasing="ease-in-out"
              />
            )}
          </Box>

          {/* Pie Charts */}
          {[{ title: 'Vienna • Abu Dhabi • Dublin • Rome', data: slice1 },
            { title: 'Casablanca • Moscow • London • Madrid', data: slice2 }]
            .map((s, i) => (
              <Box key={i} flex="1 1 0" sx={{ border: '2px solid #FFC107', borderRadius: 2, p: 2, background: 'rgba(0,0,0,0.6)' }}>
                {loading ? <Skeleton variant="rectangular" height={350} /> : (
                  <PieChartCard
                    title={s.title}
                    data={s.data}
                    colors={['#4E79A7', '#F28E2B', '#E15759', '#76B7B2']}
                    innerRadius={60}
                    height={410}
                    showZeroSlice
                    animationDuration={1500}
                  />
                )}
              </Box>
            ))}
        </Box>
      </Container>

      <footer style={{
        backgroundColor: '#000',
        color: '#FFC72C',
        padding: '1.5rem 0',
        textAlign: 'center',
        borderTop: '2px solid #FFC72C',
        fontSize: '0.95rem',
        lineHeight: '1.6'
      }}>
        <div>
          <strong>Global Security Operations Center (GSOC)</strong><br />
          Live Occupancy dashboard for Western Union Denver — Real-time occupancy, floor activity, and personnel insights.
        </div>
        <div style={{ marginTop: '0.75rem' }}>
          Contact us: <a href="mailto:gsoc@westernunion.com" style={{ color: '#FFC72C', textDecoration: 'underline' }}>gsoc@westernunion.com</a> |
          Landline: <span style={{ color: '#FFC72C' }}>+91-020-67632394</span>
        </div>
      </footer>
    </>
  );
}