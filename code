const partitionRows = useMemo(() => {
  if (!summaryEntry) return [];

  // Handle single-city response (data is in region)
  if (backendFilterKey && summaryEntry.region) {
    const feCode = Object.keys(apacPartitionDisplay).find(
      code => apacForwardKey[code] === backendFilterKey || 
             code === backendFilterKey
    );
    
    const display = feCode ? apacPartitionDisplay[feCode] : null;
    
    return [{
      country: display?.country || 'Unknown',
      city: display?.city || backendFilterKey.replace(' City', ''),
      employee: summaryEntry.region.Employee ?? 0,
      contractor: summaryEntry.region.Contractor ?? 0,
      total: summaryEntry.region.total ?? 0
    }];
  }

  // Handle global view (data is in partitions)
  return Object.entries(summaryEntry.partitions || {})
    .filter(([key]) => !backendFilterKey || 
      key.replace(' City', '') === backendFilterKey.replace(' City', ''))
    .map(([key, vals]) => {
      // First try to find exact match in forward keys
      const feCode = Object.entries(apacForwardKey).find(
        ([code, beKey]) => beKey === key || `${beKey} City` === key || code === key
      )?.[0];
      
      // If not found, try to match with country prefix (MY., PH., etc.)
      const display = feCode ? apacPartitionDisplay[feCode] : 
        Object.entries(apacPartitionDisplay).find(
          ([code]) => code.endsWith(key.replace(' City', ''))
        )?.[1];
      
      return {
        country: display?.country || 'Unknown',
        city: display?.city || key.replace(' City', ''),
        employee: vals.Employee ?? vals.EmployeeCount ?? 0,
        contractor: vals.Contractor ?? vals.ContractorCount ?? 0,
        total: vals.total ?? 0,
      };
    });
}, [summaryEntry, backendFilterKey]);