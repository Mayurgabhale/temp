// C:\Users\W0024618\Desktop\NewFrontend\Device Dashboard\script.js

const baseUrl = "http://localhost:80/api/regions";
let refreshInterval = 300000; // 5 minutes
let pingInterval = 60000; // 30 seconds
let countdownTime = refreshInterval / 1000; // Convert to seconds
let currentRegion = "global";
let deviceDetailsCache = {}; // Store previous details to prevent redundant updates
let latestDetails = null; // Cache the latest fetched details

document.addEventListener("DOMContentLoaded", () => {
    fetchData("global"); // Load initial data
    startAutoRefresh("global");

    document.querySelectorAll(".region-button").forEach((button) => {
        button.addEventListener("click", () => {
            const region = button.getAttribute("data-region");
            document.getElementById("region-title").textContent = `${region.toUpperCase()} Summary`;
            switchRegion(region);
        });
    });

    document.getElementById("close-modal").addEventListener("click", () => {
        document.getElementById("modal").style.display = "none";
    });
});

function switchRegion(region) {
    clearExistingIntervals(); // Avoid interval duplication
    currentRegion = region;
    deviceDetailsCache = {};
    fetchData(region);
    startAutoRefresh(region);
}

// **Auto-refresh mechanism**
function startAutoRefresh(regionName) {
    fetchData(regionName); // Fetch initial data

    clearExistingIntervals();

    // Start countdown timer
    window.countdownTimer = setInterval(() => {
        document.getElementById("countdown").innerText = `Refreshing in ${countdownTime} seconds`;
        countdownTime--;
        if (countdownTime < 0) countdownTime = refreshInterval / 1000;
    }, 1000);

    // Refresh summary & details every 5 minutes
    window.refreshTimer = setInterval(() => {
        fetchData(regionName);
        countdownTime = refreshInterval / 1000;
    }, refreshInterval);

    // Ping devices every 30 seconds using history API
    window.pingTimer = setInterval(() => {
        pingAllDevices(regionName);
    }, pingInterval);
}

function clearExistingIntervals() {
    clearInterval(window.countdownTimer);
    clearInterval(window.refreshTimer);
    clearInterval(window.pingTimer);
}

// **Fetch summary and details together**
function fetchData(regionName) {
    Promise.all([
        fetch(`${baseUrl}/summary/${regionName}`).then(res => res.json()),
        fetch(`${baseUrl}/details/${regionName}`).then(res => res.json())
    ])
        .then(([summary, details]) => {
            console.log("Summary Data:", summary);
            console.log("Details Data:", details);

            updateSummary(summary);

            if (JSON.stringify(details) !== JSON.stringify(deviceDetailsCache)) {
                updateDetails(details);
                deviceDetailsCache = details; // Update cache
            }
            // Cache details for pinging
            latestDetails = details;
        })
        .catch((error) => console.error("Error fetching data:", error));
}

/*
   Updated pingAllDevices:
   Instead of calling a non-existent ping endpoint, we now use the history API to fetch 
   device history and update each deviceâ€™s status by updating the separate status dot and text.
*/

function pingAllDevices(regionName) {
    let details = latestDetails;
    if (!details || !details.details) return;

    fetch("http://localhost/api/devices/history")
        .then(response => response.json())
        .then(historyData => {
            let statusChanged = false;

            for (const [key, devices] of Object.entries(details.details)) {
                if (!Array.isArray(devices) || devices.length === 0) continue;

                devices.forEach((device) => {
                    const ip = device.ip_address || "N/A";
                    const card = document.querySelector(`[data-ip="${ip}"]`);
                    if (!card) return;

                    // Determine new status from history API if available.
                    const historyArray = historyData[ip];
                    let newStatus = (device.status || "offline").toLowerCase();
                    if (Array.isArray(historyArray) && historyArray.length > 0) {
                        const latestEntry = historyArray[historyArray.length - 1];
                        newStatus = (latestEntry.status || "offline").toLowerCase();
                    }
                    const currentStatus = card.dataset.status;

                    // Update UI: update the dot and the text.
                    const statusDot = card.querySelector(".status-dot");
                    const statusText = card.querySelector(".status-text");
                    if (statusDot) {
                        statusDot.style.backgroundColor = (newStatus === "online") ? "green" : "red";
                        statusDot.classList.remove("online-dot", "offline-dot");
                        statusDot.classList.add(newStatus === "online" ? "online-dot" : "offline-dot");
                    }
                    else {
                        console.warn(`Status dot element not found for IP: ${ip}`);
                    }
                    if (statusText) {
                        statusText.textContent = newStatus.charAt(0).toUpperCase() + newStatus.slice(1);
                    } else {
                        console.warn(`Status text element not found for IP: ${ip}`);
                    }

                    if (newStatus !== currentStatus) {
                        statusChanged = true;
                        card.dataset.status = newStatus;
                    }
                });
            }

            setTimeout(() => {
                if (statusChanged) {
                    fetchData(regionName);
                }
            }, 5000);
        })
        .catch(error => {
            console.error("Error fetching device history:", error);
        });
}

function updateSummary(data) {
    document.getElementById("total-devices").textContent = data.summary?.totalDevices || "0";
    document.getElementById("online-devices").textContent = data.summary?.totalOnlineDevices || "0";
    document.getElementById("offline-devices").textContent = data.summary?.totalOfflineDevices || "0";

    document.getElementById("camera-total").textContent = data.summary?.cameras?.total || "0";
    document.getElementById("camera-online").textContent = data.summary?.cameras?.online || "0";
    document.getElementById("camera-offline").textContent = data.summary?.cameras?.offline || "0";

    document.getElementById("archiver-total").textContent = data.summary?.archivers?.total || "0";
    document.getElementById("archiver-online").textContent = data.summary?.archivers?.online || "0";
    document.getElementById("archiver-offline").textContent = data.summary?.archivers?.offline || "0";

    document.getElementById("controller-total").textContent = data.summary?.controllers?.total || "0";
    document.getElementById("controller-online").textContent = data.summary?.controllers?.online || "0";
    document.getElementById("controller-offline").textContent = data.summary?.controllers?.offline || "0";

    document.getElementById("server-total").textContent = data.summary?.servers?.total || "0";
    document.getElementById("server-online").textContent = data.summary?.servers?.online || "0";
    document.getElementById("server-offline").textContent = data.summary?.servers?.offline || "0";
}

/*
   Updated updateDetails:
   Each device card is built with separate elements for the status dot and status text.
   This ensures that later updates from pingAllDevices can reliably find and update them.
*/


// Icon utility based on device type

function getDeviceTypeIcon(type) {
    switch (type) {
        case 'cameras': return 'fa-camera';
        case 'controllers': return 'fa-microchip';
        case 'archivers': return 'fa-database';
        case 'servers': return 'fa-server';
        default: return 'fa-box'; // default icon
    }
}

function updateDetails(data) {
    const detailsContainer = document.getElementById("device-details");
    const deviceFilter = document.getElementById("device-filter");
    const onlineFilterButton = document.getElementById("filter-online");
    const offlineFilterButton = document.getElementById("filter-offline");
    const allFilterButton = document.getElementById("filter-all");
    const cityFilter = document.getElementById("city-filter");

    detailsContainer.innerHTML = "";
    cityFilter.innerHTML = '<option value="all">All Cities</option>';

    let combinedDevices = [];
    let citySet = new Set();

    // Icon utility based on device type
    function getDeviceIcon(type) {
        switch (type.toLowerCase()) {
            case "camera":
                return "fas fa-video";
            case "controller":
                return "fas fa-cogs";
            case "archiver":
                return "fas fa-hdd";
            case "server":
                return "fas fa-server";
            default:
                return "fas fa-microchip"; // fallback icon
        }
    }


    // Fetch real-time status if available.
    fetch("http://localhost:80/api/region/devices/status")
        .then((response) => response.json())
        .then((realTimeStatus) => {
            console.log("Live Status Data:", realTimeStatus);

            for (const [key, devices] of Object.entries(data.details)) {
                if (!Array.isArray(devices) || devices.length === 0) continue;
                const deviceType = key.toLowerCase();

                devices.forEach((device) => {
                    const deviceIP = device.ip_address || "N/A";
                    let currentStatus = (realTimeStatus[deviceIP] || device.status || "offline").toLowerCase();
                    const city = device.city || "Unknown";
                    citySet.add(city);

                    // Create card element.
                    const card = document.createElement("div");
                    card.className = "device-card";
                    card.dataset.type = deviceType;
                    card.dataset.status = currentStatus;
                    card.dataset.city = city;
                    card.setAttribute("data-ip", deviceIP);

                    // Create a container for status.
                    const statusContainer = document.createElement("p");
                    statusContainer.className = "device-status";
                    statusContainer.textContent = "Status: ";

                    // Create the status text element.
                    const statusText = document.createElement("span");
                    statusText.className = "status-text";
                    statusText.textContent = currentStatus.charAt(0).toUpperCase() + currentStatus.slice(1);

                    // Create the status dot element.
                    const statusDot = document.createElement("span");
                    statusDot.classList.add(currentStatus === "online" ? "online-dot" : "offline-dot");
                    statusDot.style.backgroundColor = (currentStatus === "online") ? "green" : "red";
                    statusDot.style.display = "inline-block";
                    statusDot.style.width = "10px";
                    statusDot.style.height = "10px";
                    statusDot.style.marginLeft = "5px";
                    statusDot.style.borderRadius = "50%";

                    // Append status text and dot to the container.
                    statusContainer.appendChild(statusText);
                    statusContainer.appendChild(statusDot);



                    card.innerHTML = `
                    <h3 class="device-name">
                        ${device.cameraname || device.controllername || device.archivername || device.servername || "Unknown Device"}
                    </h3>
                    <p class="device-type-label ${deviceType}">
                        <strong><i class="${getDeviceIcon(deviceType)}"></i> ${deviceType.toUpperCase()}</strong>
                    </p>
                    <p><strong><i class="fas fa-network-wired"></i> IP:</strong> <span class="device-ip">${deviceIP}</span></p>
                    <p><strong><i class="fas fa-map-marker-alt"></i> Location:</strong> ${device.location || "N/A"}</p>
                    <p><strong><i class="fas fa-city"></i> City:</strong> ${city}</p>
                    `;
                    card.appendChild(statusContainer);
                    card.innerHTML += `
                            <button class="details-button" onclick="showModal('${device.cameraname || device.controllername || device.archivername || device.servername || "Unknown Device"}', '${deviceIP}', '${device.location || "N/A"}', '${currentStatus.charAt(0).toUpperCase() + currentStatus.slice(1)}', '${city}')">Details</button>
                        `;

                    combinedDevices.push({
                        card: card,
                        device: {
                            type: deviceType,
                            status: currentStatus,
                            city: city
                        }
                    });
                });
            }

            combinedDevices.sort((a, b) => {
                const statusA = (a.device.status === "offline") ? 0 : 1;
                const statusB = (b.device.status === "offline") ? 0 : 1;
                return statusA - statusB;
            });

            const allDevices = combinedDevices.map(item => item.card);
            const deviceObjects = combinedDevices.map(item => item.device);

            citySet.forEach((city) => {
                const option = document.createElement("option");
                option.value = city;
                option.textContent = city;
                cityFilter.appendChild(option);
            });

            deviceFilter.value = "all";
            cityFilter.value = "all";
            document.querySelectorAll(".status-filter").forEach(btn => btn.classList.remove("active"));
            allFilterButton.classList.add("active");

            function filterDevices() {
                const selectedType = deviceFilter.value;
                const selectedStatus = document.querySelector(".status-filter.active")?.dataset.status || "all";
                const selectedCity = cityFilter.value;

                detailsContainer.innerHTML = "";

                const filteredDevices = allDevices.filter((device) =>
                    (selectedType === "all" || device.dataset.type === selectedType) &&
                    (selectedStatus === "all" || device.dataset.status === selectedStatus) &&
                    (selectedCity === "all" || device.dataset.city === selectedCity)
                );

                filteredDevices.forEach((deviceCard) => {
                    detailsContainer.appendChild(deviceCard);
                });

                const region = currentRegion?.toUpperCase() || "GLOBAL";
                if (selectedCity !== "all") {
                    document.getElementById("region-title").textContent = `${region}, ${selectedCity} Summary`;
                } else {
                    document.getElementById("region-title").textContent = `${region} Summary`;
                }

                const filteredSummaryDevices = deviceObjects.filter((deviceObj, index) => {
                    const correspondingCard = allDevices[index];
                    return (
                        (selectedType === "all" || correspondingCard.dataset.type === selectedType) &&
                        (selectedStatus === "all" || correspondingCard.dataset.status === selectedStatus) &&
                        (selectedCity === "all" || correspondingCard.dataset.city === selectedCity)
                    );
                });

                const summary = calculateCitySummary(filteredSummaryDevices);
                updateSummary(summary);
            }

            function calculateCitySummary(devices) {
                const summary = {
                    summary: {
                        totalDevices: devices.length,
                        totalOnlineDevices: devices.filter(d => d.status === "online").length,
                        totalOfflineDevices: devices.filter(d => d.status === "offline").length,
                        cameras: { total: 0, online: 0, offline: 0 },
                        archivers: { total: 0, online: 0, offline: 0 },
                        controllers: { total: 0, online: 0, offline: 0 },
                        servers: { total: 0, online: 0, offline: 0 },
                    }
                };

                devices.forEach((device) => {
                    if (!summary.summary[device.type]) return;
                    summary.summary[device.type].total += 1;
                    if (device.status === "online") summary.summary[device.type].online += 1;
                    else summary.summary[device.type].offline += 1;
                });

                return summary;
            }

            filterDevices();

            setTimeout(() => {
                const selectedCity = cityFilter.value;
                const selectedType = deviceFilter.value;
                const selectedStatus = document.querySelector(".status-filter.active")?.dataset.status || "all";

                const filteredSummaryDevices = deviceObjects.filter((deviceObj, index) => {
                    const correspondingCard = allDevices[index];
                    return (
                        (selectedType === "all" || correspondingCard.dataset.type === selectedType) &&
                        (selectedStatus === "all" || correspondingCard.dataset.status === selectedStatus) &&
                        (selectedCity === "all" || correspondingCard.dataset.city === selectedCity)
                    );
                });

                const summary = calculateCitySummary(filteredSummaryDevices);
                updateSummary(summary);
            }, 100);

            deviceFilter.addEventListener("change", filterDevices);
            cityFilter.addEventListener("change", filterDevices);
            allFilterButton.addEventListener("click", () => {
                document.querySelectorAll(".status-filter").forEach(btn => btn.classList.remove("active"));
                allFilterButton.classList.add("active");
                filterDevices();
            });
            onlineFilterButton.addEventListener("click", () => {
                document.querySelectorAll(".status-filter").forEach(btn => btn.classList.remove("active"));
                onlineFilterButton.classList.add("active");
                filterDevices();
            });
            offlineFilterButton.addEventListener("click", () => {
                document.querySelectorAll(".status-filter").forEach(btn => btn.classList.remove("active"));
                offlineFilterButton.classList.add("active");
                filterDevices();
            });
        })
        .catch((error) => {
            console.error("Error fetching real-time device status:", error);
            detailsContainer.innerHTML = "<p>Failed to load device details.</p>";
        });
}

function showModal(name, ip, location, status, city) {
    document.getElementById("modal-title").textContent = `Details for ${name}`;
    document.getElementById("modal-body").innerHTML = `
            <li><strong>Name:</strong> ${name}</li>
            <li><strong>IP:</strong> ${ip}</li>
            <li><strong>Location:</strong> ${location}</li>
            <li><strong>Status:</strong> ${status}</li>
            <li><strong>City:</strong> ${city}</li>
        `;
    document.getElementById("modal").style.display = "block";
}






/* C:\Users\W0024618\Desktop\NewFrontend\Device Dashboard\styles.css */

/* ===== Reset & Base Styles ===== */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  background-color: #121212;
  color: #f1f1f1;
  line-height: 1.6;
  min-height: 100vh;
}

a {
  color: #00adb5;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h1, h2, h3 {
  font-weight: bold;
  margin-bottom: 10px;
  color: #fbc531;
}

/* ===== Layout ===== */
.container {
  display: flex;
  min-height: 100vh;
}

/* ===== Sidebar ===== */
#sidebar {
  width: 250px;
  background-color: #1e1e2f;
  padding: 20px;
  border-right: 1px solid #2c2c3e;
  display: flex;
  flex-direction: column;
  gap: 15px;
}

#sidebar h2 {
  font-size: 20px;
  color: #00adb5;
  margin-bottom: 15px;
}

.region-button,
.nav-button,
.status-filter {
  background-color: #2c2f33;
  color: #f1f1f1;
  border: none;
  padding: 10px 15px;
  margin-bottom: 8px;
  text-align: left;
  border-radius: 6px;
  cursor: pointer;
  transition: 0.3s;
}

.region-button:hover,
.nav-button:hover,
.status-filter:hover {
  background-color: #3d3f50;
}

.status-filter.active {
  background-color: #00adb5;
  color: #fff;
}

select {
  padding: 8px;
  border-radius: 6px;
  border: none;
  background-color: #2c2f33;
  color: #f1f1f1;
  margin-bottom: 10px;
}

/* ===== Main Content ===== */
#content {
  flex: 1;
  padding: 30px;
}

/* #region-title {
  font-size: 24px;
  margin-bottom: 20px;
  margin-left: 10px;
} */

 #region-title {
  text-align: center;
  margin: 0 auto 30px;
  padding: 24px;
  background: linear-gradient(135deg, #1e1e2f, #2c2f33);
  border-radius: 16px;
  box-shadow: 0 6px 18px rgba(0, 173, 181, 0.25);
  max-width: 100%;
  font-size: 24px;
  font-weight: 600;
  color: #fbc531;
  letter-spacing: 1px;
}



/* ===== Summary Cards ===== */
.summary {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
  gap: 20px;
  margin-bottom: 10px;
}

.card {
  background: linear-gradient(135deg, #1e1e2f, #2c2f33);
  padding: 10px 10px;
  border-radius: 16px;
  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.4);
  transition: all 0.3s ease-in-out;
  border: 1px solid #333;
  overflow: hidden;
  position: relative;
}

.card:hover {
  transform: translateY(-6px);
  box-shadow: 0 10px 20px rgba(255, 204, 0, 0.25);
  border-color: #00adb5;
}

.card h3 {
  color: #fbc531;
  font-size: 20px;
  text-align: center;
  margin-bottom: 20px;
  position: relative;
}

.card i {
  color: #00adb5;
  font-size: 18px;
  margin-right: 8px;
}

/* Centered blocks */
.card-status {
  text-align: center;
  /* padding: 14px 12px; */
  border-radius: 10px;
  margin-bottom: 12px;
  font-size: 15px;
  font-weight: 500;
  display: flex;
  flex-direction: column;
  gap: 6px;
  color: #fff;
}

.status-total {
  background-color: #fbc53122;
  color: #fbc531;
}

.status-online {
  background-color: #44bd3222;
  color: #44bd32;
}

.status-offline {
  background-color: #e8411822;
  color: #e84118;
}

.card-status span {
  font-size: 22px;
  font-weight: bold;
}


.section-divider{
    border: none;
    height: 2px;
    background: linear-gradient(to right,#00adb5,#fbc531,#00adb5);
    border-radius: 4px;
    opacity: 0.8;
}


/* Background color based on status */
.device-card.online {
  background-color: #e8f5e9; /* light green */
  border-left: 4px solid #2e7d32;
}

.device-card.offline {
  background-color: #ffebee; /* light red */
  border-left: 4px solid #c62828;
}

/* Different color header based on device type */
.device-card.cameras .device-name {
  color: #1976d2; /* Blue */
}

.device-card.controllers .device-name {
  color: #9c27b0; /* Purple */
}

.device-card.archivers .device-name {
  color: #f57c00; /* Orange */
}

.device-card.servers .device-name {
  color: #2e7d32; /* Green */
}

/* Optional: add border/shadow for card aesthetics */
.device-card {
  padding: 15px;
  margin: 10px;
  border-radius: 10px;
  box-shadow: 0 2px 6px rgba(0,0,0,0.1);
  transition: transform 0.2s ease;
}

.device-card:hover {
  transform: scale(1.02);
}




/* ===== Device Grid ===== */
.device-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  gap: 20px;
}


/* .device-card {
  background-color: #2c2f33;
  padding: 20px;
  border-radius: 12px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.6);
  transition: 0.3s ease;
} */

#device-details.device-grid {
  display: grid;
  grid-template-rows: repeat(3, 2fr); /* 3 per row */
  gap: 10px;
  margin-top: 20px;
}


/* Main container (card) */
.device-card {
  background-color: #2c2f33;
  color: #fff;
  padding: 20px;
  border-radius: 12px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.6);
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

/* Hover effect */
.device-card:hover {
  transform: translateY(-6px);
  box-shadow: 0 10px 24px rgba(0, 0, 0, 0.5);
}

/* Header: Name and status */
.device-card h3 {
  font-size: 1.2rem;
  font-weight: 600;
  color: #f1f5f9;
  margin-bottom: 10px;
}

/* Status pill */
.device-card .status {
  display: inline-block;
  font-size: 0.85rem;
  padding: 4px 10px;
  border-radius: 999px;
  font-weight: 600;
  text-transform: capitalize;
  margin-bottom: 12px;
}

.device-card[data-status="online"] .status {
  background-color: #0f766e33; /* soft green tint */
  color: #34d399;
}

.device-card[data-status="offline"] .status {
  background-color: #7f1d1d33; /* soft red tint */
  color: #f87171;
}

/* Device details */
.device-card p {
  font-size: 0.95rem;
  color: #cbd5e1;
  margin: 6px 0;
  line-height: 1.5;
}

/* Details button */
.device-card button {
  margin-top: 15px;
  padding: 10px 14px;
  background-color: #3b82f6;
  color: #ffffff;
  font-weight: 600;
  font-size: 0.95rem;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.device-card button:hover {
  background-color: #2563eb;
}

/* Grid layout for cards */
#device-details {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(380px, 1fr));
  gap: 20px;
  padding: 20px;
  background-color: #0f172a; /* overall dashboard background */
  min-height: 100vh;
}






/* .device-card {
  background-color: #2c2f33;
  color: #fff;
  padding: 20px;
  border-radius: 12px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.6);
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.device-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 6px 20px rgba(255, 204, 0, 0.3);
}

.device-card h3 {
  font-size: 16px;
  color: #00adb5;
  margin-bottom: 8px;
}

.device-card p {
  font-size: 13px;
  margin: 4px 0;
}

.details-button {
  display: inline-block;
  background-color: #00adb5;
  color: #fff;
  border: none;
  border-radius: 6px;
  padding: 8px 12px;
  margin-top: 10px;
  cursor: pointer;
  transition: background-color 0.3s;
}

.details-button:hover {
  background-color: #008c90;
} */

/* ===== Modal ===== */
#modal {
  display: none;
  position: fixed;
  z-index: 10;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.8);
  justify-content: center;
  align-items: center;
}

.modal-content {
  background-color: #1e1e2f;
  padding: 30px;
  border-radius: 12px;
  width: 90%;
  max-width: 600px;
  color: #f1f1f1;
}

#close-modal {
  float: right;
  font-size: 24px;
  cursor: pointer;
  color: #fbc531;
}

#modal-title {
  font-size: 20px;
  margin-bottom: 15px;
}

#modal-body li {
  margin-bottom: 8px;
  font-size: 14px;
}

/* ===== Countdown Timer ===== */
.countdown-timer {
  font-size: 14px;
  color: #f1f1f1;
  margin-top: 15px;
}

/* ===== Footer ===== */
.footer {
  background-color: #1e1e2f;
  text-align: center;
  padding: 20px;
  font-size: 13px;
  border-top: 1px solid #2c2c3e;
  color: #aaa;
}

.footer-logo {
  width: 120px;
  margin-bottom: 10px;
}

/* ===== Responsive Adjustments ===== */
@media (max-width: 768px) {
  .container {
    flex-direction: column;
  }

  #sidebar {
    width: 100%;
    border-right: none;
    border-bottom: 1px solid #2c2c3e;
  }

  .summary {
    grid-template-columns: 1fr;
  }

  .device-grid {
    grid-template-columns: 1fr;
  }
}
