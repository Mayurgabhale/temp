C:\Users\W0024618\Desktop\employee-verification\frontend\src\components\EmployeeCard.jsx

import React from 'react';

export default function EmployeeCard({ emp }) {
  if (!emp) return null;

  return (
    <div
      className="employee-infographic"
      data-status={emp.Employee_Status || 'Deactive'}
    >
      {/* Photo with colored border via data-status */}
      <div className="infographic-image">
        <img
          src={`http://localhost:5001${emp.imageUrl}`}
          alt={emp.EmpName}
          onError={e => {
            e.target.onerror = null;
            e.target.src = '/images/no-photo.jpg';
          }}
        />
      </div>

      {/* Details */}
      <div className="infographic-details">
        <h2>{emp.EmpName}</h2>

        <div className="info-block">
          <span className="info-label employee-id">Employee ID</span>
          <span className="info-value">{emp.EmployeeID || '—'}</span>
        </div>

        <div className="info-block">
          <span className="info-label personnel-type">Personnel Type</span>
          <span className="info-value">{emp.PersonnelType}</span>
        </div>

        <div className="info-block">
          <span className="info-label manager">Manager</span>
          <span className="info-value">{emp.Manager_Name || '—'}</span>
        </div>

        <div className="info-block">
          <span className="info-label manager-wu-id"> Manager WU ID</span>
          <span className="info-value">{emp.Manager_WU_ID || '—'}</span>
        </div>

        <div className="info-block">
          <span className="info-label employee-status">Status</span>
          <span className="info-value">{emp.Employee_Status}</span>
        </div>

        {/* <div className="info-block">
          <span className="info-label profile-disabled">Disabled</span>
          <span className="info-value">{emp.Profile_Disabled}</span>
        </div> */}

        <div className="info-block">
          <span className="info-label total-cards">Total Cards</span>
          <span className="info-value">{emp.Total_Cards}</span>
        </div>

        <div className="info-block">
          <span className="info-label active-cards">Active Cards</span>
          <span className="info-value">{emp.Active_Cards}</span>
        </div>
      </div>
    </div>
  );
}

C:\Users\W0024618\Desktop\employee-verification\frontend\src\components\SearchBar.jsx
import React from 'react';

export default function SearchBar({ value, onChange, onSearch }) {
  return (
    <form onSubmit={e => { e.preventDefault(); onSearch(); }}>
      <input
        type="text"
        placeholder="Search by Name or EmpID"
        value={value}
        onChange={e => onChange(e.target.value)}
      />
      <button type="submit">Search</button>
    </form>
  );
}

frontend\src\App.js
// src/App.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import SearchBar from './components/SearchBar';
import EmployeeCard from './components/EmployeeCard';
import './App.css';

function App() {
  const [searchTerm, setSearchTerm]     = useState('');
  const [allEmployees, setAllEmployees] = useState([]);
  const [selected, setSelected]         = useState(null);
  const [loading, setLoading]           = useState(false);
  const [error, setError]               = useState('');
  const [suggestions, setSuggestions]   = useState([]);
  const [history, setHistory]           = useState([]);

  // Load all employees once
  useEffect(() => {
    setLoading(true);
    axios.get('http://localhost:5001/api/employees')
      .then(res => setAllEmployees(res.data))
      .catch(() => setError('Failed to load employees'))
      .finally(() => setLoading(false));
  }, []);

  // Live suggestions as you type
  useEffect(() => {
    const term = searchTerm.trim().toLowerCase();
    if (!term) {
      setSuggestions([]);
      return;
    }
    const matches = allEmployees.filter(emp =>
      (emp.EmployeeID  || '').toLowerCase().includes(term) ||
      (emp.EmpName     || '').toLowerCase().includes(term)
    );
    setSuggestions(matches.slice(0, 10));
  }, [searchTerm, allEmployees]);

  // When user submits exact search
  const handleSearch = () => {
    setError('');
    const term = searchTerm.trim().toLowerCase();
    if (!term) return setError('Please enter name or ID');

    const found = allEmployees.find(emp =>
      (emp.EmployeeID  || '').toLowerCase() === term ||
      (emp.EmpName     || '').toLowerCase().includes(term)
    );

    if (!found) {
      setSelected(null);
      setError('No matching employee');
    } else {
      selectEmployee(found);
      setSuggestions([]); // clear suggestions
    }
  };

  // Common logic when selecting an employee from search or history
  const selectEmployee = emp => {
    setSelected(emp);
    setSearchTerm(emp.EmpName);
    setHistory(prev => {
      if (prev.find(e => e.id === emp.id)) return prev;
      return [emp, ...prev];
    });
  };

  // Click a suggestion
  const pickSuggestion = emp => {
    selectEmployee(emp);
  };

  // Click a history item
  const pickHistory = emp => {
    selectEmployee(emp);
  };

  return (
    <div>
      <header className="header">
        <h1>Associate Verification Tool — Western Union</h1>
         <p>Welcome to Pune Technology Engineering Center • Mon–Fri, 9:00–18:00</p>
      </header>

      <div className="main-container">
        <div className="left-panel">
          <div className="search-bar">
            <SearchBar
              value={searchTerm}
              onChange={setSearchTerm}
              onSearch={handleSearch}
            />
          </div>
          {loading && <p>Loading…</p>}
          {error   && <p className="error">{error}</p>}
          {selected && <EmployeeCard emp={selected} />}
        </div>

   
     <div className="right-panel">
          <div className="lists-container">
            <div className="history-list">
              <h3>Related Results</h3>
              <ul>
                {suggestions.map(emp => (
                  <li key={emp.id} onClick={() => pickSuggestion(emp)}>
                    {emp.EmpName}{emp.EmployeeID && ` (${emp.EmployeeID})`}
                  </li>
                ))}
              </ul>
            </div>

            <div className="history-list">
              <h3>Search History</h3>
              <ul>
                {history.map(emp => (
                  <li key={emp.id} onClick={() => pickHistory(emp)}>
                    {emp.EmpName}{emp.EmployeeID && ` (${emp.EmployeeID})`}
                  </li>
                ))}
              </ul>
            </div>
          </div>
          </div>
</div>


       <footer
        style={{
          backgroundColor: '#000',
          color: '#FFC72C',
          padding: '1.5rem 0',
          textAlign: 'center',
          marginTop: '0rem',
          borderTop: '2px solid #FFC72C',
          fontSize: '0.95rem',
          lineHeight: '1.6'
        }}
      >
        <div>
          <strong>Global Security Operations Center</strong>
          <br />
          Associate Verification Tool — Western Union
        </div>
        <div style={{ marginTop: '0.75rem' }}>
          Contact us:&nbsp;
          <a
            href="mailto:GSOC-GlobalSecurityOperationCenter.SharedMailbox@westernunion.com"
            style={{ color: '#FFC72C', textDecoration: 'underline' }}
          >
            GSOC Mail
          </a>
          &nbsp;|&nbsp;
          Landline:&nbsp;
          <span style={{ color: '#FFC72C' }}>+91-020-67632394</span>
        </div>
      </footer>

       </div>

  );
}
export default App;


backend code
C:\Users\W0024618\Desktop\employee-verification\controllers\employeeController.js
// controllers/employeeController.js
const { getPool } = require('../config/db');

const getEmployees = async (req, res) => {
  console.log('🎯 [GET] /api/employees called');
  try {
    const pool = await getPool();
    console.log('✅ DB pool acquired');
    const result = await pool.request().query(`
      SELECT DISTINCT
        AP.ObjectID           AS EmployeeObjID,     
        AP.Name               AS "Emp Name",
        CASE AP.Int1
          WHEN 0 THEN AP.Text12
          ELSE CAST(AP.Int1 AS NVARCHAR)
        END                    AS "EmployeeID",
        PT.Name               AS "PersonnelType",
        AP.Text10             AS "Manager Name",
        AP.Int4               AS Manager_WU_ID,
        AI.Image              AS Image,
        AP.Disabled           AS Profile_Disabled,
        COUNT(ACR.Name)       AS Total_Cards,
        SUM(
          CASE
            WHEN (ACR.ExpirationDateTime IS NULL OR ACR.ExpirationDateTime >= GETDATE())
              AND (ACR.Disabled IS NULL OR ACR.Disabled = 0)
              AND (ACR.Lost IS NULL OR ACR.Lost = 0)
              AND (ACR.Stolen IS NULL OR ACR.Stolen = 0)
            THEN 1 ELSE 0
          END
        )                      AS Active_Cards,
        SUM(
          CASE
            WHEN ACR.ExpirationDateTime IS NOT NULL AND ACR.ExpirationDateTime < GETDATE()
            THEN 1 ELSE 0
          END
        )                      AS Expired_Cards,
        CASE
          WHEN AP.Disabled = 1 THEN 'Deactive'
          WHEN AP.Disabled = 0 THEN
            CASE
              WHEN SUM(
                CASE
                  WHEN (ACR.ExpirationDateTime IS NULL OR ACR.ExpirationDateTime >= GETDATE())
                    AND (ACR.Disabled IS NULL OR ACR.Disabled = 0)
                    AND (ACR.Lost IS NULL OR ACR.Lost = 0)
                    AND (ACR.Stolen IS NULL OR ACR.Stolen = 0)
                  THEN 1 ELSE 0
                END
              ) > 0 THEN 'Active'
              ELSE 'Deactive'
            END
          ELSE 'Deactive'
        END                    AS "Employee_Status"
      FROM ACVSCore.Access.Personnel AP
      INNER JOIN ACVSCore.Access.Credential    ACR ON AP.Name = ACR.Name
      INNER JOIN ACVSCore.Access.PersonnelType PT  ON PT.ObjectID = AP.PersonnelTypeID
      INNER JOIN ACVSCore.Access.Images        AI  ON AI.ParentId = AP.ObjectID
      GROUP BY
        AP.ObjectID,
        AP.Name,
        AP.Int1,
        AP.Text12,
        PT.Name,
        AP.Text10,
        AP.Int4,
        AI.Image,
        AP.Disabled
      ORDER BY AP.Name
    `);
    console.log('✅ Query executed, rows:', result.recordset.length);

    const employees = result.recordset.map(emp => ({
      id:               emp.EmployeeObjID,
      EmpName:          emp["Emp Name"],
      EmployeeID:       emp.EmployeeID,
      PersonnelType:    emp.PersonnelType,
      Manager_Name:     emp["Manager Name"],
      Manager_WU_ID:    emp.Manager_WU_ID,
      Profile_Disabled: emp.Profile_Disabled,
      Total_Cards:      emp.Total_Cards,
      Active_Cards:     emp.Active_Cards,
      Employee_Status:  emp.Employee_Status,
      imageUrl:         `/api/employees/${emp.EmployeeObjID}/image`
    }));

    return res.json(employees);
  } catch (err) {
    console.error('❌ Error in getEmployees:', err.stack || err);
    return res.status(500).json({
      error: 'Internal Server Error',
      message: err.message
    });
  }
};

module.exports = { getEmployees };

C:\Users\W0024618\Desktop\employee-verification\controllers\employeeImageController.js
// controllers/employeeImageController.js
const sql       = require('mssql');
const { getPool } = require('../config/db');

async function getEmployeeImage(req, res) {
  console.log(`🎯 [GET] /api/employees/${req.params.id}/image called`);
  try {
    const pool = await getPool();
    console.log('✅ DB pool acquired for image');
    const result = await pool.request()
      .input('id', sql.BigInt, req.params.id)
      .query(`
        SELECT AI.Image AS ImageBuffer
        FROM ACVSCore.Access.Images AI
        WHERE AI.ParentId = @id
      `);
    console.log('✅ Image query rows:', result.recordset.length);

    if (!result.recordset.length || !result.recordset[0].ImageBuffer) {
      console.warn('⚠️ No image found for ID', req.params.id);
      return res.status(404).send('Image not found');
    }

    const buf = result.recordset[0].ImageBuffer;
    const header = buf.toString('hex', 0, 4).toLowerCase();
    let contentType = 'application/octet-stream';
    if (header.startsWith('ffd8')) contentType = 'image/jpeg';
    else if (header.startsWith('89504e47')) contentType = 'image/png';
    else if (header.startsWith('47494638')) contentType = 'image/gif';

    console.log('✅ Serving image, type:', contentType, 'size:', buf.length);
    res.setHeader('Content-Type', contentType);
    return res.send(buf);

  } catch (err) {
    console.error('❌ Error in getEmployeeImage:', err.stack || err);
    return res.status(500).send('Internal Server Error');
  }
}

module.exports = { getEmployeeImage };





