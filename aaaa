import React, { useState, useEffect } from 'react';
import { Card, CardContent, Typography, Box } from '@mui/material';
import { PieChart, Pie, Cell, Tooltip, Legend, ResponsiveContainer } from 'recharts';

const BASE = 'http://your-api-base-url.com'; // 🔁 replace this with your actual base URL

export default function PieChartCard({
  title,
  colors = ['#FFC107', '#E0E0E0'],
  height = 300,
  showZeroSlice = false,
  animationDuration = 1500,
  noDataMessage = 'No realtime data',
}) {
  const [liveData, setLiveData] = useState([]);
  const [total, setTotal] = useState(0);

  const fetchLiveSummary = async () => {
    try {
      const res = await fetch(`${BASE}/api/occupancy/live-summary`);
      if (!res.ok) throw new Error(`Live summary fetch failed: ${res.status}`);
      const json = await res.json();

      const occupied = json.occupied || 0;
      const available = json.available || 0;

      const formatted = [
        { name: 'Occupied', value: occupied },
        { name: 'Available', value: available }
      ];

      setLiveData(formatted);
      setTotal(occupied + available);
    } catch (err) {
      console.error('Live summary fetch error:', err);
    }
  };

  useEffect(() => {
    fetchLiveSummary(); // First fetch
    const interval = setInterval(fetchLiveSummary, 10000); // Every 10 seconds
    return () => clearInterval(interval); // Cleanup on unmount
  }, []);

  if (total === 0 && !showZeroSlice) {
    return (
      <Card sx={cardStyle(colors[0])}>
        <CardContent>
          <Typography variant="subtitle1" align="center" color="text.primary">
            {title}
          </Typography>
          <Typography variant="body2" align="center" sx={{ mt: 2, color: 'text.secondary' }}>
            {noDataMessage}
          </Typography>
        </CardContent>
      </Card>
    );
  }

  const renderData = (total === 0 && showZeroSlice)
    ? [{ name: 'Available', value: liveData[1]?.value || 0 }]
    : liveData;

  return (
    <Card sx={cardStyle(colors[0])}>
      <CardContent sx={{ p: 1 }}>
        <Typography variant="subtitle1" align="center" color="text.primary">
          {title}
        </Typography>

        <Box sx={{ position: 'relative', width: '100%', height }}>
          <ResponsiveContainer>
            <PieChart>
              <Pie
                data={renderData}
                dataKey="value"
                nameKey="name"
                innerRadius={70}
                outerRadius={120}
                paddingAngle={4}
                isAnimationActive
                animationDuration={animationDuration}
                labelLine={false}
                label={({ percent }) => `${(percent * 100).toFixed(0)}%`}
              >
                {renderData.map((_, i) => (
                  <Cell key={i} fill={colors[i % colors.length]} />
                ))}
              </Pie>
              <Tooltip content={<CustomTooltip />} />
              <Legend
                verticalAlign="bottom"
                wrapperStyle={{ color: 'rgba(255,255,255,0.8)' }}
                formatter={(value, entry) => `${value}: ${entry.payload.value}`}
              />
            </PieChart>
          </ResponsiveContainer>

          <Box
            component="div"
            sx={{
              position: 'absolute',
              top: '50%',
              left: '50%',
              transform: 'translate(-50%, -50%)',
              pointerEvents: 'none'
            }}
          >
            <Typography variant="h4" align="center" sx={{ color: colors[0], fontWeight: 'bold' }}>
              {total}
            </Typography>
            <Typography variant="caption" align="center" sx={{ color: 'rgba(255,255,255,0.7)' }} />
          </Box>
        </Box>
      </CardContent>
    </Card>
  );
}

const CustomTooltip = ({ active, payload }) => {
  if (active && payload && payload.length > 0) {
    const data = payload[0].payload;
    return (
      <Box
        sx={{
          bgcolor: '#FFEE8C',
          p: 3,
          border: '1px solid #FFC107',
          borderRadius: 1,
          color: '#FFC107'
        }}
      >
        <Typography variant="body2" sx={{ color: '#000' }}>
          <strong>{data.name}</strong>
        </Typography>
        <Typography variant="body2" sx={{ color: '#000' }}>
          Total: {data.value}
        </Typography>

        {data.Employee !== undefined && (
          <Typography variant="body2" sx={{ color: '#000' }}>
            Employees: {data.Employee}
          </Typography>
        )}
        {data.Contractor !== undefined && (
          <Typography variant="body2" sx={{ color: '#000' }}>
            Contractors: {data.Contractor}
          </Typography>
        )}
      </Box>
    );
  }

  return null;
};

const cardStyle = borderColor => ({
  borderRadius: 2,
  bgcolor: 'rgba(0,0,0,0.4)',
  transition: 'transform 0.3s, box-shadow 0.3s',
  '&:hover': {
    transform: 'scale(1.02)',
    boxShadow: '0 4px 12px rgba(0,0,0,0.7)'
  }
});