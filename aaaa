.filter(([key]) =>
  !decodedPartition ? true : key.includes(decodedPartition)
)







.filter(([key]) => {
  if (!decodedPartition) return true;
  const feKey = Object.keys(apacForwardKey).find(k => k.endsWith(decodedPartition));
  return feKey && key === apacForwardKey[feKey];
})






const partitionRows = useMemo(() => {
  if (!summaryEntry) return [];

  return Object.entries(summaryEntry.partitions)
    .filter(([key]) =>
      !decodedPartition ? true : key.includes(decodedPartition)
    )
    .map(([key, vals]) => {
      const feCode = apacReverseKey[key];
      const display = feCode && apacPartitionDisplay[feCode];

      return {
        country: display ? display.country : key,
        city:    display ? display.city    : key,
        employee:   vals.Employee   ?? 0,
        contractor: vals.Contractor ?? 0,
        total:      vals.total      ?? 0,
      };
    });
}, [summaryEntry, decodedPartition]);
