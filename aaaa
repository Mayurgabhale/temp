//C:\Users\W0024618\Desktop\emea-occupancy-frontend\src\pages\Dashboard.jsx


// src/pages/Dashboard.jsx

import React, { useEffect, useState } from 'react';
import { Container, Box, Typography, Skeleton } from '@mui/material';
import GroupIcon from '@mui/icons-material/Group';
import TrackChangesIcon from '@mui/icons-material/TrackChanges';
import PeopleIcon from '@mui/icons-material/People';
import BusinessCenterIcon from '@mui/icons-material/BusinessCenter';

import Header from '../components/Header';
import Footer from '../components/Footer';
import SummaryCard from '../components/SummaryCard';
import CompositeChartCard from '../components/CompositeChartCard';
import PieChartCard from '../components/PieChartCard';
import LoadingSpinner from '../components/LoadingSpinner';
import { useLiveOccupancy } from '../hooks/useLiveOccupancy';

import doorMapRaw from '../utils/doorMap';

// Flags
import austriaFlag from '../assets/flags/austria.png';
import uaeFlag from '../assets/flags/uae.png';
import irelandFlag from '../assets/flags/ireland.png';
import italyFlag from '../assets/flags/italy.png';
import lithuaniaFlag from '../assets/flags/lithuania.png';
import moroccoFlag from '../assets/flags/morocco.png';
import russiaFlag from '../assets/flags/russia.png';
import ukFlag from '../assets/flags/uk.png';
import spainFlag from '../assets/flags/spain.png';

const partitions = [
  'AUT.Vienna', 'DU.Abu Dhab', 'IE.Dublin', 'IT.Rome',
  'LT.Vilnius', 'MA.Casablanca', 'RU.Moscow', 'UK.London', 'ES.Madrid'
];
const displayName = {
  'AUT.Vienna': 'Vienna',
  'DU.Abu Dhab': 'Abu Dhabi',
  'IE.Dublin': 'Dublin',
  'IT.Rome': 'Rome',
  'LT.Vilnius': 'Vilnius',
  'MA.Casablanca': 'Casablanca',
  'RU.Moscow': 'Moscow',
  'UK.London': 'London',
  'ES.Madrid': 'Madrid'
};
const flagMap = {
  'AUT.Vienna': austriaFlag,
  'DU.Abu Dhab': uaeFlag,
  'IE.Dublin': irelandFlag,
  'IT.Rome': italyFlag,
  'LT.Vilnius': lithuaniaFlag,
  'MA.Casablanca': moroccoFlag,
  'RU.Moscow': russiaFlag,
  'UK.London': ukFlag,
  'ES.Madrid': spainFlag
};
const colorsMap = {
  'AUT.Vienna': ['#FFD666', '#fcf3cf', '#2ecc71', '#ec7063'],
  'DU.Abu Dhab': ['#FFE599', '#fcf3cf', '#2ecc71', '#ec7063'],
  'IE.Dublin': ['#FFF2CC', '#fcf3cf', '#2ecc71', '#ec7063'],
  'IT.Rome': ['#FFD666', '#fcf3cf', '#2ecc71', '#ec7063'],
  'LT.Vilnius': ['#FFE599', '#fcf3cf', '#2ecc71', '#ec7063'],
  'MA.Casablanca': ['#FFF2CC', '#fcf3cf', '#2ecc71', '#ec7063'],
  'RU.Moscow': ['#FFD666', '#fcf3cf', '#2ecc71', '#ec7063'],
  'UK.London': ['#FFE599', '#fcf3cf', '#2ecc71', '#ec7063'],
  'ES.Madrid': ['#FFC0CB', '#fcf3cf', '#2ecc71', '#ec7063']
};

// Vilnius door → building
const vilniusMap = doorMapRaw.reduce((acc, { partition, door }) => {
  if (partition === 'LT.Vilnius') {
    acc[door] = door.toUpperCase().includes('GAMA') ? 'GAMA' : 'Delta';
  }
  return acc;
}, {});




export default function Dashboard() {
  const { data, loading, error } = useLiveOccupancy(1000);
  const [lastUpdate, setLastUpdate] = useState('');

  useEffect(() => {
    if (data) setLastUpdate(new Date().toLocaleTimeString());
  }, [data]);

  if (error) {
    return <Box py={4}><Typography color="error" align="center">Error loading live data</Typography></Box>;
  }

  // Vilnius breakdown
  // const counts = { GAMA: 0, Delta: 0 };
  // (data?.details || []).forEach(r => {
  //   if (r.PartitionName2 === 'LT.Vilnius' && r.Direction === 'InDirection') {
  //     const b = vilniusMap[r.Door];
  //     if (b) counts[b]++;
  //   }
  // });
  // const vilniusFloors = Object.entries(counts).map(([name, headcount]) => ({ name, headcount, capacity: 0 }));

  // Vilnius floor-wise breakdown from realtime data
  const vilniusRealtimeFloors = data?.realtime?.['LT.Vilnius']?.floors || {};

  const floorCapacities = {
    // '1st Floor': 90,
    '2nd Floor': 74,
    '3rd Floor': 97,
    '4th Floor': 97,
    '5th Floor': 97,
    '6th Floor': 143,
    '7th Floor': 141,
    '8th Floor': 147,
    '9th Floor': 153,
    '10th Floor': 135,

    // Add/adjust these based on real capacity per floor
  };

  const vilniusFloors = Object.entries(vilniusRealtimeFloors).map(([floor, headcount]) => ({
    name: floor,
    headcount,
    capacity: floorCapacities[floor] || 0
  }));

  // Vilnius door → building
  const vilniusMap = doorMapRaw.reduce((acc, { partition, door }) => {
    if (partition === 'LT.Vilnius') {
      acc[door] = door.toUpperCase().includes('GAMA') ? 'GAMA' : 'Delta';
    }
    return acc;
  }, {});

  // CHART 1: Dublin, Rome, Moscow with breakdown (Total, Employee, Contractor per city)
const pieData1 = summaryItems
  .filter(item => ['Dublin', 'Rome', 'Moscow'].includes(item.label))
  .flatMap(item => ([
    { name: `${item.label} - Total`, value: item.total },
    { name: `${item.label} - Employees`, value: item.emp },
    { name: `${item.label} - Contractors`, value: item.cont },
  ]));

// CHART 2: Other cities - total only
const pieData2 = summaryItems
  .filter(item => ['Abu Dhabi', 'Vienna', 'Casablanca', 'London', 'Madrid'].includes(item.label))
  .map(item => ({
    name: item.label,
    value: item.total
  }));

  // Summary cards
  const todayTot = data?.today.total || 0;
  const todayEmp = data?.today.Employee || 0;
  const todayCon = data?.today.Contractor || 0;
  const realtimeTot = Object.values(data?.realtime || {}).reduce((s, x) => s + (x.total || 0), 0);
  const realtimeEmp = Object.values(data?.realtime || {}).reduce((s, x) => s + (x.Employee || 0), 0);
  const realtimeCon = Object.values(data?.realtime || {}).reduce((s, x) => s + (x.Contractor || 0), 0);





  // Build per-site items
  const summaryItems = [];
  summaryItems.push({
    label: 'Vilnius',
    total: data?.realtime['LT.Vilnius']?.total || 0,
    emp: data?.realtime['LT.Vilnius']?.Employee || 0,
    cont: data?.realtime['LT.Vilnius']?.Contractor || 0,
    flag: flagMap['LT.Vilnius'], colors: colorsMap['LT.Vilnius']
  });
  partitions.filter(k => k !== 'LT.Vilnius').forEach(k => {
    const x = data?.realtime[k] || {};
    summaryItems.push({ label: displayName[k], total: x.total || 0, emp: x.Employee || 0, cont: x.Contractor || 0, flag: flagMap[k], colors: colorsMap[k] });
  });


 const cityGroup = ['Dublin', 'Rome', 'Moscow'];
const combinedData = summaryItems
  .filter(item => cityGroup.includes(item.label))
  .reduce(
    (acc, item) => {
      acc.total += item.total || 0;
      acc.emp += item.emp || 0;
      acc.cont += item.cont || 0;
      return acc;
    },
    { total: 0, emp: 0, cont: 0 }
  );


  return (
    <>
      <Header />
      <Container maxWidth={false} disableGutters sx={{ px: 2, py: 1, background: 'linear-gradient(135deg, #0f0f0f 0%, #1c1c1c 100%)', }}>


        <Box display="flex" flexWrap="wrap" gap={1} mb={2}>
          {[
            {
              title: "Today's Total Headcount",
              value: todayTot,
              icon: <i className="fa-solid fa-users" style={{ color: '#E57373', fontSize: 25 }} />,
              border: '#FFD666'
            },
            {
              title: "Today's Employees Count",
              value: todayEmp,
              icon: <i className="bi bi-people" style={{ color: '#81C784', fontSize: 25 }} />,
              border: '#81C784'
            },
            {
              title: "Today's Contractors Count",
              value: todayCon,
              icon: <i className="fa-solid fa-circle-user" style={{ color: '#81C784', fontSize: 25 }} />,
              border: '#FFE599'
            },
            {
              title: "Realtime Headcount",
              value: realtimeTot,
              icon: <i className="fa-solid fa-users" style={{ color: '#BA68C8', fontSize: 25 }} />,
              border: '#FFF2CC'
            },
            {
              title: "Realtime Employees Count",
              value: realtimeEmp,
              icon: <i className="bi bi-people" style={{ color: '#81C784', fontSize: 25 }} />,
              border: '#FFD666'
            },
            {
              title: "Realtime Contractors Count",
              value: realtimeCon,
              icon: <i className="fa-solid fa-circle-user" style={{ color: '#BA68C8', fontSize: 25 }} />,
              border: '#FFE599'
            }
          ].map(c => (
            <Box key={c.title} sx={{ flex: '1 1 calc(16.66% - 8px)' }}>
              <SummaryCard
                title={c.title}
                total={c.value}
                stats={[]}
                icon={c.icon}
                sx={{ height: 140, border: `2px solid ${c.border}` }}
              />
            </Box>
          ))}
        </Box>




        <Box display="flex" flexWrap="wrap" gap={1} mb={3}>
          {loading ? <LoadingSpinner />
            : summaryItems
              .filter(item => !['Dublin', 'Rome', 'Moscow'].includes(item.label)) // ⛔️ Remove unwanted cards
              .map(item => {
                const [tc, totc, ec, cc] = item.colors;
                // Pie data for Dublin, Rome, and Moscow only
                const pieCities = ['Dublin', 'Rome', 'Moscow'];

                const pieData = summaryItems
                  ?.filter(item => pieCities.includes(item.label))
                  .map(item => ({
                    name: item.label,
                    value: item.total
                  }));

               
                return (
                  <Box key={item.label} sx={{ flex: '1 1 calc(10.66% - 1px)' }}>
                    <SummaryCard
                      title={item.label}
                      total={item.total}
                      stats={[
                        { label: 'Employees', value: item.emp },
                        { label: 'Contractors', value: item.cont }
                      ]}
                      icon={
                        item.flag && (
                          <Box
                            component="img"
                            src={item.flag}
                            alt={item.label}
                            sx={{ width: 45, height: 25, border: '1px solid #fff' }}
                          />
                        )
                      }
                      titleColor={tc}
                      totalColor={totc}
                      statColors={[ec, cc]}
                      sx={{
                        height: 170,
                        border: `2px solid ${tc}`,
                        '& .MuiTypography-subtitle1': { fontSize: '1.1rem' },
                        '& .MuiTypography-h4': { fontSize: '1.5rem' },
                        '& .MuiTypography-caption': { fontSize: '0.875rem' }
                      }}
                    />
                  </Box>
                );
              })
          }
        </Box>
     

     



        {/* Live charts row */}
        <Box display="flex" gap={2} mb={4} flexWrap="wrap">

          {/* 1) Vilnius composite */}
          <Box flex="1 1 0" sx={{ border: '2px solid #FFC107', borderRadius: 2, p: 2, background: 'rgba(0,0,0,0.6)' }}>

            {loading ? (
              <Skeleton variant="rectangular" height={350} />
            ) : (
              <CompositeChartCard
                title="Vilnius "
                data={vilniusFloors}
                barColor="#4CAF50"
                lineColor="#FF0000"
                height={410}
                animationDuration={1500}
                animationEasing="ease-in-out"
              />
            )}
          </Box>






          {/* 2) Top regions donut */}
          {/* CHART 1: Dublin, Rome, Moscow Breakdown */}
<Box flex="1 1 0" sx={{ border: '2px solid #FFC107', borderRadius: 2, p: 2, background: 'rgba(0,0,0,0.6)' }}>
  {loading ? (
    <Skeleton variant="rectangular" height={350} />
  ) : (
    <PieChartCard
      title="Dublin • Rome • Moscow (Total, Employees, Contractors)"
      data={pieData1}
      colors={['#FFB74D', '#4DB6AC', '#9575CD', '#FFB74D', '#4DB6AC', '#9575CD', '#FFB74D', '#4DB6AC', '#9575CD']}
      innerRadius={60}
      height={410}
      showZeroSlice
      animationDuration={1500}
    />
  )}
</Box>

          {/* 3) Other regions donut */}
        {/* CHART 2: Other Cities Total */}
<Box flex="1 1 0" sx={{ border: '2px solid #FFC107', borderRadius: 2, p: 2, background: 'rgba(0,0,0,0.6)' }}>
  {loading ? (
    <Skeleton variant="rectangular" height={350} />
  ) : (
    <PieChartCard
      title="Abu Dhabi • Vienna • Casablanca • London • Madrid"
      data={pieData2}
      colors={['#4E79A7', '#F28E2B', '#E15759', '#76B7B2', '#59A14F']}
      innerRadius={60}
      height={410}
      showZeroSlice
      animationDuration={1500}
    />
  )}
</Box>

          

        </Box>
      </Container>

      {/* <Footer /> */}

      <footer
        style={{
          backgroundColor: '#000',
          color: '#FFC72C',
          padding: '1.5rem 0',
          textAlign: 'center',
          // marginTop: '1rem',
          borderTop: '2px solid #FFC72C',
          fontSize: '0.95rem',
          lineHeight: '1.6'
        }}
      >
        <div>
          <strong>Global Security Operations Center (GSOC)</strong>

          Live Occupancy dashboard for Western Union Denver — Real-time occupancy, floor activity, and personnel insights.
        </div>
        <div style={{ marginTop: '0.75rem' }}>
          Contact us: <a href="mailto:GSOC-GlobalSecurityOperationCenter.SharedMailbox@westernunion.com" style={{ color: '#FFC72C', textDecoration: 'underline' }}>gsoc@westernunion.com</a> |
          Landline: <span style={{ color: '#FFC72C' }}>+91-020-67632394</span>
        </div>
      </footer>

    </>
  );
}


// ..............

please slove this error 
Uncaught runtime errors:
×
ERROR
Cannot access 'summaryItems' before initialization
ReferenceError: Cannot access 'summaryItems' before initialization
    at Dashboard (http://localhost:3000/static/js/src_pages_Dashboard_jsx.chunk.js:1046:20)
    at react-stack-bottom-frame (http://localhost:3000/static/js/bundle.js:27734:18)
    at renderWithHooks (http://localhost:3000/static/js/bundle.js:17944:20)
    at updateFunctionComponent (http://localhost:3000/static/js/bundle.js:19637:17)
    at beginWork (http://localhost:3000/static/js/bundle.js:20205:637)
    at runWithFiberInDEV (http://localhost:3000/static/js/bundle.js:15715:68)
    at performUnitOfWork (http://localhost:3000/static/js/bundle.js:22296:93)
    at workLoopSync (http://localhost:3000/static/js/bundle.js:22189:38)
    at renderRootSync (http://localhost:3000/static/js/bundle.js:22173:7)
    at performWorkOnRoot (http://localhost:3000/static/js/bundle.js:21937:42)




// ...............
