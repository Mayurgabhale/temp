// occupancy.service.js

export const getCurrentOccupancy = async (partitionNames) => {
  try {
    if (!Array.isArray(partitionNames)) {
      console.error('getCurrentOccupancy: Expected partitionNames to be an array but received:', partitionNames);
      return []; // Return empty array if invalid input
    }

    const requests = partitionNames.map(partition =>
      fetch(`/api/occupancy?partition=${encodeURIComponent(partition)}`).then(res => {
        if (!res.ok) {
          throw new Error(`Failed to fetch data for partition: ${partition}`);
        }
        return res.json();
      })
    );

    const results = await Promise.all(requests);
    return results.flat(); // Assuming each result is an array
  } catch (error) {
    console.error('Error fetching occupancy data:', error);
    return [];
  }
};

.....
// useLiveOccupancy.js
import { useEffect, useState } from 'react';
import { getCurrentOccupancy } from './occupancy.service';

const useLiveOccupancy = (partitionNames) => {
  const [data, setData] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const occupancyData = await getCurrentOccupancy(partitionNames || []);
        setData(occupancyData);
      } catch (error) {
        console.error('Error fetching occupancy:', error);
      }
    };

    fetchData();

    const interval = setInterval(fetchData, 30000); // Refresh every 30 seconds
    return () => clearInterval(interval);
  }, [partitionNames]);

  return data;
};

export default useLiveOccupancy;