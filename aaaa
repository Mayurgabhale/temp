C:\Users\W0024618\Desktop\emea-occupancy-frontend\src\api\occupancy.service.js

export async function fetchLiveSummary() {
  // always fetch fresh data (no in-memory caching)
  const res = await fetch(`${BASE}/api/occupancy/live-summary`);
  if (!res.ok) throw new Error(`Live summary fetch failed: ${res.status}`);
  return res.json();
}


/**
 * Fetch history (global or per-partition), caching for session.
 * @param {string} [location] — partition identifier, e.g. 'LT.Vilnius'
 */
export async function fetchHistory(location) {
  const key = location || 'global';
  if (cache.history.has(key)) {
    return cache.history.get(key);
  }
  const url = location
    ? `${BASE}/api/occupancy/history/${encodeURIComponent(location)}`
    : `${BASE}/api/occupancy/history`;

  const res = await fetch(url);
  if (!res.ok) throw new Error(`History fetch failed: ${res.status}`);
  const json = await res.json();
  cache.history.set(key, json);
  return json;
}

/**
 * Clear all cached data (if you need to force a fresh fetch).
 */
export function clearCache() {
  cache.liveSummary = null;
  cache.history.clear();
}

// --- list of EMEA partitions for Dashboard
export const partitionList = [
  'AUT.Vienna',
  'DU.Abu Dhab',
  'IE.Dublin',
  'IT.Rome',
  'LT.Vilnius',
  'MA.Casablanca',
  'RU.Moscow',
  'UK.London',
  'ES.Madrid'
];

C:\Users\W0024618\Desktop\emea-occupancy-frontend\src\components\DataTable.jsx

import React from 'react';
import {
  Table, TableHead, TableBody, TableRow, TableCell,
  TableContainer, Paper
} from '@mui/material';

export default function DataTable({ columns, rows }) {
  return (
    <TableContainer component={Paper} sx={{ mb:2 }}>
      <Table size="small">
        <TableHead>
          <TableRow>
            {columns.map(c => (
              <TableCell key={c.field} sx={{ fontWeight:'bold', borderBottom:'2px solid #000' }}>
                {c.headerName}
              </TableCell>
            ))}
          </TableRow>
        </TableHead>
        <TableBody>
          {rows.map((r,i)=>(
            <TableRow key={i}>
              {columns.map(c=>(
                <TableCell key={c.field} sx={{ py:0.5, borderBottom:'1px solid #ccc' }}>
                  {r[c.field]}
                </TableCell>
              ))}
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </TableContainer>
  );
}
C:\Users\W0024618\Desktop\emea-occupancy-frontend\src\data\buildingCapacities.js
const seatCapacities = {
  Dubai: 53,
  Dublin: 78,
  Rome: 39,
  London: 41,
  Moscow: 108,
  Casablanca: 55,
  Madrid: 65,
};

export default seatCapacities;
C:\Users\W0024618\Desktop\emea-occupancy-frontend\src\hooks\useLiveOccupancy.js
// import { useState, useEffect, useRef } from 'react';
// import { fetchLiveSummary } from '../api/occupancy.service';

// export function useLiveOccupancy(interval = 1000) {
//   const [data, setData]         = useState(null);
//   const [loading, setLoading]   = useState(true);
//   const [error, setError]       = useState(null);
//   const timer = useRef(null);

//   useEffect(() => {
//     let active = true;
//     async function load() {
//       try {
//         const json = await fetchLiveSummary();
//         if (!active) return;
//         setData(json);
//         setLoading(false);
//       } catch (e) {
//         if (!active) return;
//         setError(e);
//         setLoading(false);
//       }
//     }
//     load();
//     timer.current = setInterval(load, interval);
//     return () => {
//       active = false;
//       clearInterval(timer.current);
//     };
//   }, [interval]);

//   return { data, loading, error };
// }











import { useState, useEffect, useRef } from 'react';
import { fetchLiveSummary } from '../api/occupancy.service';

export function useLiveOccupancy(interval = 1000) {
  const [data, setData]       = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError]     = useState(null);
  const timer = useRef(null);

  useEffect(() => {
    let active = true;

    async function load() {
      try {
        // fetchLiveSummary now returns cached data instantly if available
        const json = await fetchLiveSummary();
        if (!active) return;
        setData(json);
        setLoading(false);
      } catch (e) {
        if (!active) return;
        setError(e);
        setLoading(false);
      }
    }

    load();
    timer.current = setInterval(load, interval);

    return () => {
      active = false;
      clearInterval(timer.current);
    };
  }, [interval]);

  return { data, loading, error };
}
C:\Users\W0024618\Desktop\emea-occupancy-frontend\src\pages\History.jsx


import React, { useEffect, useState, useMemo } from 'react';
import { useParams } from 'react-router-dom';
import {
  Container, Box, Typography, Paper, Table, TableHead, TableBody,
  TableRow, TableCell, Button, TextField
} from '@mui/material';
import { DatePicker, LocalizationProvider } from '@mui/x-date-pickers';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { format } from 'date-fns';
import * as XLSX from 'xlsx';
import { saveAs } from 'file-saver';

import Header from '../components/Header';
import Footer from '../components/Footer';
import LoadingSpinner from '../components/LoadingSpinner';
import { fetchHistory } from '../api/occupancy.service';

const codeToCountry = {
  AUT: 'Austria', DU: 'UAE', IE: 'Ireland', IT: 'Italy',
  LT: 'Lithuania', MA: 'Morocco', RU: 'Russia', UK: 'UK', ES: 'Spain'
};

export default function History() {
  const { partition } = useParams();
  const decoded = partition ? decodeURIComponent(partition) : null;
  const filterCode = decoded?.split('.')[0] || null;

  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [date, setDate] = useState(null);
  const [showDetails, setShowDetails] = useState(false);

  useEffect(() => {
    fetchHistory(partition).then(json => {
      setData(json);
      setLoading(false);
    });
  }, [partition]);

  const summary = useMemo(() => {
    if (!data || !date) return null;
    const ds = format(date, 'yyyy-MM-dd');
    return data.summaryByDate.find(r => r.date === ds) || null;
  }, [data, date]);

  const rows = useMemo(() => {
    if (!summary) return [];
    return Object.entries(summary.partitions)
      .filter(([k]) => !filterCode || k.startsWith(filterCode + '.'))
      .map(([k, v]) => {
        const [code, site] = k.split('.');
        return {
          country: codeToCountry[code] || code,
          site,
          employee: v.Employee ?? v.EmployeeCount ?? 0,
          contractor: v.Contractor ?? v.ContractorCount ?? 0,
          total: v.total ?? 0
        };
      });
  }, [summary, filterCode]);

  const details = useMemo(() => {
    if (!data || !date || !showDetails) return [];
    const ds = format(date, 'yyyy-MM-dd');
    return data.details.filter(r => r.SwipeDate.startsWith(ds))
      .filter(r => !filterCode || r.PartitionName2.startsWith(filterCode + '.'));
  }, [data, date, filterCode, showDetails]);

  const exportExcel = () => {
    const ws = XLSX.utils.json_to_sheet(details.map((r, i) => ({
      Sr: i + 1, Date: r.SwipeDate.slice(0, 10),
      Time: r.LocaleMessageTime.slice(11, 19),
      EmployeeID: r.EmployeeID, Name: r.ObjectName1,
      Type: r.PersonnelType, Door: r.Door,
      Partition: r.PartitionName2
    })));
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Details');
    saveAs(new Blob([XLSX.write(wb, { bookType: 'xlsx', type: 'array' })]),
      `history_${format(date, 'yyyyMMdd')}.xlsx`);
  };

  if (loading) return <LoadingSpinner />;

  return (
    <>
      <Header />

    

      <Container maxWidth={false} disableGutters sx={{ pt: 2, pb: 4 }}>
        {/* Flex row: DatePicker + Summary Table */}
        <Box display="flex" alignItems="flex-start" sx={{ px: '20px', mb: 1, gap: '10px' }}>

          {/* Left: Date Picker */}
          <Box sx={{ flex: '0 0 200px' }}>
            <LocalizationProvider dateAdapter={AdapterDateFns}>
              <DatePicker
                label="Select date"
                value={date}
                onChange={d => { setDate(d); setShowDetails(false); }}
                renderInput={params => <TextField fullWidth {...params} />}
              />
            </LocalizationProvider>
          </Box>

          {/* Right: Summary table */}
          {date && summary && (
            <Box sx={{ flex: 1, maxWidth: 800, display: 'flex', flexDirection: 'column', gap: 2 }}>
              <Paper elevation={3} sx={{ px: 2, py: 1, border: '3px solid #000', borderRadius: 2 }}>
                <Table size='small' sx={{ border: '2px solid #000' }}>
                  <TableHead>
                    <TableRow>
                      <TableCell colSpan={5} align="center"
                        sx={{ fontWeight: 'bold', fontSize: 16, bgcolor: '#000', color: '#fff', border: '2px solid #000' }}>
                        {format(date, 'EEEE, d MMMM, yyyy')}
                      </TableCell>
                    </TableRow>
                    <TableRow sx={{ bgcolor: '#FFC107' }}>
                      {['Country', 'Site', 'Employees', 'Contractors', 'Total'].map(h => (
                        <TableCell key={h} align={['Country', 'Site'].includes(h) ? 'left' : 'right'}
                          sx={{ color: '#000', fontWeight: 'bold', fontSize: 14, border: '2px solid #000' }}>
                          {h}
                        </TableCell>
                      ))}
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {rows.map((r, i) => (
                      <TableRow key={i}>
                        <TableCell sx={{ border: '2px solid #000' }}>{r.country}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{r.site}</TableCell>
                        <TableCell align="right" sx={{ border: '2px solid #000' }}>{r.employee}</TableCell>
                        <TableCell align="right" sx={{ border: '2px solid #000' }}>{r.contractor}</TableCell>
                        <TableCell align="right" sx={{ backgroundColor: '#FFC107', fontWeight: 'bold', border: '2px solid #000' }}>{r.total}</TableCell>
                      </TableRow>
                    ))}
                    <TableRow sx={{ bgcolor: '#666' }}>
                      <TableCell colSpan={2} align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                        Total
                      </TableCell>
                      <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                        {rows.reduce((s, r) => s + r.employee, 0)}
                      </TableCell>
                      <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                        {rows.reduce((s, r) => s + r.contractor, 0)}
                      </TableCell>
                      <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', bgcolor: '#333', border: '2px solid #000' }}>
                        {rows.reduce((s, r) => s + r.total, 0)}
                      </TableCell>
                    </TableRow>
                  </TableBody>
                </Table>
              </Paper>

              {/* Buttons */}
              <Box display="flex" justifyContent="center" sx={{ mt: 1 }}>
                <Button
                  variant="contained"
                  sx={{ bgcolor: '#FFC107', color: '#000' }}
                  onClick={() => setShowDetails(v => !v)}
                >
                  {showDetails ? 'Hide Details' : 'See Details'}
                </Button>
                {showDetails && (
                  <Button
                    variant="outlined"
                    sx={{ ml: 2, borderColor: '#FFC107', color: '#FFC107' }}
                    onClick={exportExcel}
                  >
                    Export to Excel
                  </Button>
                )}
              </Box>
            </Box>
          )}
        </Box>

        {/* Details Table: Still below, only if toggled */}
        {showDetails && (
          <Box display="flex" justifyContent="center" mb={2} sx={{ width: '100%' }}>
            <Paper elevation={1} sx={{ px: '40px', py: 1, width: '100%', border: '3px solid #000', borderRadius: 2 }}>
              {details.length > 0 ? (
                <Table sx={{ border: '2px solid #000', borderCollapse: 'collapse' }}>
                  <TableHead>
                    <TableRow sx={{ bgcolor: '#000' }}>
                      {['Sr', 'Date', 'Time', 'Employee ID', 'Name', 'Personnel Type', 'Door', 'Partition'].map(h => (
                        <TableCell key={h} align="center"
                          sx={{ color: '#FFC107', fontWeight: 'bold', fontSize: 14, border: '2px solid #000' }}>
                          {h}
                        </TableCell>
                      ))}
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {details.map((r, i) => (
                      <TableRow key={`${r.PersonGUID}-${i}`}>
                        <TableCell sx={{ border: '2px solid #000' }}>{i + 1}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{r.SwipeDate.slice(0, 10)}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{r.LocaleMessageTime.slice(11, 19)}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{r.EmployeeID}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{r.ObjectName1}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{r.PersonnelType}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{r.Door}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{r.PartitionName2}</TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              ) : (
                <Typography variant="body2" sx={{ color: '#666', textAlign: 'center', mt: 2, fontStyle: 'italic' }}>
                  No swipe records found for this date.
                </Typography>
              )}
            </Paper>
          </Box>
        )}
      </Container>
      <Footer />
    </>
  );
}

C:\Users\W0024618\Desktop\emea-occupancy-frontend\src\pages\PartitionDetail.jsx


import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { Container, Box, Typography, Button } from '@mui/material';

import Header         from '../components/Header';
import Footer         from '../components/Footer';
import SummaryCard    from '../components/SummaryCard';
import ChartCard      from '../components/ChartCard';
import LoadingSpinner from '../components/LoadingSpinner';

import GroupIcon          from '@mui/icons-material/Group';
import TrackChangesIcon   from '@mui/icons-material/TrackChanges';
import PeopleIcon         from '@mui/icons-material/People';
import BusinessCenterIcon from '@mui/icons-material/BusinessCenter';

import { fetchLiveSummary, fetchHistory } from '../api/occupancy.service';
import buildingCapacities                from '../data/buildingCapacities';
import doorMapRaw                        from '../utils/doorMap';
import { lookupFloor }                   from '../utils/floorLookup';

export default function PartitionDetail() {
  const { partition } = useParams();
  const navigate      = useNavigate();

  const [live, setLive]         = useState(null);
  const [history, setHistory]   = useState(null);
  const [loadingHistory, setLoadingHistory] = useState(true);
  const [lastUpdate, setLastUpdate] = useState('');

  // Poll live
  useEffect(() => {
    let active = true;
    const load = async () => {
      const json = await fetchLiveSummary();
      if (!active) return;
      setLive(json);
      setLastUpdate(new Date().toLocaleTimeString());
    };
    load();
    const iv = setInterval(load, 1000);
    return () => { active = false; clearInterval(iv); };
  }, [partition]);

  // Load history once
  useEffect(() => {
    setLoadingHistory(true);
    fetchHistory(partition).then(json => {
      setHistory(json);
      setLoadingHistory(false);
    });
  }, [partition]);

  if (!live || !history) return <LoadingSpinner />;

  const today  = history.summaryByDate.at(-1).region;
  const realtime = live.realtime[partition] || { total:0, Employee:0, Contractor:0, floors:{} };

  // Build floor entries
  const floorEntries = Object.entries(realtime.floors).map(([floor, cnt]) => {
    const name     = floor.trim();
    const capacity = buildingCapacities[name] || 0;
    const pct      = capacity ? Math.round(cnt / capacity * 100) : 0;
    return {
      name,
      headcount: cnt,
      capacity,
      percentage: pct
    };
  });

  // Six cards
  const cards = [
  {
    title: "Today's Total Headcount",
    value: loadingHistory ? <LoadingSpinner size={25} /> : today.total,
    icon: <i className="fa-solid fa-users" style={{ color: '#E57373', fontSize: 25 }} />,
    border: '#FFB300'
  },
  {
    title: "Today's Employees Count",
    value: loadingHistory ? <LoadingSpinner size={25} /> : today.Employee,
    icon: <i className="bi bi-people" style={{ color: '#81C784', fontSize: 25 }} />,
    border: '#8BC34A'
  },
  {
    title: "Today's Contractors Count",
    value: loadingHistory ? <LoadingSpinner size={25} /> : today.Contractor,
    icon: <i className="fa-solid fa-circle-user" style={{ color: '#81C784', fontSize: 25 }} />,
    border: '#E57373'
  },
  {
    title: "Realtime Headcount",
    value: realtime.total,
    icon: <i className="fa-solid fa-users" style={{ color: '#BA68C8', fontSize: 25 }} />,
    border: '#FFD180'
  },
  {
    title: "Realtime Employees Count",
    value: realtime.Employee,
    icon: <i className="bi bi-people" style={{ color: '#81C784', fontSize: 25 }} />,
    border: '#AED581'
  },
  {
    title: "Realtime Contractors Count",
    value: realtime.Contractor,
    icon: <i className="fa-solid fa-circle-user" style={{ color: '#BA68C8', fontSize: 25 }} />,
    border: '#EF5350'
  }
];

  return (
    <>
      <Header />

      <Container maxWidth={false} disableGutters sx={{ px:2, py:2 }}>
        <Box mb={1}>
          <Button size="small" onClick={() => navigate(-1)}>← Back</Button>
        </Box>

        <Box display="flex" flexWrap="wrap" gap={1} mb={3}>
          {cards.map(c => (
            <Box key={c.title} sx={{ flex: '1 1 calc(16.66% - 8px)' }}>
              <SummaryCard
                title={c.title}
                total={c.value}
                stats={[]}
                icon={c.icon}
                sx={{ height: 140, border: `2px solid ${c.border}` }}
              />
            </Box>
          ))}
        </Box>

        <Box sx={{ border:'2px solid #FFC107', p:2, borderRadius:2, background:'rgba(0,0,0,0.6)' }}>
          <Box display="flex" justifyContent="space-between" mb={1}>
            <Typography variant="h6">Live Floor Headcount vs Capacity</Typography>
            <Typography variant="body2" color="textSecondary">Last updated: {lastUpdate}</Typography>
          </Box>

          <ChartCard
            data={floorEntries}
            dataKey="headcount"
            chartHeight={320}
            colors={{ head:'#28B463', cap:'#FDDA0D' }}
            axisProps={{
              xAxis: { tick:{ fill:'#fff' }, angle: -0, textAnchor:'end' },
              yAxis: { tick:{ fill:'#fff' } }
            }}
          />
        </Box>
      </Container>

      <Footer />
    </>
  );
}
C:\Users\W0024618\Desktop\emea-occupancy-frontend\src\pages\PartitionDetailDetails.jsx
import React, { useEffect, useState, useMemo } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import {
  Container, Box, Typography, Button, TextField,
  TableContainer, Paper, Table, TableHead, TableRow, TableCell, TableBody
} from '@mui/material';

import Header from '../components/Header';
import Footer from '../components/Footer';
import LoadingSpinner from '../components/LoadingSpinner';
import DataTable from '../components/DataTable';
import { fetchLiveSummary } from '../api/occupancy.service';
import { lookupFloor } from '../utils/floorLookup';

export default function PartitionDetailDetails() {
  const { partition } = useParams();
  const navigate = useNavigate();

  const [details, setDetails] = useState([]);
  const [loading, setLoading] = useState(true);
  const [lastUpdate, setLastUpdate] = useState('');
  const [search, setSearch] = useState('');
  const [expanded, setExpanded] = useState(null);

  // Load & refresh
  useEffect(() => {
    let active = true;
    const load = async () => {
      const json = await fetchLiveSummary();
      if (!active) return;
      const det = json.details
        .filter(r => r.PartitionName2 === partition && r.Direction === 'InDirection')
        .map(r => ({
          ...r,
          floor: lookupFloor(r.PartitionName2, r.Door, r.Direction)
        }));
      setDetails(det);
      setLastUpdate(new Date().toLocaleTimeString());
      setLoading(false);
    };
    load();
    const iv = setInterval(load, 1000);
    return () => { active = false; clearInterval(iv); };
  }, [partition]);

  const floorMap = useMemo(() => {
    return details.reduce((m, r) => {
      m[r.floor] = m[r.floor] || [];
      m[r.floor].push(r);
      return m;
    }, {});
  }, [details]);

 

  const displayed = useMemo(() => {
  const term = search.toLowerCase();
  return Object.entries(floorMap)
    .map(([floor, emps]) => {
      const filteredEmps = emps.filter(e =>
        floor.toLowerCase().includes(term) ||
        e.ObjectName1?.toLowerCase().includes(term) ||
        e.EmployeeID?.toString().toLowerCase().includes(term)
      );
      return [floor, filteredEmps];
    })
    .filter(([, filteredEmps]) => filteredEmps.length > 0);
}, [floorMap, search]);

  if (loading) {
    return <>
      <Header />
      <Box p={4}><LoadingSpinner /></Box>
      <Footer />
    </>;
  }

  return (
    <>
      <Header />
      <Container maxWidth={false} disableGutters sx={{ px: 2, py: 2 }}>

        <Box mb={1}><Button size="small" onClick={() => navigate(-1)}>← Back to Overview</Button></Box>

        <Box display="flex" alignItems="center" flexWrap="wrap" gap={0.5} mb={2}>
          {/* Title */}
          <Typography variant="h6">Floor Details</Typography>

          {/* Last updated text */}
          <Typography variant="body2" color="textSecondary" sx={{ ml: 1 }}>
            Last updated: {lastUpdate}
          </Typography>

          {/* Search field */}
          <TextField
            size="small"
            placeholder="Search floor / emp…"
            value={search}
            onChange={e => setSearch(e.target.value)}
            sx={{ ml: 1 }}
          />
        </Box>

        <Box display="flex" flexWrap="wrap">
  {[...displayed]
    .sort((a, b) => b[1].length - a[1].length) // Priority: most rows first
    .map(([floor, emps]) => {
      const isExpanded = expanded === floor;
      const visibleEmps = isExpanded ? emps : emps.slice(0, 10);

      return (
        <Box
          key={floor}
          sx={{
            width: { xs: '100%', sm: '50%' },
            p: 1,
            boxSizing: 'border-box',
          }}
        >
          <Typography
            variant="subtitle1"
            gutterBottom
            sx={{ fontWeight: 'bold' }}
          >
            {floor} (Total {emps.length})
          </Typography>

          {/* Smart height layout */}
          <Box
            sx={{
              border: '2px solid #FFC107',
              borderRadius: 1,
              p: 1,
              display: 'flex',
              flexDirection: 'column',
              minHeight: 120,
              maxHeight: isExpanded ? 600 : 'auto',
            }}
          >
            <TableContainer
              component={Paper}
              variant="outlined"
              sx={{
                overflowY: 'auto',
                flexGrow: 1,
              }}
            >
              <Table size="small" stickyHeader>
                <TableHead>
                  <TableRow>
                    {['ID', 'Name', 'Time', 'Type', 'Card', 'Door'].map((h, idx, arr) => (
                      <TableCell
                        key={h}
                        sx={{
                          fontWeight: 'bold',
                          py: 0.5,
                          whiteSpace: 'nowrap',
                          borderRight: idx !== arr.length - 1 ? '1px solid #ccc' : 'none',
                          borderBottom: '1px solid #ccc',
                        }}
                      >
                        {h}
                      </TableCell>
                    ))}
                  </TableRow>
                </TableHead>

                <TableBody>
                  {visibleEmps.map((r, i) => (
                    <TableRow key={i}>
                      {[
                        r.EmployeeID,
                        r.ObjectName1,
                        new Date(r.LocaleMessageTime).toLocaleTimeString(),
                        r.PersonnelType,
                        r.CardNumber,
                        r.Door,
                      ].map((val, idx, arr) => (
                        <TableCell
                          key={idx}
                          sx={{
                            py: 0.5,
                            minWidth: [50, 120, 100, 80, 100, 100][idx],
                            whiteSpace: 'nowrap',
                            borderRight: idx !== arr.length - 1 ? '1px solid #eee' : 'none',
                          }}
                        >
                          {val}
                        </TableCell>
                      ))}
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>

            {emps.length > 10 && (
              <Box textAlign="right" mt={1}>
                <Button
                  size="small"
                  onClick={() => setExpanded(isExpanded ? null : floor)}
                >
                  {isExpanded ? 'Hide' : 'See more…'}
                </Button>
              </Box>
            )}
          </Box>
        </Box>
      );
    })}
</Box>

        {expanded && (
          <Box mt={2}>
            <Typography variant="h6" gutterBottom>{expanded} — All Entries</Typography>
            <DataTable
              columns={[
                { field: 'EmployeeID', headerName: 'ID' },
                { field: 'ObjectName1', headerName: 'Name' },
                { field: 'LocaleMessageTime', headerName: 'Time' },
                { field: 'PersonnelType', headerName: 'Type' },
                { field: 'CardNumber', headerName: 'Card' },
                { field: 'Door', headerName: 'Door' }
              ]}
              rows={floorMap[expanded].map(r => ({
                ...r,
                LocaleMessageTime: new Date(r.LocaleMessageTime).toLocaleTimeString()
              }))}
            />
          </Box>
        )}
      </Container>
      <Footer />
    </>
  );
}
C:\Users\W0024618\Desktop\emea-occupancy-frontend\src\routes\AppRoutes.jsx


import React, { lazy, Suspense } from 'react';
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import LoadingSpinner from '../components/LoadingSpinner';

const Dashboard               = lazy(() => import('../pages/Dashboard'));
const History                 = lazy(() => import('../pages/History'));
const PartitionDetail         = lazy(() => import('../pages/PartitionDetail'));
const PartitionDetailDetails  = lazy(() => import('../pages/PartitionDetailDetails'));

export default function AppRoutes() {
  return (
    <BrowserRouter>
      <Suspense fallback={<LoadingSpinner />}>
        <Routes>
          {/* Home dashboard */}
          <Route path="/" element={<Dashboard />} />

          {/* Global history */}
          <Route path="/history" element={<History />} />

          {/* Partition-scoped history */}
          <Route path="/partition/:partition/history" element={<History />} />

          {/* Partition overview (live) */}
          <Route path="/partition/:partition" element={<PartitionDetail />} />

          {/* Partition “see details” sub-page */}
          <Route
            path="/partition/:partition/details"
            element={<PartitionDetailDetails />}
          />
        </Routes>
      </Suspense>
    </BrowserRouter>
  );
}
C:\Users\W0024618\Desktop\emea-occupancy-frontend\src\services\occupancy.service.js
export const partitionList = [
  'AUT.Vienna',
  'DU.Abu Dhab',
  'IE.Dublin',
  'IT.Rome',
  'LT.Vilnius',
  'MA.Casablanca',
  'RU.Moscow',
  'UK.London',
  'ES.Madrid'
];
C:\Users\W0024618\Desktop\emea-occupancy-frontend\src\utils\dateHelpers.js
// src/utils/dateHelpers.js

export function formatDate(dateStr) {
  const d = new Date(dateStr);
  return d.toLocaleDateString(undefined, { year:'numeric', month:'short', day:'numeric' });
}
C:\Users\W0024618\Desktop\emea-occupancy-frontend\src\utils\doorMap.js

{
    partition: 'AUT.Vienna',
    door: `EMEA_AUT_VIENNA_ICON_11FLR_WUPSIL to WUIB Door`,
    inDirectionFloor: '11th Floor',
    outDirectionFloor: '11th Floor',
  },
  {
    partition: 'AUT.Vienna',
    door: `EMEA_AUT_VIENNA_ICON_11FLR_WUPSIL to WUIB Kitchen Door`,
    inDirectionFloor: '11th Floor',
    outDirectionFloor: '11th Floor',
  },
  {
    partition: 'AUT.Vienna',
    door: `EMEA_AUT_VIENNA_ICON_11FLR_WUIB to WUIB Restricted Door`,
    inDirectionFloor: '11th Floor',
    outDirectionFloor: '11th Floor',
  },
  {
    partition: 'AUT.Vienna',
    door: `EMEA_AUT_VIENNA_ICON_11FLR_RECEPTION Door`,
    inDirectionFloor: '11th Floor',
    outDirectionFloor: 'Out of office',
  },
  {
  {
    partition: 'UK.London',
    door: `WU-UK-MH-NORTH LIFT LOBBY ENTRY`,
    inDirectionFloor: 'London',
    outDirectionFloor: 'Out of office',
  },
  {
    partition: 'UK.London',
    door: `WU-UK-MH-STAIRCORE MAIN ENTRY`,       this doorMap.js code i give you short becaeu this codw is very big 1280 line thats why ok
    inDirectionFloor: 'London',
    outDirectionFloor: 'Out of office',                     
  },
  {                                               
    partition: 'UK.London',
    door: `WU-UK-MH-SOUTH LIFT LOBBY ENTRY`,
    inDirectionFloor: 'London',
    outDirectionFloor: 'Out of office',
  },
  {
    partition: 'UK.London',
    door: `WU-UK-MH-FIRE EXIT DOOR`,
    inDirectionFloor: 'London',
    outDirectionFloor: 'Out of office',
  },

  ];

export default doorMap;
C:\Users\W0024618\Desktop\emea-occupancy-frontend\src\utils\floorLookup.js
// src/utils/floorLookup.js

import doorMap from './doorMap';

/**
 * Given a partition, door and direction, return the mapped floor string.
 * Falls back to 'Unmapped' only if there’s no matching entry.
 */
export function lookupFloor(partition, door, direction) {
  const entry = doorMap.find(
    d => d.partition === partition && d.door === door
  );
  if (!entry) return 'Unmapped';
  return direction === 'InDirection'
    ? entry.inDirectionFloor
    : entry.outDirectionFloor;
}

Read above emea code line by line and each file that i provide you .carefully and care same history page for apac 
some apac code i will give yo. 
