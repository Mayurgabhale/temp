import React from 'react';
import {
  Container, Box, Typography, Skeleton,
  Paper, Grid, useTheme
} from '@mui/material';

import Header from '../components/Header';
import Footer from '../components/Footer';

import SummaryCard from '../components/SummaryCard';
import CompositeChartCard from '../components/CompositeChartCard';
import PieChartCard from '../components/PieChartCard';

import { useLiveOccupancy } from '../hooks/useLiveOccupancy';
import { partitionList } from '../services/occupancy.service';
import buildingCapacities from '../data/buildingCapacities';

const palette15 = [
  '#FFC107', '#E91E63', '#4CAF50', '#FFEB3B', '#FFD666',
  '#D84315', '#3F51B5', '#9C27B0', '#00BCD4', '#8BC34A',
  '#FF9800', '#673AB7', '#009688', '#CDDC39', '#795548'
];

export default function Dashboard() {
  const { data, loading, error } = useLiveOccupancy(1000);
  const theme = useTheme();

  if (error) {
    return (
      <Box width="100vw" py={4}>
        <Typography color="error" align="center">
          Error loading live data
        </Typography>
      </Box>
    );
  }

  const regions = data?.realtime || {};
  const partitions = partitionList
    .map(name => {
      const key = Object.keys(regions).find(k => k.includes(name));
      const p = key ? regions[key] : {};
      return {
        name,
        total: p.total || 0,
        Employee: p.Employee || 0,
        Contractor: p.Contractor || 0,
        floors: p.floors || {}
      };
    })
    .sort((a, b) => b.total - a.total);

  const todayTot = data?.today?.total || 0;
  const todayEmp = data?.today?.Employee || 0;
  const todayCont = data?.today?.Contractor || 0;
  const realtimeTot = partitions.reduce((sum, p) => sum + p.total, 0);
  const realtimeEmp = partitions.reduce((sum, p) => sum + p.Employee, 0);
  const realtimeCont = partitions.reduce((sum, p) => sum + p.Contractor, 0);

  const pune = partitions.find(p => p.name === 'Pune');
  const quezonCity = partitions.find(p => p.name === 'Quezon City');
  const combinedRegions = partitions.filter(p =>
    ['JP.Tokyo', 'MY.Kuala Lumpur', 'Taguig City'].includes(p.name)
  );

  const floors = Object.entries(pune?.floors || {});

  const chartConfigs = [
    {
      key: 'pune',
      title: 'Pune Composite Chart',
      body: pune?.total === 0
        ? (
          <Typography color="white" align="center" py={6}>
            No Pune data
          </Typography>
        )
        : (
          <CompositeChartCard
            data={floors.map(([f, h]) => ({
              name: f,
              headcount: h,
              capacity: buildingCapacities[f] || 0
            }))}
            lineColor={palette15[0]}
            height={300}
            sx={{ border: 'none' }}
          />
        )
    },
    {
      key: 'quezon',
      title: 'Quezon City',
      body: quezonCity?.total === 0
        ? (
          <Typography color="white" align="center" py={6}>
            No Quezon City data
          </Typography>
        )
        : (
          <PieChartCard
            data={[
              { name: 'Employees', value: quezonCity.Employee },
              { name: 'Contractors', value: quezonCity.Contractor }
            ]}
            colors={[palette15[5], palette15[6]]}
            height={300}
            showZeroSlice
            sx={{ border: 'none' }}
          />
        )
    },
    {
      key: 'combined',
      title: 'Asia-Pacific',
      body: combinedRegions.length === 0
        ? (
          <Typography color="white" align="center" py={6}>
            No regional data
          </Typography>
        )
        : (
          <PieChartCard
            data={combinedRegions.map(r => ({
              name: r.name.replace(/^.*\./, ''),
              value: r.total
            }))}
            colors={[palette15[2], palette15[3], palette15[4]]}
            height={300}
            showZeroSlice
            sx={{ border: 'none' }}
          />
        )
    }
  ];

  return (
    <>
      <Header title="APAC Live Occupancy" />
      <Container
        maxWidth={false}
        disableGutters
        sx={{ py: 3, px: { xs: 1, sm: 3 }, background: '#0d0d0d' }}
      >

        {/* Top Summary Cards */}
        <Grid container spacing={2} mb={3}>
          {[
            {
              title: "Today's Total Headcount",
              value: todayTot,
              icon: <i className="fa-solid fa-users" style={{ fontSize: 25 }} />,
              border: '#FFB300'
            },
            {
              title: "Today's Employees Count",
              value: todayEmp,
              icon: <i className="bi bi-people" style={{ fontSize: 25 }} />,
              border: '#8BC34A'
            },
            {
              title: "Today's Contractors Count",
              value: todayCont,
              icon: <i className="fa-solid fa-circle-user" style={{ fontSize: 25 }} />,
              border: '#E57373'
            },
            {
              title: "Realtime Headcount",
              value: realtimeTot,
              icon: <i className="fa-solid fa-users" style={{ fontSize: 25 }} />,
              border: '#FFD180'
            },
            {
              title: "Realtime Employees Count",
              value: realtimeEmp,
              icon: <i className="bi bi-people" style={{ fontSize: 25 }} />,
              border: '#AED581'
            },
            {
              title: "Realtime Contractors Count",
              value: realtimeCont,
              icon: <i className="fa-solid fa-circle-user" style={{ fontSize: 25 }} />,
              border: '#EF5350'
            }
          ].map((card, index) => (
            <Grid key={index} item xs={12} sm={6} md={4} lg={2}>
              <Box
                sx={{
                  border: `2px solid ${card.border}`,
                  borderRadius: 2,
                  transition: 'all 0.3s',
                  '&:hover': {
                    boxShadow: `0px 0px 12px ${card.border}`
                  }
                }}
              >
                <SummaryCard
                  title={card.title}
                  total={card.value}
                  stats={[]}
                  icon={card.icon}
                  sx={{ height: 140 }}
                />
              </Box>
            </Grid>
          ))}
        </Grid>

        {/* Region Cards */}
        <Grid container spacing={2} mb={4}>
          {loading ? (
            <Skeleton variant="rectangular" width="100%" height={200} />
          ) : (
            partitions.map(p => (
              <Grid item key={p.name} xs={12} sm={6} md={4} lg={2}>
                <Box
                  sx={{
                    border: '1px solid #FFB300',
                    borderRadius: 2,
                    transition: 'all 0.3s',
                    '&:hover': {
                      boxShadow: '0px 0px 10px #FFB300'
                    }
                  }}
                >
                  <SummaryCard
                    title={p.name.replace(/^.*\./, '')}
                    total={p.total}
                    stats={[
                      { label: 'Employees', value: p.Employee },
                      { label: 'Contractors', value: p.Contractor }
                    ]}
                    sx={{ width: '100%' }}
                  />
                </Box>
              </Grid>
            ))
          )}
        </Grid>

        {/* Chart Section */}
        <Grid container spacing={3}>
          {chartConfigs.map(({ key, title, body }) => (
            <Grid item key={key} xs={12} md={6} lg={4}>
              <Paper
                elevation={4}
                sx={{
                  p: 2,
                  height: '100%',
                  background: 'rgba(0,0,0,0.5)',
                  border: '1px solid #FFC107',
                  borderRadius: 2
                }}
              >
                <Typography variant="h6" align="center" sx={{ color: '#FFC107', mb: 2 }}>
                  {title}
                </Typography>
                {body}
              </Paper>
            </Grid>
          ))}
        </Grid>
      </Container>
      <Footer />
    </>
  );
}