
import React, { useEffect, useState } from 'react';
import { Container, Box, Typography, Grid } from '@mui/material';
import GroupIcon from '@mui/icons-material/Group';
import TrackChangesIcon from '@mui/icons-material/TrackChanges';
import PeopleIcon from '@mui/icons-material/People';
import BusinessCenterIcon from '@mui/icons-material/BusinessCenter';

import Header from '../components/Header';
import Footer from '../components/Footer';
import SummaryCard from '../components/SummaryCard';
import CompositeChartCard from '../components/CompositeChartCard';
import PieChartCard from '../components/PieChartCard';
import LoadingSpinner from '../components/LoadingSpinner';
import { useLiveOccupancy } from '../hooks/useLiveOccupancy';

import seatCapacities from '../data/buildingCapacities';

// Flags (already imported in Header as well)
import indiaFlag from '../assets/flags/india.png';
import phFlag from '../assets/flags/philippines.png';
import japanFlag from '../assets/flags/japan.png';
import malaysiaFlag from '../assets/flags/malaysia.png';

export default function Dashboard() {
  const { data, loading, error } = useLiveOccupancy(1000);
  const [lastUpdate, setLastUpdate] = useState('');

  useEffect(() => {
    if (data) setLastUpdate(new Date().toLocaleTimeString());
  }, [data]);

  if (error) {
    return (
      <Box py={4}>
        <Typography color="error" align="center">Error loading live data</Typography>
      </Box>
    );
  }

  // APAC partitions
  const partitions = ['Pune', 'Quezon City', 'JP.Tokyo', 'MY.Kuala Lumpur', 'Taguig City'];
  const displayName = {
    Pune: 'Pune',
    'Quezon City': 'Quezon City',
    'JP.Tokyo': 'Tokyo',
    'MY.Kuala Lumpur': 'Kuala Lumpur',
    'Taguig City': 'Taguig'
  };
  const flagMap = {
    Pune: indiaFlag,
    'Quezon City': phFlag,
    'JP.Tokyo': japanFlag,
    'MY.Kuala Lumpur': malaysiaFlag,
    'Taguig City': phFlag
  };
  const colorsMap = {
    Pune: ['#FFD666', '#fcf3cf', '#2ecc71', '#ec7063'],
    'Quezon City': ['#FFE599', '#fcf3cf', '#2ecc71', '#ec7063'],
    'JP.Tokyo': ['#FFF2CC', '#fcf3cf', '#2ecc71', '#ec7063'],
    'MY.Kuala Lumpur': ['#FFD666', '#fcf3cf', '#2ecc71', '#ec7063'],
    'Taguig City': ['#FFE599', '#fcf3cf', '#2ecc71', '#ec7063']
  };

  // Donut chart slices (for example, split APAC sites into two slices)
  const slice1 = partitions.slice(0, 3).map(k => ({
    name: displayName[k],
    value: data?.realtime?.[k]?.total || 0
  }));
  const slice2 = partitions.slice(3).map(k => ({
    name: displayName[k],
    value: data?.realtime?.[k]?.total || 0
  }));

  // Summary cards data (one per site)
  const summaryItems = partitions.map(site => {
    const x = data?.realtime?.[site] || {};
    return {
      label: displayName[site],
      total: x.total || 0,
      emp: x.Employee || 0,
      cont: x.Contractor || 0,
      flag: flagMap[site],
      colors: colorsMap[site]
    };
  });

  // Example of floor breakdown for Pune (if needed on this page or on partition page)
  // const puneFloors = Object.entries(data?.realtime?.Pune?.floors || {}).map(
  //   ([floor, headcount]) => ({
  //     name: floor,
  //     headcount,
  //     capacity: seatCapacities[floor] || 0
  //   })
  // );

  return (
    <Container maxWidth="lg" sx={{ pb: 4 }}>
      <Header />

      {/* Summary Cards */}
      <Grid container spacing={2} sx={{ mb: 4 }}>
        {summaryItems.map(item => (
          <Grid key={item.label} item xs={12} sm={6} md={4} lg={2}>
            <SummaryCard
              title={item.label}
              total={item.total}
              stats={[
                { label: 'Employees', value: item.emp },
                { label: 'Contractors', value: item.cont }
              ]}
              icon={<PeopleIcon />}
              titleColor="#FFC107"
              totalColor="#FFC107"
              statColors={['#4CAF50', '#FF4C4C']}
            >
              {/* Optionally show the flag */}
              <Box display="flex" justifyContent="center">
                <img src={item.flag} alt={`${item.label} flag`} width={30} />
              </Box>
            </SummaryCard>
          </Grid>
        ))}
      </Grid>

      {/* Pie Charts (example) */}
      <Grid container spacing={2} sx={{ mb: 4 }}>
        <Grid item xs={12} md={6}>
          <PieChartCard title="APAC Sites (Group 1)" data={slice1} colors={colorsMap['Pune']} />
        </Grid>
        <Grid item xs={12} md={6}>
          <PieChartCard title="APAC Sites (Group 2)" data={slice2} colors={colorsMap['MY.Kuala Lumpur']} />
        </Grid>
      </Grid>

      {/* Last update time */}
      <Box textAlign="right" mb={2}>
        <Typography variant="caption">Last update: {lastUpdate}</Typography>
      </Box>

      <Footer />
    </Container>
  );
}

..............................




in above code add only theme summary card color background colro only theme ok not change any, carafully 
// src/pages/Dashboard.jsx
import React from 'react';
import {
  Container, Box, Typography, Skeleton,
  Paper
} from '@mui/material';

import Header from '../components/Header';
import SummaryCard from '../components/SummaryCard';
import CompositeChartCard from '../components/CompositeChartCard';
import PieChartCard from '../components/PieChartCard';

import { useLiveOccupancy } from '../hooks/useLiveOccupancy';
import { partitionList } from '../services/occupancy.service';
import buildingCapacities from '../data/buildingCapacities';

const palette15 = [
  '#FFC107','#E91E63','#4CAF50','#FFEB3B','#FFD666',
  '#D84315','#3F51B5','#9C27B0','#00BCD4','#8BC34A',
  '#FF9800','#673AB7','#009688','#CDDC39','#795548'
];

export default function Dashboard() {
  const { data, loading, error } = useLiveOccupancy(1000);

  if (error) {
    return (
      <Box width="100vw" py={4}>
        <Typography color="error" align="center">
          Error loading live data
        </Typography>
      </Box>
    );
  }

  const regions = data?.realtime || {};
  const partitions = partitionList
    .map(name => {
      const key = Object.keys(regions).find(k => k.includes(name));
      const p = key ? regions[key] : {};
      return {
        name,
        total: p.total || 0,
        Employee: p.Employee || 0,
        Contractor: p.Contractor || 0,
        floors: p.floors || {}
      };
    })
    .sort((a, b) => b.total - a.total);

  const todayTot = data?.today?.total || 0;
  const todayEmp = data?.today?.Employee || 0;
  const todayCont = data?.today?.Contractor || 0;
  const realtimeTot = partitions.reduce((sum, p) => sum + p.total, 0);
  const realtimeEmp = partitions.reduce((sum, p) => sum + p.Employee, 0);
  const realtimeCont = partitions.reduce((sum, p) => sum + p.Contractor, 0);

  const pune = partitions.find(p => p.name === 'Pune');
  const quezonCity = partitions.find(p => p.name === 'Quezon City');
  const combinedRegions = partitions.filter(p =>
    ['JP.Tokyo', 'MY.Kuala Lumpur', 'Taguig City'].includes(p.name)
  );

  const floors = Object.entries(pune?.floors || {});

  const chartConfigs = [
    {
      key: 'pune',
      title: 'Pune Composite Chart',
      body: pune?.total === 0
        ? (
          <Typography color="white" align="center" py={6}>
            No Pune data
          </Typography>
        )
        : (
          <CompositeChartCard
            data={floors.map(([f, h]) => ({
              name: f,
              headcount: h,
              capacity: buildingCapacities[f] || 0
            }))}
            lineColor={palette15[0]}
            height={300}
            sx={{ border: 'none' }}
          />
        )
    },
    {
      key: 'quezon',
      title: 'Quezon City',
      body: quezonCity?.total === 0
        ? (
          <Typography color="white" align="center" py={6}>
            No Quezon City data
          </Typography>
        )
        : (
          <PieChartCard
            data={[
              { name: 'Employees', value: quezonCity.Employee },
              { name: 'Contractors', value: quezonCity.Contractor }
            ]}
            colors={[palette15[5], palette15[6]]}
            height={300}
            showZeroSlice
            sx={{ border: 'none' }}
          />
        )
    },
    {
      key: 'combined',
      title: 'Tokyo + KL + Taguig',
      body: combinedRegions.length === 0
        ? (
          <Typography color="white" align="center" py={6}>
            No regional data
          </Typography>
        )
        : (
          <PieChartCard
            data={combinedRegions.map(r => ({
              name: r.name.replace(/^.*\./, ''),  // strip country code
              value: r.total
            }))}
            colors={[palette15[2], palette15[3], palette15[4]]}
            height={300}
            showZeroSlice
            sx={{ border: 'none' }}
          />
        )
    }
  ];

  return (
    <>
      <Header title="APAC Live Occupancy" />
      <Container
        maxWidth={false}
        disableGutters
        sx={{ py: 3, px: 2, background: 'rgba(0,0,0,0.6)' }}
      >
        {/* Top Summary Cards */}
        <Box display="flex" flexWrap="wrap" gap={1} mb={2}>
          {[
            {
              title: "Today's Total Headcount",
              value: todayTot,
              icon: <i className="fa-solid fa-users" style={{ fontSize: 25 }} />,
              border: '#FFD666'
            },
            {
              title: "Today's Employees Count",
              value: todayEmp,
              icon: <i className="bi bi-people" style={{ fontSize: 25 }} />,
              border: '#81C784'
            },
            {
              title: "Today's Contractors Count",
              value: todayCont,
              icon: <i className="fa-solid fa-circle-user" style={{ fontSize: 25 }} />,
              border: '#FFE599'
            },
            {
              title: "Realtime Headcount",
              value: realtimeTot,
              icon: <i className="fa-solid fa-users" style={{ fontSize: 25 }} />,
              border: '#FFF2CC'
            },
            {
              title: "Realtime Employees Count",
              value: realtimeEmp,
              icon: <i className="bi bi-people" style={{ fontSize: 25 }} />,
              border: '#FFD666'
            },
            {
              title: "Realtime Contractors Count",
              value: realtimeCont,
              icon: <i className="fa-solid fa-circle-user" style={{ fontSize: 25 }} />,
              border: '#FFE599'
            }
          ].map(c => (
            <Box key={c.title} sx={{ flex: '1 1 calc(16.66% - 8px)' }}>
              <SummaryCard
                title={c.title}
                total={c.value}
                stats={[]}
                icon={c.icon}
                sx={{ height: 140, border: `2px solid ${c.border}` }}
              />
            </Box>
          ))}
        </Box>

        {/* Region Cards */}
        <Box display="flex" flexWrap="wrap" gap={1} mb={3}>
          {loading
            ? <Skeleton variant="rectangular" width="90%" height={200} />
            : partitions.map(p => (
              <Box
                key={p.name}
                sx={{ flex: '1 1 calc(16.66% - 8px)' }}
              >
                <SummaryCard
                  title={p.name.replace(/^.*\./, '')}
                  total={p.total}
                  stats={[
                    { label: 'Employees', value: p.Employee },
                    { label: 'Contractors', value: p.Contractor }
                  ]}
                  sx={{ width: '100%', border: '1px solid #ccc' }}
                />
              </Box>
            ))
          }
        </Box>

        {/* Main Charts Section */}
        <Box display="flex" gap={2} flexWrap="wrap" mb={4}>
          {chartConfigs.map(({ key, title, body }) => (
            <Box
              key={key}
              sx={{
                flex: '1 1 32%',
                minWidth: 280,
                height: 380,
                animation: 'fadeInUp 0.5s'
              }}
            >
              <Paper
                sx={{
                  p: 2,
                  height: '100%',
                  background: 'rgba(0,0,0,0.4)',
                  border: '1px solid #FFC107',
                  display: 'flex',
                  flexDirection: 'column'
                }}
              >
                <Typography variant="h6" align="center" sx={{ color: '#FFC107', mb: 2 }}>
                  {title}
                </Typography>
                <Box sx={{ flex: 1, overflow: 'hidden' }}>
                  {body}
                </Box>
              </Paper>
            </Box>
          ))}
        </Box>
      </Container>
    </>
  );
}



// .


