// src/pages/Dashboard.jsx
import React from 'react';
import Header from '../components/Header';
import SummaryCard from '../components/SummaryCard';
import CompositeChartCard from '../components/CompositeChartCard';
import PieChartCard from '../components/PieChartCard';

import { useLiveOccupancy } from '../hooks/useLiveOccupancy';
import { partitionList } from '../services/occupancy.service';
import buildingCapacities from '../data/buildingCapacities';

const palette15 = [
  '#FFC107', '#E91E63', '#4CAF50', '#FFEB3B', '#FFD666',
  '#D84315', '#3F51B5', '#9C27B0', '#00BCD4', '#8BC34A',
  '#FF9800', '#673AB7', '#009688', '#CDDC39', '#795548'
];

export default function Dashboard() {
  const { data, loading, error } = useLiveOccupancy(1000);

  if (error) {
    return (
      <div className="w-full py-10 text-center text-red-500 text-lg">
        Error loading live data
      </div>
    );
  }

  const regions = data?.realtime || {};
  const partitions = partitionList
    .map(name => {
      const key = Object.keys(regions).find(k => k.includes(name));
      const p = key ? regions[key] : {};
      return {
        name,
        total: p.total || 0,
        Employee: p.Employee || 0,
        Contractor: p.Contractor || 0,
        floors: p.floors || {}
      };
    })
    .sort((a, b) => b.total - a.total);

  const todayTot = data?.today?.total || 0;
  const todayEmp = data?.today?.Employee || 0;
  const todayCont = data?.today?.Contractor || 0;
  const realtimeTot = partitions.reduce((sum, p) => sum + p.total, 0);
  const realtimeEmp = partitions.reduce((sum, p) => sum + p.Employee, 0);
  const realtimeCont = partitions.reduce((sum, p) => sum + p.Contractor, 0);

  const pune = partitions.find(p => p.name === 'Pune');
  const quezonCity = partitions.find(p => p.name === 'Quezon City');
  const combinedRegions = partitions.filter(p =>
    ['JP.Tokyo', 'MY.Kuala Lumpur', 'Taguig City'].includes(p.name)
  );

  const floors = Object.entries(pune?.floors || {});

  const chartConfigs = [
    {
      key: 'pune',
      title: 'Pune Composite Chart',
      body: pune?.total === 0
        ? <div className="text-white text-center py-6">No Pune data</div>
        : (
          <CompositeChartCard
            data={floors.map(([f, h]) => ({
              name: f,
              headcount: h,
              capacity: buildingCapacities[f] || 0
            }))}
            lineColor={palette15[0]}
            height={300}
          />
        )
    },
    {
      key: 'quezon',
      title: 'Quezon City',
      body: quezonCity?.total === 0
        ? <div className="text-white text-center py-6">No Quezon City data</div>
        : (
          <PieChartCard
            data={[
              { name: 'Employees', value: quezonCity.Employee },
              { name: 'Contractors', value: quezonCity.Contractor }
            ]}
            colors={[palette15[5], palette15[6]]}
            height={300}
            showZeroSlice
          />
        )
    },
    {
      key: 'combined',
      title: 'Tokyo + KL + Taguig',
      body: combinedRegions.length === 0
        ? <div className="text-white text-center py-6">No regional data</div>
        : (
          <PieChartCard
            data={combinedRegions.map(r => ({
              name: r.name.replace(/^.*\./, ''),
              value: r.total
            }))}
            colors={[palette15[2], palette15[3], palette15[4]]}
            height={300}
            showZeroSlice
          />
        )
    }
  ];

  return (
    <>
      <Header title="APAC Live Occupancy" />
      <div className="w-full px-4 py-6 bg-black bg-opacity-95">
        {/* Summary Cards */}
        <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4 mb-6">
          {[
            {
              title: "Today's Total Headcount",
              value: todayTot,
              icon: <i className="fa-solid fa-users text-xl" />,
              border: '#FFB300'
            },
            {
              title: "Today's Employees Count",
              value: todayEmp,
              icon: <i className="bi bi-people text-xl" />,
              border: '#8BC34A'
            },
            {
              title: "Today's Contractors Count",
              value: todayCont,
              icon: <i className="fa-solid fa-circle-user text-xl" />,
              border: '#E57373'
            },
            {
              title: "Realtime Headcount",
              value: realtimeTot,
              icon: <i className="fa-solid fa-users text-xl" />,
              border: '#FFD180'
            },
            {
              title: "Realtime Employees Count",
              value: realtimeEmp,
              icon: <i className="bi bi-people text-xl" />,
              border: '#AED581'
            },
            {
              title: "Realtime Contractors Count",
              value: realtimeCont,
              icon: <i className="fa-solid fa-circle-user text-xl" />,
              border: '#EF5350'
            }
          ].map(c => (
            <div key={c.title}>
              <SummaryCard
                title={c.title}
                total={c.value}
                icon={c.icon}
                stats={[]}
                sx={{ height: 140, border: `2px solid ${c.border}` }}
              />
            </div>
          ))}
        </div>

        {/* Region Summary Cards */}
        <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4 mb-6">
          {loading
            ? <div className="col-span-full h-52 bg-gray-700 animate-pulse rounded" />
            : partitions.map(p => (
              <div key={p.name}>
                <SummaryCard
                  title={p.name.replace(/^.*\./, '')}
                  total={p.total}
                  stats={[
                    { label: 'Employees', value: p.Employee },
                    { label: 'Contractors', value: p.Contractor }
                  ]}
                  sx={{ border: '1px solid #FFB300' }}
                />
              </div>
            ))
          }
        </div>

        {/* Chart Section */}
        <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
          {chartConfigs.map(({ key, title, body }) => (
            <div
              key={key}
              className="bg-black bg-opacity-50 border border-yellow-400 rounded-lg p-4 flex flex-col"
            >
              <h3 className="text-center text-yellow-400 text-lg font-semibold mb-2">
                {title}
              </h3>
              <div className="flex-1 overflow-hidden">
                {body}
              </div>
            </div>
          ))}
        </div>
      </div>
    </>
  );
}