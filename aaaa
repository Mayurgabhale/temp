// src/api/occupancy.service.js

export const getCurrentOccupancy = async (partitionNames) => {
  try {
    // Simulated API response
    return partitionNames.map(name => ({
      partitionName: name,
      occupancy: Math.floor(Math.random() * 100), // Random value
    }));
  } catch (error) {
    console.error('Failed to fetch occupancy:', error);
    throw error;
  }
};



.........





// src/hooks/useLiveOccupancy.js

import { useState, useEffect } from 'react';
import { getCurrentOccupancy } from '../api/occupancy.service';

export const useLiveOccupancy = (partitionNames) => {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(true);

  const fetchData = async () => {
    try {
      const response = await getCurrentOccupancy(partitionNames);
      setData(response);
    } catch (error) {
      console.error('Error fetching occupancy:', error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchData();
    const interval = setInterval(fetchData, 5000);
    return () => clearInterval(interval);
  }, [partitionNames]);

  return { data, loading };
};


.....
// src/App.js

import React from 'react';
import Dashboard from './components/Dashboard';

function App() {
  return (
    <div className="min-h-screen bg-gray-100">
      <Dashboard />
    </div>
  );
}

export default App;
......
// src/index.js

import React from 'react';
import ReactDOM from 'react-dom';
import './index.css'; // TailwindCSS or custom CSS
import App from './App';

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);