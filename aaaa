
th issue is in history and PartitionDetailDetails.jsx is 
//C:\Users\W0024618\Desktop\apac-occupancy-backend\src\services\occupancy.service.js

const { poolPromise, sql } = require('../config/db');

const partitionList = [
  'APAC.Default',
  'CN.Beijing',
  'JP.Tokyo',
  'PH.Manila',
  'MY.Kuala Lumpur',
  'IN.Pune'
];

function quoteList(arr) {
  return arr.map(p => `'${p.replace("'", "''")}'`).join(',');
}

/**
 * Live occupancy (today) for APAC
 */
exports.fetchLiveOccupancy = async () => {
  const pool = await poolPromise;
  const parts = quoteList(partitionList);

  const query = `
    WITH CombinedEmployeeData AS (
      SELECT
        t1.ObjectName1,
        t1.ObjectName2             AS Door,               -- include Door
        CASE WHEN t2.Int1 = 0 THEN t2.Text12 ELSE CAST(t2.Int1 AS NVARCHAR) END AS EmployeeID,
        t3.Name                    AS PersonnelType,
        t1.ObjectIdentity1         AS PersonGUID,
        -- extract CardNumber from XML or shred table
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
          sc.value
        )                          AS CardNumber,
        CASE
          WHEN t1.ObjectName2 LIKE 'APAC_PI%' THEN 'Taguig City'
          WHEN t1.ObjectName2 LIKE 'APAC_PH%' THEN 'Quezon City'
          WHEN t1.ObjectName2 LIKE '%PUN%'   THEN 'Pune'
          WHEN t1.ObjectName2 LIKE 'APAC_JPN%' THEN 'JP.Tokyo'
          WHEN t1.ObjectName2 LIKE 'APAC_MY%'  THEN 'MY.Kuala Lumpur'
          ELSE t1.PartitionName2
        END                        AS PartitionName2,
        DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t5d.value                  AS Direction
      FROM ACVSUJournal_00010028.dbo.ACVSUJournalLog t1
      JOIN ACVSCore.Access.Personnel       t2 ON t1.ObjectIdentity1 = t2.GUID
      JOIN ACVSCore.Access.PersonnelType   t3 ON t2.PersonnelTypeID = t3.ObjectID
      LEFT JOIN ACVSUJournal_00010028.dbo.ACVSUJournalLogxmlShred t5d
        ON t1.XmlGUID = t5d.GUID AND t5d.Value IN ('InDirection','OutDirection')
      LEFT JOIN ACVSUJournal_00010028.dbo.ACVSUJournalLogxml t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM ACVSUJournal_00010028.dbo.ACVSUJournalLogxmlShred
        WHERE Name IN ('Card','CHUID')
      ) AS sc
        ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType = 'CardAdmitted'
        AND t1.PartitionName2 IN (${parts})
        AND CONVERT(DATE, DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC))
            = CONVERT(DATE, GETDATE())
    ), Ranked AS (
      SELECT *,
        ROW_NUMBER() OVER (PARTITION BY PersonGUID ORDER BY LocaleMessageTime DESC) AS rn
      FROM CombinedEmployeeData
    )
    SELECT
      ObjectName1,
      Door,                            -- door
      PersonnelType,
      EmployeeID,
      CardNumber,                      -- now returned
      PartitionName2,
      LocaleMessageTime,
      Direction,
      PersonGUID
    FROM Ranked
    WHERE rn = 1;
  `;

  const result = await pool.request().query(query);
  return result.recordset;
};




/**
 * Historical raw‐data fetch for the past N days, all or by location.
 */


exports.fetchHistoricalData = async ({ days = 7, location = null }) => {
  const pool = await poolPromise;
  const parts = quoteList(partitionList);

  // Outer‐query filter based on the alias
  const outerFilter = location
    ? `WHERE PartitionNameFriendly = @location`
    : `WHERE PartitionNameFriendly IN (${quoteList([
        'Pune','Quezon City','JP.Tokyo','MY.Kuala Lumpur','Taguig City'
      ])})`;

  const query = `
    WITH Hist AS (
      SELECT
        DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t1.ObjectName1,
        t1.ObjectName2               AS Door,
        CASE WHEN t2.Int1 = 0 THEN t2.Text12 ELSE CAST(t2.Int1 AS NVARCHAR) END AS EmployeeID,
        t3.Name                      AS PersonnelType,
        t1.ObjectIdentity1           AS PersonGUID,


 -- **Single** friendly‐name alias, with fallback
        COALESCE(
          CASE
            WHEN t1.ObjectName2 LIKE 'APAC_PI%'   THEN 'Taguig City'
            WHEN t1.ObjectName2 LIKE 'APAC_PH%'   THEN 'Quezon City'
            WHEN t1.ObjectName2 LIKE '%PUN%'      THEN 'Pune'
            WHEN t1.ObjectName2 LIKE 'APAC_JPN%'  THEN 'JP.Tokyo'
            WHEN t1.ObjectName2 LIKE 'APAC_MY%'   THEN 'MY.Kuala Lumpur'
            ELSE t1.PartitionName2
          END,
          'APAC.Default'
        )                             AS PartitionNameFriendly,

        -- extract CardNumber
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
          sc.value
        )                            AS CardNumber,
        t5d.value                    AS Direction
      FROM ACVSUJournal_00010028.dbo.ACVSUJournalLog t1
      JOIN ACVSCore.Access.Personnel       t2 ON t1.ObjectIdentity1 = t2.GUID
      JOIN ACVSCore.Access.PersonnelType   t3 ON t2.PersonnelTypeID = t3.ObjectID
      LEFT JOIN ACVSUJournal_00010028.dbo.ACVSUJournalLogxmlShred t5d
        ON t1.XmlGUID = t5d.GUID AND t5d.Value IN ('InDirection','OutDirection')
      LEFT JOIN ACVSUJournal_00010028.dbo.ACVSUJournalLogxml t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM ACVSUJournal_00010028.dbo.ACVSUJournalLogxmlShred
        WHERE Name IN ('Card','CHUID')
      ) AS sc
        ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType = 'CardAdmitted'
        -- date filter remains here
        AND CONVERT(DATE, DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC))
            >= DATEADD(DAY, -${days}, CONVERT(DATE, GETDATE()))
    )

    -- now filter by the newly‐defined alias
    SELECT *
    FROM Hist
    ${outerFilter}
    ORDER BY LocaleMessageTime ASC;
  `;

  const req = pool.request();
  if (location) {
    req.input('location', sql.NVarChar, location);
  }
  const result = await req.query(query);
  return result.recordset;
};


exports.fetchHistoricalOccupancy = async (location) =>
  exports.fetchHistoricalData({ days: 7, location: location || null });




C:\Users\W0024618\Desktop\apac-occupancy-frontend\src\api\occupancy.service.js




// src/api/occupancy.service.js

const BASE = process.env.REACT_APP_API_BASE || 'http://localhost:3007';

// In‐memory cache
const cache = {
  liveSummary: null,
  history: new Map(),  // key: either 'global' or the partition name the backend expects
};



/**
 * Fetch live summary (always fresh).
 */
export async function fetchLiveSummary() {
  const res = await fetch(`${BASE}/api/occupancy/live-summary`);
  if (!res.ok) {
    throw new Error(`Live summary fetch failed: ${res.status}`);
  }
  return res.json();
}


/**
 * Fetch history (global or per‐partition), with in‐memory caching.
 * @param {string} [location] — e.g. 'IN.Pune' from your front‐end router param
 */

export async function fetchHistory(location) {
  const codeMap = {
    'IN.Pune': 'Pune',
    'MY.Kuala Lumpur': 'MY.Kuala Lumpur',
    'PH.Quezon': 'Quezon City',
    'PH.Taguig': 'Taguig City',
    'JP.Tokyo': 'JP.Tokyo'
  };
  
  const key = location ? codeMap[location] || location : 'global';
  
  if (cache.history.has(key)) {
    return cache.history.get(key);
  }

  const url = key === 'global' 
    ? `${BASE}/api/occupancy/history`
    : `${BASE}/api/occupancy/history/${encodeURIComponent(key)}`;

  const res = await fetch(url);
  if (!res.ok) throw new Error(`History fetch failed: ${res.status}`);
  
  let json = await res.json();
  
  // Normalize single-city response to match global structure
  if (key !== 'global') {
    json.summaryByDate = json.summaryByDate.map(entry => ({
      ...entry,
      partitions: {
        [key]: {
          Employee: entry.region?.Employee,
          Contractor: entry.region?.Contractor,
          total: entry.region?.total
        }
      }
    }));
  }
  
  cache.history.set(key, json);
  return json;
}
/** Clear in‐memory caches (for dev/testing) */
export function clearCache() {
  cache.liveSummary = null;
  cache.history.clear();
}

// APAC partition list for any selector UI
export const partitionList = [
  'IN.Pune',
  'MY.Kuala Lumpur',
  'PH.Quezon',
  'PH.Taguig',
  'JP.Tokyo'
];



C:\Users\W0024618\Desktop\apac-occupancy-frontend\src\pages\History.jsx



// src/pages/History.jsx — APAC Edition

import React, { useEffect, useState, useMemo } from 'react';
import { useParams } from 'react-router-dom';
import {
  Container,
  Box,
  Button,
  Typography,
  Table,
  TableHead,
  TableBody,
  TableRow,
  TableCell,
  Paper,
  TextField
} from '@mui/material';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { LocalizationProvider, DatePicker } from '@mui/x-date-pickers';
import { format } from 'date-fns';
import * as XLSX from 'xlsx';
import { saveAs } from 'file-saver';

import Header from '../components/Header';
import Footer from '../components/Footer';
import LoadingSpinner from '../components/LoadingSpinner';
import { fetchHistory } from '../api/occupancy.service';

// APAC display mapping (country + city) by front-end code
const apacPartitionDisplay = {
  'IN.Pune':         { country: 'India',       city: 'Pune' },
  'MY.Kuala Lumpur': { country: 'Malaysia',    city: 'Kuala Lumpur' },
  'PH.Quezon':       { country: 'Philippines', city: 'Quezon City' },
  'PH.Taguig':       { country: 'Philippines', city: 'Taguig' },
  'JP.Tokyo':        { country: 'Japan',       city: 'Tokyo' },
};

// Forward map: front-end code → backend key
const apacForwardKey = {
  'IN.Pune':         'Pune',
  'MY.Kuala Lumpur': 'Kuala Lumpur',
  'PH.Quezon':       'Quezon City',
  'PH.Taguig':       'Taguig City',
  'JP.Tokyo':        'JP.Tokyo',
};



// Reverse map: backend key → front-end code
const apacReverseKey = Object.fromEntries(
  Object.entries(apacForwardKey).map(([fe, be]) => [be, fe])
);


// Format a backend partition key into "Country • City"
const formatPartition = key => {
  const feCode = apacReverseKey[key];
  const display = feCode && apacPartitionDisplay[feCode];
  return display
    ? `${display.city}`
    : key;  // fallback to raw if missing
};


export default function History() {
  const { partition } = useParams();
  const decodedPartition = partition ? decodeURIComponent(partition) : null;

  // the exact backend key to filter on, if any
  // const backendFilterKey = decodedPartition
  //   ? apacForwardKey[decodedPartition]
  //   : null;

const backendFilterKey = decodedPartition
  ? apacForwardKey[decodedPartition] || decodedPartition
  : null;


  // Try to find the matching front-end key (e.g., "IN.Pune") for "Pune"

  const [data, setData]               = useState(null);
  const [loading, setLoading]         = useState(true);
  const [pickedDate, setPickedDate]   = useState(null);
  const [showDetails, setShowDetails] = useState(false);

  // useEffect(() => {
  //   setLoading(true);
  //   fetchHistory(decodedPartition)
  //     .then(json => setData(json))
  //     .finally(() => setLoading(false));
  // }, [decodedPartition]);

  useEffect(() => {
  setLoading(true);
  fetchHistory(decodedPartition)
    .then(json => {
      setData(json);
      // DEBUG LOG - Add this line
     
    })
    .finally(() => setLoading(false));
}, [decodedPartition]);





const summaryEntry = useMemo(() => {
  if (!data || !pickedDate) return null;

  const dateStr = format(pickedDate, 'yyyy-MM-dd');

  const match = data.summaryByDate.find(r =>
    r.date === dateStr || r.date.startsWith(dateStr)
  );

  return match || null;
}, [data, pickedDate]);




// const partitionRows = useMemo(() => {
//   if (!summaryEntry) return [];

//   // Handle single-city response (data is in region)
//   if (backendFilterKey && summaryEntry.region) {
//     const feCode = Object.entries(apacForwardKey).find(
//       ([code, beKey]) => beKey === backendFilterKey || `${beKey} City` === backendFilterKey
//     )?.[0];
    
//     const display = feCode ? apacPartitionDisplay[feCode] : null;
    
//     return [{
//       country: display?.country || 'Unknown',
//       city: display?.city || backendFilterKey.replace(' City', ''),
//       employee: summaryEntry.region.Employee ?? 0,
//       contractor: summaryEntry.region.Contractor ?? 0,
//       total: summaryEntry.region.total ?? 0
//     }];
//   }

//   // Handle global view (data is in partitions)
//   return Object.entries(summaryEntry.partitions || {})
//     .filter(([key]) => !backendFilterKey || 
//       key.replace(' City', '') === backendFilterKey.replace(' City', ''))
//     .map(([key, vals]) => {
//       const feCode = Object.entries(apacForwardKey).find(
//         ([code, beKey]) => beKey === key || `${beKey} City` === key
//       )?.[0];
      
//       const display = feCode ? apacPartitionDisplay[feCode] : null;
      
//       return {
//         country: display?.country || 'Unknown',
//         city: display?.city || key.replace(' City', ''),
//         employee: vals.Employee ?? vals.EmployeeCount ?? 0,
//         contractor: vals.Contractor ?? vals.ContractorCount ?? 0,
//         total: vals.total ?? 0,
//       };
//     });
// }, [summaryEntry, backendFilterKey]);






//  this is wroking details rows only not my.kl

//   const detailRows = useMemo(() => {
//   if (!data || !pickedDate || !data.details) return [];
  
//   const dateStr = format(pickedDate, 'yyyy-MM-dd');
  
//   return data.details
//     .filter(r => {
//       // More flexible date comparison
//       const recordDate = format(new Date(r.LocaleMessageTime), 'yyyy-MM-dd');
//       return recordDate === dateStr;
//     })
//     .filter(r => {
//       if (!backendFilterKey) return true;
      
//       // Handle both direct and mapped partition names
//       const recordPartition = r.PartitionName2 || r.PartitionNameFriendly;
//       if (!recordPartition) return false;
      
//       // Normalize keys for comparison
//       const normalizedRecord = recordPartition.replace(' City', '');
//       const normalizedFilter = backendFilterKey.replace(' City', '');
      
//       return normalizedRecord === normalizedFilter;
//     })
//     .filter(r => r.Direction === 'InDirection')
//     .reduce((unique, row) => {
//       const keyGUID = `${row.PersonGUID}-${row.PersonnelType}`;
//       if (!unique._seen.has(keyGUID)) {
//         unique._seen.add(keyGUID);
//         unique.rows.push(row);
//       }
//       return unique;
//     }, { _seen: new Set(), rows: [] })
//     .rows;
// }, [data, pickedDate, backendFilterKey]);

const partitionRows = useMemo(() => {
  if (!summaryEntry) return [];

  // Handle single-city response (data is in region)
  if (backendFilterKey && summaryEntry.region) {
    const feCode = Object.keys(apacPartitionDisplay).find(
      code => apacForwardKey[code] === backendFilterKey || 
             code === backendFilterKey
    );
    
    const display = feCode ? apacPartitionDisplay[feCode] : null;
    
    return [{
      country: display?.country || 'Unknown',
      city: display?.city || backendFilterKey.replace(' City', ''),
      employee: summaryEntry.region.Employee ?? 0,
      contractor: summaryEntry.region.Contractor ?? 0,
      total: summaryEntry.region.total ?? 0
    }];
  }

  // Handle global view (data is in partitions)
  return Object.entries(summaryEntry.partitions || {})
    .filter(([key]) => !backendFilterKey || 
      key.replace(' City', '') === backendFilterKey.replace(' City', ''))
    .map(([key, vals]) => {
      // First try to find exact match in forward keys
      const feCode = Object.entries(apacForwardKey).find(
        ([code, beKey]) => beKey === key || `${beKey} City` === key || code === key
      )?.[0];
      
      // If not found, try to match with country prefix (MY., PH., etc.)
      const display = feCode ? apacPartitionDisplay[feCode] : 
        Object.entries(apacPartitionDisplay).find(
          ([code]) => code.endsWith(key.replace(' City', ''))
        )?.[1];
      
      return {
        country: display?.country || 'Unknown',
        city: display?.city || key.replace(' City', ''),
        employee: vals.Employee ?? vals.EmployeeCount ?? 0,
        contractor: vals.Contractor ?? vals.ContractorCount ?? 0,
        total: vals.total ?? 0,
      };
    });
}, [summaryEntry, backendFilterKey]);

const detailRows = useMemo(() => {
  if (!data || !pickedDate || !data.details) return [];
  
  const dateStr = format(pickedDate, 'yyyy-MM-dd');
  
  return data.details
    .filter(r => {
      const recordDate = format(new Date(r.LocaleMessageTime), 'yyyy-MM-dd');
      return recordDate === dateStr;
    })
    .filter(r => {
      if (!backendFilterKey) return true;
      
      // Handle special case for Kuala Lumpur
      const recordPartition = (r.PartitionName2 || r.PartitionNameFriendly || '').replace('MY.', '');
      if (!recordPartition) return false;
      
      // Normalize keys for comparison (remove country prefix and ' City' suffix)
      const normalizedRecord = recordPartition.replace(' City', '').trim();
      const normalizedFilter = backendFilterKey.replace('MY.', '').replace(' City', '').trim();
      
      return normalizedRecord === normalizedFilter;
    })
    .filter(r => r.Direction === 'InDirection')
    .reduce((unique, row) => {
      const keyGUID = `${row.PersonGUID}-${row.PersonnelType}`;
      if (!unique._seen.has(keyGUID)) {
        unique._seen.add(keyGUID);
        unique.rows.push(row);
      }
      return unique;
    }, { _seen: new Set(), rows: [] })
    .rows;
}, [data, pickedDate, backendFilterKey]);


  const handleExport = () => {
    const ws = XLSX.utils.json_to_sheet(
      detailRows.map((r, i) => ({
        Sr: i + 1,
        Date: format(new Date(r.LocaleMessageTime), 'yyyy-MM-dd'),
        Time: format(new Date(r.LocaleMessageTime), 'HH:mm:ss'),
        EmployeeID: r.EmployeeID,
        Name: r.ObjectName1,
        PersonnelType: r.PersonnelType,
        Door: r.Door,
     Partition: formatPartition(r.PartitionNameFriendly)
      }))
    );
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Details');
    const buf = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });
    saveAs(new Blob([buf]), `apac_history_${format(pickedDate, 'yyyyMMdd')}.xlsx`);
  };

  if (loading) return <LoadingSpinner />;
  if (!data)    return null;

  // Styles for DatePicker's TextField
  const datePickerSx = {
    backgroundColor: '#000',
    '& .MuiOutlinedInput-notchedOutline': {
      borderColor: '#FFC107',
    },
    '&:hover .MuiOutlinedInput-notchedOutline': {
      borderColor: '#FFC107',
    },
    '& .MuiInputBase-input': {
      color: '#FFC107',
    },
    '& .MuiInputLabel-root': {
      color: '#FFC107',
    },
    '& .MuiInputAdornment-root svg': {
      color: '#FFC107',
    },
  };

  return (
    <>
      <Header />

      <Container maxWidth={false} disableGutters sx={{ pt: 2, pb: 4 }}>
        {pickedDate && summaryEntry ? (
          <Box display="flex" alignItems="flex-start" sx={{ px: '20px', mb: 2, gap: '10px' }}>
            {/* DatePicker */}
            <Box sx={{ flex: '0 0 200px' }}>
              <LocalizationProvider dateAdapter={AdapterDateFns}>
                <DatePicker
                  label="Select date"
                  value={pickedDate}
                  onChange={d => { setPickedDate(d); setShowDetails(false); }}
                  renderInput={params => (
                    <TextField
                      fullWidth
                      {...params}
                      sx={datePickerSx}
                    />
                  )}
                />
              </LocalizationProvider>
            </Box>

            {/* Summary Table */}
            <Box sx={{ flex: 1, maxWidth: 900, display: 'flex', flexDirection: 'column', gap: 2 }}>
              <Paper elevation={3} sx={{ px: 4, py: 3, border: '3px solid #000', borderRadius: 2 }}>
                <Table sx={{ border: '2px solid #000' }}>
                  <TableHead>
                    <TableRow>
                      <TableCell colSpan={5} align="center"
                        sx={{
                          fontWeight: 'bold',
                          fontSize: 16,
                          bgcolor: '#000',
                          color: '#FFC107',
                          border: '2px solid #000'
                        }}
                      >
                        {format(pickedDate, 'EEEE, d MMMM, yyyy')}
                      </TableCell>
                    </TableRow>
                    <TableRow sx={{ bgcolor: '#FFC107' }}>
                      {['Country','City','Employees','Contractors','Total'].map(h => (
                        <TableCell
                          key={h}
                          align={['Country','City'].includes(h) ? 'left' : 'right'}
                          sx={{
                            color: '#000',
                            fontWeight: 'bold',
                            fontSize: 14,
                            border: '2px solid #000'
                          }}
                        >
                          {h}
                        </TableCell>
                      ))}
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {partitionRows.map((row, i) => (
                      <TableRow key={i}>
                        <TableCell sx={{ border: '2px solid #000' }}>{row.country}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{row.city}</TableCell>
                        <TableCell align="right" sx={{ border: '2px solid #000' }}>{row.employee}</TableCell>
                        <TableCell align="right" sx={{ border: '2px solid #000' }}>{row.contractor}</TableCell>
                        <TableCell
                          align="right"
                          sx={{
                            backgroundColor: '#FFC107',
                            fontWeight: 'bold',
                            border: '2px solid #000'
                          }}
                        >
                          {row.total}
                        </TableCell>
                      </TableRow>
                    ))}
                    <TableRow sx={{ bgcolor: '#666' }}>
                      <TableCell colSpan={2} align="right"
                        sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                        Total
                      </TableCell>
                      <TableCell align="right"
                        sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                        {partitionRows.reduce((s, r) => s + r.employee, 0)}
                      </TableCell>
                      <TableCell align="right"
                        sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                        {partitionRows.reduce((s, r) => s + r.contractor, 0)}
                      </TableCell>
                      <TableCell align="right"
                        sx={{ color: '#fff', fontWeight: 'bold', bgcolor: '#333', border: '2px solid #000' }}>
                        {partitionRows.reduce((s, r) => s + r.total, 0)}
                      </TableCell>
                    </TableRow>
                  </TableBody>
                </Table>
              </Paper>

              {/* Toggle Details & Export */}
              <Box display="flex" justifyContent="center" sx={{ mt: 1 }}>
                <Button
                  variant="contained"
                  sx={{ bgcolor: '#FFC107', color: '#000' }}
                  onClick={() => setShowDetails(v => !v)}
                >
                  {showDetails ? 'Hide Details' : 'See Details'}
                </Button>
                {showDetails && (
                  <Button
                    variant="outlined"
                    sx={{ ml: 2, borderColor: '#FFC107', color: '#FFC107' }}
                    onClick={handleExport}
                  >
                    Export to Excel
                  </Button>
                )}
              </Box>
            </Box>
          </Box>
        ) : (
          <Box sx={{ px: '20px', mb: 3 }}>
            <LocalizationProvider dateAdapter={AdapterDateFns}>
              <DatePicker
                label="Select date"
                value={pickedDate}
                onChange={d => { setPickedDate(d); setShowDetails(false); }}
                renderInput={params => (
                  <TextField
                    fullWidth
                    {...params}
                    sx={datePickerSx}
                  />
                )}
              />
            </LocalizationProvider>
            {!pickedDate && (
              <Typography variant="body1" color="textSecondary" sx={{ mt: 2 }}>
                Please pick a date to view region summary.
              </Typography>
            )}
          </Box>
        )}

        {/* Details Table */}
        {showDetails && (
          <Box display="flex" justifyContent="center" mb={2} sx={{ width: '100%' }}>
            <Paper
              elevation={1}
              sx={{
                px: '40px',
                py: 1,
                width: '100%',
                border: '3px solid #000',
                borderRadius: 2,
              }}
            >
              {detailRows.length > 0 ? (
                <Table sx={{ border: '2px solid #000', borderCollapse: 'collapse' }}>
                  <TableHead>
                    <TableRow sx={{ bgcolor: '#000' }}>
                      {[
                        'Sr','Date','Time',
                        'Employee ID','Name','Personnel Type',
                        'Door','Partition'
                      ].map(h => (
                        <TableCell
                          key={h}
                          align="center"
                          sx={{
                            color: '#FFC107',
                            fontWeight: 'bold',
                            fontSize: 14,
                            border: '2px solid #000',
                          }}
                        >
                          {h}
                        </TableCell>
                      ))}
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {detailRows.map((r, i) => (
                      <TableRow key={`${r.PersonGUID}-${i}`}>
                        <TableCell sx={{ border: '2px solid #000' }}>{i + 1}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>
                          {format(new Date(r.LocaleMessageTime), 'yyyy-MM-dd')}
                        </TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>
                          {format(new Date(r.LocaleMessageTime), 'HH:mm:ss')}
                        </TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{r.EmployeeID}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{r.ObjectName1}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{r.PersonnelType}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{r.Door}</TableCell>


                              <TableCell sx={{ border: '2px solid #000' }}>
                          {formatPartition(r.PartitionNameFriendly)}
                      </TableCell>

                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              ) : (
                <Typography
                  variant="body2"
                  sx={{
                    color: '#666',
                    textAlign: 'center',
                    mt: 2,
                    fontStyle: 'italic',
                  }}
                >
                  No swipe records found for this date.
                </Typography>
              )}
            </Paper>
          </Box>
        )}
      </Container>

      <Footer />
    </>
  );
}

C:\Users\W0024618\Desktop\apac-occupancy-frontend\src\pages\PartitionDetailDetails.jsx


//C:\Users\W0024618\Desktop\apac-occupancy-frontend\src\pages\PartitionDetailDetails.jsx

import React, { useEffect, useState, useMemo } from "react";
import {
  Container, Box, Typography, Button, TextField,
  Paper, TableContainer, Table, TableHead, TableRow, TableCell, TableBody
} from "@mui/material";
import { useParams, useNavigate } from "react-router-dom";

import Header from "../components/Header";
import Footer from "../components/Footer";
import LoadingSpinner from "../components/LoadingSpinner";
import DataTable from "../components/DataTable";

import { fetchLiveSummary } from "../api/occupancy.service";
import { lookupFloor } from "../utils/floorLookup";

export default function PartitionDetailDetails() {
  const { partition } = useParams();
  const navigate = useNavigate();

  const [details, setDetails] = useState([]);
  const [liveCounts, setLiveCounts] = useState({});
  const [loading, setLoading] = useState(true);
  const [lastUpdate, setLastUpdate] = useState("");
  const [search, setSearchTerm] = useState("");
  const [expandedFloor, setExpandedFloor] = useState(null);

  // load once
  useEffect(() => {
    let active = true;
    fetchLiveSummary().then(json => {
      if (!active) return;
      setLiveCounts(json.realtime[partition]?.floors || {});
      const det = json.details
        .filter(r => r.PartitionName2 === partition && r.Direction === "InDirection")
        .map(r => ({ ...r, floor: lookupFloor(r.PartitionName2, r.Door, r.Direction) }));
      setDetails(det);
      setLastUpdate(new Date().toLocaleTimeString());
      setLoading(false);
    });
    return () => { active = false };
  }, [partition]);



  // poll
  useEffect(() => {
    const iv = setInterval(async () => {
      const json = await fetchLiveSummary();
      setLiveCounts(json.realtime[partition]?.floors || {});
      const det = json.details
        .filter(r => r.PartitionName2 === partition && r.Direction === "InDirection")
        .map(r => ({ ...r, floor: lookupFloor(r.PartitionName2, r.Door, r.Direction) }));
      setDetails(det);
      setLastUpdate(new Date().toLocaleTimeString());
    }, 1000);
    return () => clearInterval(iv);
  }, [partition]);

  // group floors
  const floorMap = useMemo(() => {
    const m = {};
    Object.keys(liveCounts).forEach(f => m[f] = []);
    details.forEach(r => {
      if (!m[r.floor]) m[r.floor] = [];
      m[r.floor].push(r);
    });
    return m;
  }, [details, liveCounts]);




  const displayed = useMemo(() => {
  const term = search.toLowerCase();
  return Object.entries(floorMap)
    .map(([floor, emps]) => {
      const filteredEmps = emps.filter(e =>
        floor.toLowerCase().includes(term) ||
        e.ObjectName1?.toLowerCase().includes(term) ||
        e.EmployeeID?.toString().toLowerCase().includes(term) ||
        e.CardNumber?.toString().toLowerCase().includes(term)
      );
      return [floor, filteredEmps];
    })
    .filter(([, filteredEmps]) => filteredEmps.length > 0);
}, [floorMap, search]);


  const columns = [
    { field: "EmployeeID", headerName: "Emp ID" },
    { field: "ObjectName1", headerName: "Name" },
    { field: "LocaleMessageTime", headerName: "Swipe Time" },
    { field: "PersonnelType", headerName: "Type" },
    { field: "CardNumber", headerName: "Card" },
    { field: "Door", headerName: "Door" },
  ];

  if (loading) {
    return (
      <>
        <Header />
        <Box sx={{ px: 2, py: 8 }}><LoadingSpinner /></Box>
        <Footer />
      </>
    );
  }

  return (
    <>
      <Header />

      <Box sx={{ pt: 1, pb: 1, background: 'rgba(0,0,0,0.6)' }}>
        <Container disableGutters maxWidth={false}>
          <Box display="flex" alignItems="center" mb={2} sx={{ px: 2 }}>
            <Button size="small" onClick={() => navigate(-1)} sx={{ color: '#FFC107' }}>
              ← Back to Overview
            </Button>
          </Box>

          <Box display="flex" alignItems="center" gap={2} mb={2} sx={{ px: 2 }}>
            <Typography variant="h6" sx={{ color: '#FFC107' }}>
              Floor Details
            </Typography>
            <Typography variant="body2" sx={{ color: '#FFC107' }}>
              Last updated: {lastUpdate}
            </Typography>
            <TextField
              size="small"
              placeholder="Search floor / emp…"
              value={search}
              onChange={e => setSearchTerm(e.target.value)}
              sx={{
                '& .MuiInputBase-input': { color: '#FFC107' },
                '& .MuiOutlinedInput-root fieldset': { borderColor: '#FFC107' }
              }}
            />
          </Box>

          <Box display="flex" flexWrap="wrap" width="100%" sx={{ px: 2 }}>
            {displayed.map(([floor, emps]) => (
              <Box key={floor} sx={{ width: '50%', p: 2 }}>
                <Paper sx={{
                  border: '2px solid #FFC107',
                  p: 2,
                  background: 'rgba(0,0,0,0.4)'
                }}>
                  <Typography variant="subtitle1" fontWeight={600} gutterBottom sx={{ color: '#FFC107' }}>
                    {floor} (Total {liveCounts[floor] || 0})
                  </Typography>

                  <TableContainer component={Paper} variant="outlined" sx={{ mb: 1, background: 'rgba(0,0,0,0.4)' }}>
                    <Table size="small">
                      <TableHead>
                        <TableRow sx={{ bgcolor: '#000' }}>
                          {["Emp ID", "Name", "Swipe Time", "Type", "Card", "Door"].map(h => (
                            <TableCell key={h} sx={{ color: '#FFC107', border: '1px solid #FFC107', fontWeight: 'bold' }}>
                              {h}
                            </TableCell>
                          ))}
                        </TableRow>
                      </TableHead>
                      <TableBody>
                        {emps.slice(0, 10).map((r, i) => (
                          <TableRow key={i}>
                            <TableCell sx={{ color: '#fff', border: '1px solid #FFC107' }}>{r.EmployeeID}</TableCell>
                            <TableCell sx={{ color: '#fff', border: '1px solid #FFC107' }}>{r.ObjectName1}</TableCell>
                            <TableCell sx={{ color: '#fff', border: '1px solid #FFC107' }}>
                              {new Date(r.LocaleMessageTime).toLocaleTimeString()}
                            </TableCell>
                            <TableCell sx={{ color: '#fff', border: '1px solid #FFC107' }}>{r.PersonnelType}</TableCell>
                            <TableCell sx={{ color: '#fff', border: '1px solid #FFC107' }}>{r.CardNumber}</TableCell>
                            <TableCell sx={{ color: '#fff', border: '1px solid #FFC107' }}>{r.Door}</TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </TableContainer>

                  <Button size="small"
                    onClick={() => setExpandedFloor(f => f === floor ? null : floor)}
                    sx={{ color: '#FFC107' }}
                  >
                    {expandedFloor === floor ? 'Hide' : 'See more…'}
                  </Button>
                </Paper>
              </Box>
            ))}
          </Box>

          {expandedFloor && (
            <Box sx={{ px: 2, mt: 2 }}>
              <Typography variant="h6" sx={{ color: '#FFC107' }} gutterBottom>
                {expandedFloor} — All Entries
              </Typography>
              <DataTable
                columns={columns}
                rows={floorMap[expandedFloor].map(r => ({
                  ...r,
                  LocaleMessageTime: new Date(r.LocaleMessageTime).toLocaleTimeString()
                }))}
              />
            </Box>
          )}
        </Container>
      </Box>

      <Footer />
    </>
  );
}
