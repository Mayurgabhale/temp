C:\Users\W0024618\Desktop\apac-occupancy-frontend\src\api\occupancy.service.js
// 

// src/api/occupancy.service.js

export const getCurrentOccupancy = async (partitionNames) => {
  try {
    // Simulated API response
    return partitionNames.map(name => ({
      partitionName: name,
      occupancy: Math.floor(Math.random() * 100), // Random value
    }));
  } catch (error) {
    console.error('Failed to fetch occupancy:', error);
    throw error;
  }
};
C:\Users\W0024618\Desktop\apac-occupancy-frontend\src\assets\flags\IN.India.png
C:\Users\W0024618\Desktop\apac-occupancy-frontend\src\assets\flags\JP.Tokyo.png
C:\Users\W0024618\Desktop\apac-occupancy-frontend\src\assets\flags\MY.KualaLumpur.png
C:\Users\W0024618\Desktop\apac-occupancy-frontend\src\assets\flags\PH.Manila.png
C:\Users\W0024618\Desktop\apac-occupancy-frontend\src\assets\flags\Quezon.png
C:\Users\W0024618\Desktop\apac-occupancy-frontend\src\assets\flags\Taguig.png
C:\Users\W0024618\Desktop\apac-occupancy-frontend\src\components\ChartCard.jsx
import React from 'react';
import { Card, CardContent, Typography } from '@mui/material';

const ChartCard = ({ title, total, employee, contractor }) => (
  <Card variant="outlined" sx={{ mb: 2 }}>
    <CardContent>
      <Typography variant="h6">{title}</Typography>
      <Typography>Total: {total}</Typography>
      <Typography>Employees: {employee}</Typography>
      <Typography>Contractors: {contractor}</Typography>
    </CardContent>
  </Card>
);

export default ChartCard;

C:\Users\W0024618\Desktop\apac-occupancy-frontend\src\components\DataTable.jsx
import React from 'react';
import { Table, TableHead, TableRow, TableCell, TableBody } from '@mui/material';

const DataTable = ({ data }) => (
  <Table size="small">
    <TableHead>
      <TableRow>
        <TableCell>Name</TableCell>
        <TableCell>Type</TableCell>
        <TableCell>Location</TableCell>
        <TableCell>Time</TableCell>
      </TableRow>
    </TableHead>
    <TableBody>
      {data.map((row, idx) => (
        <TableRow key={idx}>
          <TableCell>{row.ObjectName1}</TableCell>
          <TableCell>{row.PersonnelType}</TableCell>
          <TableCell>{row.PartitionName2}</TableCell>
          <TableCell>{new Date(row.LocaleMessageTime).toLocaleTimeString()}</TableCell>
        </TableRow>
      ))}
    </TableBody>
  </Table>
);

export default DataTable;
C:\Users\W0024618\Desktop\apac-occupancy-frontend\src\components\Footer.jsx
import React from 'react';
import { Box, Typography } from '@mui/material';

const Footer = () => (
  <Box mt={4} textAlign="center">
    <Typography variant="caption">Â© 2025 APAC Real-Time Headcount Dashboard</Typography>
  </Box>
);

export default Footer;
C:\Users\W0024618\Desktop\apac-occupancy-frontend\src\components\Header.jsx
import React from 'react';
import { AppBar, Toolbar, Typography } from '@mui/material';

const Header = () => (
  <AppBar position="static">
    <Toolbar>
      <Typography variant="h6">APAC Occupancy Dashboard</Typography>
    </Toolbar>
  </AppBar>
);

export default Header;
C:\Users\W0024618\Desktop\apac-occupancy-frontend\src\data\buildingCapacities.js
C:\Users\W0024618\Desktop\apac-occupancy-frontend\src\hooks\useLiveOccupancy.js
// src/hooks/useLiveOccupancy.js

import { useState, useEffect } from 'react';
import { getCurrentOccupancy } from '../api/occupancy.service';

export const useLiveOccupancy = (partitionNames) => {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(true);

  const fetchData = async () => {
    try {
      const response = await getCurrentOccupancy(partitionNames);
      setData(response);
    } catch (error) {
      console.error('Error fetching occupancy:', error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchData();
    const interval = setInterval(fetchData, 5000);
    return () => clearInterval(interval);
  }, [partitionNames]);

  return { data, loading };
};

C:\Users\W0024618\Desktop\apac-occupancy-frontend\src\pages\Dashboard.jsx
import React, { useEffect, useState } from 'react';
import { Container, Box, Typography, Skeleton } from '@mui/material';
import Header from '../components/Header';
import Footer from '../components/Footer';
import SummaryCard from '../components/SummaryCard';
import PieChartCard from '../components/PieChartCard';
import LoadingSpinner from '../components/LoadingSpinner';
import { useLiveOccupancy } from '../hooks/useLiveOccupancy';

// APAC Flags
import indiaFlag from '../assets/flags/IN.India.png';
import philippinesFlag from '../assets/flags/PH.Manila.png';
import malaysiaFlag from '../assets/flags/PH.Manila.png';
import japanFlag from '../assets/flags/JP.Tokyo.png';

// Configurations
const partitions = [
  'IN.Pune',
  'PH.QuezonCity',
  'PH.TaguigCity',
  'JP.Tokyo',
  'MY.KualaLumpur'
];

const displayName = {
  'IN.Pune': 'Pune',
  'PH.QuezonCity': 'Quezon City',
  'PH.TaguigCity': 'Taguig City',
  'JP.Tokyo': 'Tokyo',
  'MY.KualaLumpur': 'Kuala Lumpur'
};

const flagMap = {
  'IN.Pune': indiaFlag,
  'PH.QuezonCity': philippinesFlag,
  'PH.TaguigCity': philippinesFlag,
  'JP.Tokyo': japanFlag,
  'MY.KualaLumpur': malaysiaFlag
};

const colorsMap = {
  'IN.Pune': ['#FFD666', '#FFF2CC', '#2ecc71', '#ec7063'],
  'PH.QuezonCity': ['#FFE599', '#FFF2CC', '#2ecc71', '#ec7063'],
  'PH.TaguigCity': ['#FFF2CC', '#fcf3cf', '#2ecc71', '#ec7063'],
  'JP.Tokyo': ['#FFD666', '#fcf3cf', '#2ecc71', '#ec7063'],
  'MY.KualaLumpur': ['#FFE599', '#fcf3cf', '#2ecc71', '#ec7063']
};

export default function APACDashboard() {
  const { data, loading, error } = useLiveOccupancy(1000);
  const [lastUpdate, setLastUpdate] = useState('');

  useEffect(() => {
    if (data) {
      setLastUpdate(new Date().toLocaleTimeString());
    }
  }, [data]);

  if (error) {
    return (
      <Box py={4}>
        <Typography color="error" align="center">Error loading live data</Typography>
      </Box>
    );
  }

  const todayData = data?.today || {};
  const realtime = data?.realtime || {};

  const todayTot = todayData.total || 0;
  const todayEmp = todayData.Employee || 0;
  const todayCon = todayData.Contractor || 0;

  const realtimeTot = Object.values(realtime).reduce((s, x) => s + (x?.total || 0), 0);
  const realtimeEmp = Object.values(realtime).reduce((s, x) => s + (x?.Employee || 0), 0);
  const realtimeCon = Object.values(realtime).reduce((s, x) => s + (x?.Contractor || 0), 0);

  const slice1 = partitions.slice(0, 3).map(k => ({
    name: displayName[k],
    value: realtime[k]?.total || 0
  }));

  const slice2 = partitions.slice(3).map(k => ({
    name: displayName[k],
    value: realtime[k]?.total || 0
  }));

  const summaryItems = partitions.map(k => {
    const x = realtime[k] || {};
    return {
      label: displayName[k],
      total: x.total || 0,
      emp: x.Employee || 0,
      cont: x.Contractor || 0,
      flag: flagMap[k],
      colors: colorsMap[k]
    };
  });

  return (
    <>
      <Header />
      <Container maxWidth={false} disableGutters sx={{ px: 2, py: 1 }}>

        {/* Summary Headcounts */}
        <Box display="flex" flexWrap="wrap" gap={1} mb={2}>
          {[
            { title: "Today's Total Headcount", value: todayTot, icon: <i className="fa-solid fa-users" style={{ color: '#E57373', fontSize: 25 }} />, border: '#FFD666' },
            { title: "Today's Employees Count", value: todayEmp, icon: <i className="bi bi-people" style={{ color: '#81C784', fontSize: 25 }} />, border: '#81C784' },
            { title: "Today's Contractors Count", value: todayCon, icon: <i className="fa-solid fa-circle-user" style={{ color: '#81C784', fontSize: 25 }} />, border: '#FFE599' },
            { title: "Realtime Headcount", value: realtimeTot, icon: <i className="fa-solid fa-users" style={{ color: '#BA68C8', fontSize: 25 }} />, border: '#FFF2CC' },
            { title: "Realtime Employees Count", value: realtimeEmp, icon: <i className="bi bi-people" style={{ color: '#81C784', fontSize: 25 }} />, border: '#FFD666' },
            { title: "Realtime Contractors Count", value: realtimeCon, icon: <i className="fa-solid fa-circle-user" style={{ color: '#BA68C8', fontSize: 25 }} />, border: '#FFE599' }
          ].map(c => (
            <Box key={c.title} sx={{ flex: '1 1 calc(16.66% - 8px)' }}>
              <SummaryCard
                title={c.title}
                total={c.value}
                stats={[]}
                icon={c.icon}
                sx={{ height: 140, border: `2px solid ${c.border}` }}
              />
            </Box>
          ))}
        </Box>

        {/* Site Summaries */}
        <Box display="flex" flexWrap="wrap" gap={1} mb={4}>
          {loading ? <LoadingSpinner /> : summaryItems.map(item => {
            const [tc, totc, ec, cc] = item.colors;
            return (
              <Box key={item.label} sx={{ flex: '1 1 calc(20% - 8px)' }}>
                <SummaryCard
                  title={item.label}
                  total={item.total}
                  stats={[
                    { label: 'Employees', value: item.emp },
                    { label: 'Contractors', value: item.cont }
                  ]}
                  icon={
                    item.flag &&
                    <Box component="img" src={item.flag} alt={item.label} sx={{ width: 50, height: 30, border: '1px solid #fff' }} />
                  }
                  titleColor={tc}
                  totalColor={totc}
                  statColors={[ec, cc]}
                  sx={{
                    height: 180,
                    border: `2px solid ${tc}`,
                    '& .MuiTypography-subtitle1': { fontSize: '1.3rem' },
                    '& .MuiTypography-h4': { fontSize: '1.7rem' },
                    '& .MuiTypography-caption': { fontSize: '0.875rem' }
                  }}
                />
              </Box>
            );
          })}
        </Box>

        {/* Charts */}
        <Box display="flex" gap={2} mb={4} flexWrap="wrap">
          <Box flex="1 1 0" sx={{ border: '2px solid #FFC107', borderRadius: 2, p: 2, background: 'rgba(0,0,0,0.6)' }}>
            {loading
              ? <Skeleton variant="rectangular" height={350} />
              : <PieChartCard
                  title="Pune â¢ Quezon City â¢ Taguig"
                  data={slice1}
                  colors={['#4E79A7', '#F28E2B', '#E15759']}
                  innerRadius={60}
                  height={410}
                  showZeroSlice
                  animationDuration={1500}
                />}
          </Box>

          <Box flex="1 1 0" sx={{ border: '2px solid #FFC107', borderRadius: 2, p: 2, background: 'rgba(0,0,0,0.6)' }}>
            {loading
              ? <Skeleton variant="rectangular" height={350} />
              : <PieChartCard
                  title="Tokyo â¢ Kuala Lumpur"
                  data={slice2}
                  colors={['#59A14F', '#EDC948']}
                  innerRadius={60}
                  height={410}
                  showZeroSlice
                  animationDuration={1500}
                />}
          </Box>
        </Box>
      </Container>

      <footer
        style={{
          backgroundColor: '#000',
          color: '#FFC72C',
          padding: '1.5rem 0',
          textAlign: 'center',
          borderTop: '2px solid #FFC72C',
          fontSize: '0.95rem',
          lineHeight: '1.6'
        }}
      >
        <div>
          <strong>Global Security Operations Center (GSOC)</strong><br />
          Live Occupancy dashboard for APAC â Real-time occupancy, floor activity, and personnel insights.
        </div>
        <div style={{ marginTop: '0.75rem' }}>
          Contact us: <a href="mailto:GSOC-GlobalSecurityOperationCenter.SharedMailbox@westernunion.com" style={{ color: '#FFC72C', textDecoration: 'underline' }}>gsoc@westernunion.com</a> |
          Landline: <span style={{ color: '#FFC72C' }}>+91-020-67632394</span>
        </div>
      </footer>
    </>
  );
}
C:\Users\W0024618\Desktop\apac-occupancy-frontend\src\routes\AppRoutes.jsx
C:\Users\W0024618\Desktop\apac-occupancy-frontend\src\pages\History.jsx
C:\Users\W0024618\Desktop\apac-occupancy-frontend\src\utils\doorMap.js
C:\Users\W0024618\Desktop\apac-occupancy-frontend\src\utils\floorLookup.js
C:\Users\W0024618\Desktop\apac-occupancy-frontend\src\utils\partitionGroups.js
C:\Users\W0024618\Desktop\apac-occupancy-frontend\src\App.js
// import logo from './logo.svg';
// import './App.css';

// function App() {
//   return (
//     <div className="App">
//       <header className="App-header">
//         <img src={logo} className="App-logo" alt="logo" />
//         <p>
//           Edit <code>src/App.js</code> and save to reload.
//         </p>
//         <a
//           className="App-link"
//           href="https://reactjs.org"
//           target="_blank"
//           rel="noopener noreferrer"
//         >
//           Learn React
//         </a>
//       </header>
//     </div>
//   );
// }

// export default App;
// import React from 'react';
// import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
// import Dashboard from './pages/Dashboard';
// import Header from './components/Header';
// import Footer from './components/Footer';

// const App = () => (
//   <Router>
//     <Header />
//     <Routes>
//       <Route path="/" element={<Dashboard />} />
//     </Routes>
//     <Footer />
//   </Router>
// );

// export default App;
// .........................




import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import Dashboard from './pages/Dashboard';
import History from './pages/History';

function App() {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<Dashboard />} />
        <Route path="/history/:partition" element={<History />} />
      </Routes>
    </Router>
  );
}

export default App;
C:\Users\W0024618\Desktop\apac-occupancy-frontend\src\theme\westernUnionTheme.js
// src/theme/westernUnionTheme.js
import { createTheme } from '@mui/material/styles';

const westernUnionTheme = createTheme({
  palette: {
    mode: 'dark',
    background: {
      default: '#000000',
      paper:   '#1c1c1c'
    },
    primary: {
      main: '#FFC72C',
      contrastText: '#000000'
    },
    secondary: {
      main: '#FFFFFF',
      contrastText: '#000000'
    },
    text: {
      primary:   '#FFFFFF',
      secondary: 'rgba(255,255,255,0.7)'
    },
    divider: 'rgba(255,255,255,0.2)'
  },

  typography: {
    fontFamily: '"Roboto","Helvetica","Arial",sans-serif',
    // Card titles
    subtitle1: { fontWeight: 900, color: '#FFE599' },
    // Totals (variant h4 in SummaryCard)
    h4: { color: '#fcf3cf', fontWeight: 'bold' },
    // Stat values (variant h6)
    h6: { color: '#FFC107', fontWeight: 900 },
    // Stat labels (variant caption)
    caption: { color: '#FFC107', fontWeight: 900 },

    // You can leave other variants untouched
    body1:   { color: '#FFFFFF' },
    body2:   { color: 'rgba(255,255,255,0.7)' }
  },

  components: {
    MuiCssBaseline: {
      styleOverrides: {
        html: {
          height: '100%'
        },
        body: {
          margin: 0,
          padding: 0,
          height: '100%',
          background: 'linear-gradient(135deg, #000000 30%, #2c0000 60%, #000000 100%)',
          backgroundAttachment: 'fixed',
          backgroundRepeat: 'no-repeat',
          backgroundSize: 'cover',
          animation: 'gradientSpin 20s ease infinite',
          overflowX: 'hidden'
        },
        '@keyframes gradientSpin': {
          '0%':   { backgroundPosition: '0% 50%' },
          '50%':  { backgroundPosition: '100% 50%' },
          '100%': { backgroundPosition: '0% 50%' }
        }
      }
    },

    MuiButton: {
      styleOverrides: {
        root: {
          textTransform: 'none',
          borderRadius: 4
        },
        contained: {
          backgroundColor: '#FFC107',
          color: '#000000',
          '&:hover': {
            backgroundColor: '#e6ac00'
          }
        }
      }
    },

    MuiDivider: {
      styleOverrides: {
        root: {
          backgroundColor: 'rgba(255,255,255,0.2)'
        }
      }
    },

    MuiTooltip: {
      styleOverrides: {
        tooltip: {
          backgroundColor: '#333',
          color: '#FFF'
        }
      }
    }

    // Note: We no longer override MuiCard so your SummaryCard and ChartCard
    // backgrounds, borders and hover effects come from their own `sx` props.
  }
});

export default westernUnionTheme;
